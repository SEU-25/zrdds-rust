#![allow(warnings)]
/* automatically generated by rust-bindgen 0.72.0 */

#[doc = r" If Bindgen could only determine the size and alignment of a"]
#[doc = r" type, it is represented like this."]
#[derive(PartialEq, Copy, Clone, Debug, Hash)]
#[repr(C)]
pub struct __BindgenOpaqueArray<T: Copy, const N: usize>(pub [T; N]);
impl<T: Copy + Default, const N: usize> Default for __BindgenOpaqueArray<T, N> {
    fn default() -> Self {
        Self([<T as Default>::default(); N])
    }
}
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const MAX_USHORT_VALUE: u32 = 65535;
pub const MAX_SHORT_VALUE: u32 = 32767;
pub const MAX_UINT32_VALUE: u32 = 4294967295;
pub const MAX_INT32_VALUE: u32 = 2147483647;
pub const LENGTH_UNLIMITED: i32 = -1;
pub const DDS_MILLISEC_PER_SEC: u32 = 1000;
pub const DDS_MICROSEC_PER_SEC: u32 = 1000000;
pub const DDS_NANOSEC_PER_SEC: u32 = 1000000000;
pub const DDS_INITIALIZE_NUMBER: u32 = 13496235;
pub const DDS_ANY_SAMPLE_STATE: u32 = 4294967295;
pub const DDS_ANY_VIEW_STATE: u32 = 4294967295;
pub const DDS_ANY_INSTANCE_STATE: u32 = 4294967295;
pub const DDS_NOT_ALIVE_INSTANCE_STATE: u32 = 6;
pub const DDS_STATUS_MASK_ALL: u32 = 4294967295;
pub const DDS_STATUS_MASK_NONE: u32 = 0;
pub const PID_LIST_END: u32 = 16130;
pub const BUFFERED_PROPERTY_NUM: u32 = 16;
pub const TypeObjectSize: u32 = 64;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_CXX26: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &[u8; 1] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const DDS_QUALITY_EVAL_LATENCY_RESERVED_NUM: u32 = 16;
pub const DYNAMIC_DATA_MEMBER_ID_UNSPECIFIED: i32 = -1;
pub const DYNAMIC_DATA_BUFFER_MEMBER_FIXED_PART_SIZE: u32 = 64;
pub const DYNAMIC_DATA_BUFFER_MEMBER_MAX_STRING_LENGTH: u32 = 256;
pub const DDS_XCDR_DATA_REPRESENTATION: u32 = 0;
pub const DDS_XML_DATA_REPRESENTATION: u32 = 1;
pub const ZRDDS_NETWORK_TOPIC: &[u8; 20] = b"ZRDDS_NETWORK_TOPIC\0";
pub const ZRDDS_DOMAINPARTICIPANT_TOPIC: &[u8; 30] = b"ZRDDS_DOMAINPARTICIPANT_TOPIC\0";
pub const ZRDDS_PUBLISHER_TOPIC: &[u8; 22] = b"ZRDDS_PUBLISHER_TOPIC\0";
pub const ZRDDS_DOMAINPARTICIPANTFACTORY_TOPIC: &[u8; 37] =
    b"ZRDDS_DOMAINPARTICIPANTFACTORY_TOPIC\0";
pub const ZRDDS_MPORT_TOPIC: &[u8; 18] = b"ZRDDS_MPORT_TOPIC\0";
pub const ZRDDS_SHMEM_TOPIC: &[u8; 18] = b"ZRDDS_SHMEM_TOPIC\0";
pub const ZRDDS_VALIDATOR_TOPIC: &[u8; 22] = b"ZRDDS_VALIDATOR_TOPIC\0";
pub const ZRDDS_INTERACTIVECMD_TOPIC: &[u8; 27] = b"ZRDDS_INTERACTIVECMD_TOPIC\0";
pub const ZRDDS_ANY_TOPICNAME: &[u8; 28] = b"ZRDDS_ANY_LOG_TOPIC_NAME___\0";
pub const ZRDDS_LOG_ENABLE_BEGIN_NUM: u32 = 7000;
pub const ZRDDS_LOG_ENABLE_END_NUM: u32 = 7000;
pub const DDS_ReturnCode_t_DDS_RETCODE_OK: DDS_ReturnCode_t = 0;
pub const DDS_ReturnCode_t_DDS_RETCODE_ERROR: DDS_ReturnCode_t = 1;
pub const DDS_ReturnCode_t_DDS_RETCODE_UNSUPPORTED: DDS_ReturnCode_t = 2;
pub const DDS_ReturnCode_t_DDS_RETCODE_BAD_PARAMETER: DDS_ReturnCode_t = 3;
pub const DDS_ReturnCode_t_DDS_RETCODE_PRECONDITION_NOT_MET: DDS_ReturnCode_t = 4;
pub const DDS_ReturnCode_t_DDS_RETCODE_OUT_OF_RESOURCES: DDS_ReturnCode_t = 5;
pub const DDS_ReturnCode_t_DDS_RETCODE_NOT_ENABLED: DDS_ReturnCode_t = 6;
pub const DDS_ReturnCode_t_DDS_RETCODE_IMMUTABLE_POLICY: DDS_ReturnCode_t = 7;
pub const DDS_ReturnCode_t_DDS_RETCODE_INCONSISTENT: DDS_ReturnCode_t = 8;
pub const DDS_ReturnCode_t_DDS_RETCODE_ALREADY_DELETED: DDS_ReturnCode_t = 9;
pub const DDS_ReturnCode_t_DDS_RETCODE_TIMEOUT: DDS_ReturnCode_t = 10;
pub const DDS_ReturnCode_t_DDS_RETCODE_NO_DATA: DDS_ReturnCode_t = 11;
pub const DDS_ReturnCode_t_DDS_RETCODE_ILLEGAL_OPERATION: DDS_ReturnCode_t = 12;
pub const DDS_ReturnCode_t_DDS_RETCODE_NOT_ALLOWED_BY_SEC: DDS_ReturnCode_t = 13;
pub type DDS_ReturnCode_t = ::std::os::raw::c_int;
pub const DDS_SampleStateKind_DDS_READ_SAMPLE_STATE: DDS_SampleStateKind = 1;
pub const DDS_SampleStateKind_DDS_NOT_READ_SAMPLE_STATE: DDS_SampleStateKind = 2;
pub type DDS_SampleStateKind = ::std::os::raw::c_int;
pub const DDS_ViewStateKind_DDS_NEW_VIEW_STATE: DDS_ViewStateKind = 1;
pub const DDS_ViewStateKind_DDS_NOT_NEW_VIEW_STATE: DDS_ViewStateKind = 2;
pub type DDS_ViewStateKind = ::std::os::raw::c_int;
pub const DDS_InstanceStateKind_DDS_ALIVE_INSTANCE_STATE: DDS_InstanceStateKind = 1;
pub const DDS_InstanceStateKind_DDS_NOT_ALIVE_DISPOSED_INSTANCE_STATE: DDS_InstanceStateKind = 2;
pub const DDS_InstanceStateKind_DDS_NOT_ALIVE_NO_WRITERS_INSTANCE_STATE: DDS_InstanceStateKind = 4;
pub type DDS_InstanceStateKind = ::std::os::raw::c_int;
pub type ZR_BOOLEAN = ::std::os::raw::c_char;
pub type ZR_INT8 = ::std::os::raw::c_char;
pub type ZR_UINT8 = ::std::os::raw::c_uchar;
pub type ZR_INT16 = ::std::os::raw::c_short;
pub type ZR_UINT16 = ::std::os::raw::c_ushort;
pub type ZR_INT32 = ::std::os::raw::c_int;
pub type ZR_UINT32 = ::std::os::raw::c_uint;
pub type ZR_INT64 = ::std::os::raw::c_longlong;
pub type ZR_UINT64 = ::std::os::raw::c_ulonglong;
pub type ZR_FLOAT32 = f32;
pub type ZR_DOUBLE64 = f64;
pub type DDS_Boolean = ZR_BOOLEAN;
pub type DDS_Octet = ::std::os::raw::c_uchar;
pub type DDS_Char = ::std::os::raw::c_char;
pub type DDS_Short = ZR_INT16;
pub type DDS_UShort = ZR_UINT16;
pub type DDS_Long = ZR_INT32;
pub type DDS_ULong = ZR_UINT32;
pub type DDS_LongLong = ZR_INT64;
pub type DDS_ULongLong = ZR_UINT64;
pub type DDS_Float = ZR_FLOAT32;
pub type DDS_Double = ZR_DOUBLE64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZRBuffer {
    pub content: *mut ::std::os::raw::c_void,
    pub length: ZR_UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZRBuffer"][::std::mem::size_of::<ZRBuffer>() - 16usize];
    ["Alignment of ZRBuffer"][::std::mem::align_of::<ZRBuffer>() - 8usize];
    ["Offset of field: ZRBuffer::content"][::std::mem::offset_of!(ZRBuffer, content) - 0usize];
    ["Offset of field: ZRBuffer::length"][::std::mem::offset_of!(ZRBuffer, length) - 8usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static DDS_DURATION_INFINITE_SEC: DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static DDS_DURATION_ZERO_SEC: DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static DDS_DURATION_INFINITE_NSEC: DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static DDS_DURATION_ZERO_NSEC: DDS_ULong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_Duration_t {
    pub sec: DDS_Long,
    pub nanosec: DDS_ULong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_Duration_t"][::std::mem::size_of::<DDS_Duration_t>() - 8usize];
    ["Alignment of DDS_Duration_t"][::std::mem::align_of::<DDS_Duration_t>() - 4usize];
    ["Offset of field: DDS_Duration_t::sec"][::std::mem::offset_of!(DDS_Duration_t, sec) - 0usize];
    ["Offset of field: DDS_Duration_t::nanosec"]
        [::std::mem::offset_of!(DDS_Duration_t, nanosec) - 4usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DurationAdd(
        self_: *const DDS_Duration_t,
        right: *const DDS_Duration_t,
    ) -> DDS_Duration_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DurationSub(
        self_: *const DDS_Duration_t,
        subtractor: *const DDS_Duration_t,
    ) -> DDS_Duration_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DurationCompare(self_: *const DDS_Duration_t, right: *const DDS_Duration_t) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DurationGetMicrosec(self_: *const DDS_Duration_t) -> DDS_ULongLong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DurationGetMillisec(self_: *const DDS_Duration_t) -> DDS_ULongLong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DurationFromSec(seconds: DDS_ULong) -> DDS_Duration_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DurationFromMillis(milliseconds: DDS_ULong) -> DDS_Duration_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DurationFromMicros(microseconds: DDS_ULong) -> DDS_Duration_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DurationFromNanos(nanoseconds: DDS_ULong) -> DDS_Duration_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static INVALID_DURATION: DDS_Duration_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static INFINITE_DURATION: DDS_Duration_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static ZERO_DURATION: DDS_Duration_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static DEFALUT_HB_RESP_DELAY: DDS_Duration_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static DEFALUT_HB_SUPPRESSION: DDS_Duration_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DEFALUT_MAX_BLOCKING_TIME: DDS_Duration_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static DEFALUT_HB_PERIOD: DDS_Duration_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static DEFALUT_NACK_RESP_DELAY: DDS_Duration_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static DEFALUT_NACK_SUPPRESSION: DDS_Duration_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static DEFALUT_UPDATE_PARTICIPANT: DDS_Duration_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static DEFALUT_PARTICIPANT_LEASE: DDS_Duration_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static DEFALUT_CHECK_PARTICIPANT_STALE: DDS_Duration_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static DEFALUT_REFRESH_UNACK: DDS_Duration_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DEFAULT_DATAP_SUPPRESSION: DDS_Duration_t;
}
pub type DDS_Time_t = DDS_Duration_t;
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static DDS_TIME_ZERO: DDS_Time_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static DDS_TIME_INVALID: DDS_Time_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static DDS_TIME_INFINITE: DDS_Time_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRGetNowTime(nowTime: *mut DDS_Time_t);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRGetNowTimeString(strformat: *mut DDS_Char) -> DDS_LongLong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRGetNowTimeString2(strformat: *mut DDS_Char) -> DDS_LongLong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZRMemPool {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRMalloc(pool: *mut ZRMemPool, size: DDS_ULong) -> *mut ::std::os::raw::c_void;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDealloc(pool: *mut ZRMemPool, mem: *mut ::std::os::raw::c_void);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRInitialGlobalMemPool();
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRFinalizeGlobalMemPool();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_InstanceHandle_t {
    pub value: [DDS_Octet; 16usize],
    pub valid: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_InstanceHandle_t"][::std::mem::size_of::<DDS_InstanceHandle_t>() - 17usize];
    ["Alignment of DDS_InstanceHandle_t"][::std::mem::align_of::<DDS_InstanceHandle_t>() - 1usize];
    ["Offset of field: DDS_InstanceHandle_t::value"]
        [::std::mem::offset_of!(DDS_InstanceHandle_t, value) - 0usize];
    ["Offset of field: DDS_InstanceHandle_t::valid"]
        [::std::mem::offset_of!(DDS_InstanceHandle_t, valid) - 16usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandle_t_Compare(
        handle1: *const DDS_InstanceHandle_t,
        handle2: *const DDS_InstanceHandle_t,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static DDS_HANDLE_NIL_NATIVE: DDS_InstanceHandle_t;
}
pub type DDS_KeyHash_t = DDS_InstanceHandle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_InstanceHandleSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_InstanceHandle_t,
    pub _discontiguousBuffer: *mut *mut DDS_InstanceHandle_t,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_InstanceHandleSeq"][::std::mem::size_of::<DDS_InstanceHandleSeq>() - 72usize];
    ["Alignment of DDS_InstanceHandleSeq"]
        [::std::mem::align_of::<DDS_InstanceHandleSeq>() - 8usize];
    ["Offset of field: DDS_InstanceHandleSeq::_owned"]
        [::std::mem::offset_of!(DDS_InstanceHandleSeq, _owned) - 0usize];
    ["Offset of field: DDS_InstanceHandleSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_InstanceHandleSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_InstanceHandleSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_InstanceHandleSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_InstanceHandleSeq::_maximum"]
        [::std::mem::offset_of!(DDS_InstanceHandleSeq, _maximum) - 24usize];
    ["Offset of field: DDS_InstanceHandleSeq::_length"]
        [::std::mem::offset_of!(DDS_InstanceHandleSeq, _length) - 28usize];
    ["Offset of field: DDS_InstanceHandleSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_InstanceHandleSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_InstanceHandleSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_InstanceHandleSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_InstanceHandleSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_InstanceHandleSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_InstanceHandleSeq::_mempool"]
        [::std::mem::offset_of!(DDS_InstanceHandleSeq, _mempool) - 56usize];
    ["Offset of field: DDS_InstanceHandleSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_InstanceHandleSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_is_initialized(self_: *const DDS_InstanceHandleSeq)
    -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_set(
        self_: *mut DDS_InstanceHandleSeq,
        index: DDS_ULong,
        newValue: *const DDS_InstanceHandle_t,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_initialize(self_: *mut DDS_InstanceHandleSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_new(newMax: DDS_ULong) -> *mut DDS_InstanceHandleSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_get_maximum(self_: *const DDS_InstanceHandleSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_set_maximum(
        self_: *mut DDS_InstanceHandleSeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_get_length(self_: *const DDS_InstanceHandleSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_set_length(
        self_: *mut DDS_InstanceHandleSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_ensure_length(
        self_: *mut DDS_InstanceHandleSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_get_reference(
        self_: *const DDS_InstanceHandleSeq,
        index: DDS_ULong,
    ) -> *mut DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_append(
        self_: *mut DDS_InstanceHandleSeq,
        newValue: *const DDS_InstanceHandle_t,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_append_autosize(
        self_: *mut DDS_InstanceHandleSeq,
        newValue: *const DDS_InstanceHandle_t,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_copy_no_alloc(
        self_: *mut DDS_InstanceHandleSeq,
        src: *const DDS_InstanceHandleSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_copy(
        self_: *mut DDS_InstanceHandleSeq,
        src: *const DDS_InstanceHandleSeq,
    ) -> *mut DDS_InstanceHandleSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_compare(
        self_: *const DDS_InstanceHandleSeq,
        src: *const DDS_InstanceHandleSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_from_array(
        self_: *mut DDS_InstanceHandleSeq,
        srcArray: *const DDS_InstanceHandle_t,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_to_array(
        self_: *const DDS_InstanceHandleSeq,
        dstArray: *mut DDS_InstanceHandle_t,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_loan_contiguous(
        self_: *mut DDS_InstanceHandleSeq,
        buffer: *mut DDS_InstanceHandle_t,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_loan_discontiguous(
        self_: *mut DDS_InstanceHandleSeq,
        buffer: *mut *mut DDS_InstanceHandle_t,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_unloan(self_: *mut DDS_InstanceHandleSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_get_contiguous_buffer(
        self_: *const DDS_InstanceHandleSeq,
    ) -> *mut DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_get_discontiguous_buffer(
        self_: *const DDS_InstanceHandleSeq,
    ) -> *mut *mut DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_get_reader_and_data_ptr(
        self_: *const DDS_InstanceHandleSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_set_reader_and_data_ptr(
        self_: *mut DDS_InstanceHandleSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_has_ownership(self_: *const DDS_InstanceHandleSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_clear(self_: *mut DDS_InstanceHandleSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_finalize(self_: *mut DDS_InstanceHandleSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_shallow_copy(
        self_: *mut DDS_InstanceHandleSeq,
        other: *mut DDS_InstanceHandleSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_InstanceHandleSeq_initialize_ex(
        self_: *mut DDS_InstanceHandleSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_SequenceNumber_t {
    pub high: DDS_Long,
    pub low: DDS_ULong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_SequenceNumber_t"][::std::mem::size_of::<DDS_SequenceNumber_t>() - 8usize];
    ["Alignment of DDS_SequenceNumber_t"][::std::mem::align_of::<DDS_SequenceNumber_t>() - 4usize];
    ["Offset of field: DDS_SequenceNumber_t::high"]
        [::std::mem::offset_of!(DDS_SequenceNumber_t, high) - 0usize];
    ["Offset of field: DDS_SequenceNumber_t::low"]
        [::std::mem::offset_of!(DDS_SequenceNumber_t, low) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_SampleInfo {
    pub sample_state: DDS_SampleStateKind,
    pub view_state: DDS_ViewStateKind,
    pub instance_state: DDS_InstanceStateKind,
    pub source_timestamp: DDS_Time_t,
    pub write_sequence_number: DDS_SequenceNumber_t,
    pub instance_handle: DDS_InstanceHandle_t,
    pub publication_handle: DDS_InstanceHandle_t,
    pub disposed_generation_count: DDS_ULong,
    pub no_writers_generation_count: DDS_ULong,
    pub sample_rank: DDS_ULong,
    pub generation_rank: DDS_ULong,
    pub absolute_generation_rank: DDS_ULong,
    pub valid_data: DDS_Boolean,
    pub recive_locator: *mut ::std::os::raw::c_void,
    pub recive_order: DDS_ULong,
    pub is_batch_end: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_SampleInfo"][::std::mem::size_of::<DDS_SampleInfo>() - 104usize];
    ["Alignment of DDS_SampleInfo"][::std::mem::align_of::<DDS_SampleInfo>() - 8usize];
    ["Offset of field: DDS_SampleInfo::sample_state"]
        [::std::mem::offset_of!(DDS_SampleInfo, sample_state) - 0usize];
    ["Offset of field: DDS_SampleInfo::view_state"]
        [::std::mem::offset_of!(DDS_SampleInfo, view_state) - 4usize];
    ["Offset of field: DDS_SampleInfo::instance_state"]
        [::std::mem::offset_of!(DDS_SampleInfo, instance_state) - 8usize];
    ["Offset of field: DDS_SampleInfo::source_timestamp"]
        [::std::mem::offset_of!(DDS_SampleInfo, source_timestamp) - 12usize];
    ["Offset of field: DDS_SampleInfo::write_sequence_number"]
        [::std::mem::offset_of!(DDS_SampleInfo, write_sequence_number) - 20usize];
    ["Offset of field: DDS_SampleInfo::instance_handle"]
        [::std::mem::offset_of!(DDS_SampleInfo, instance_handle) - 28usize];
    ["Offset of field: DDS_SampleInfo::publication_handle"]
        [::std::mem::offset_of!(DDS_SampleInfo, publication_handle) - 45usize];
    ["Offset of field: DDS_SampleInfo::disposed_generation_count"]
        [::std::mem::offset_of!(DDS_SampleInfo, disposed_generation_count) - 64usize];
    ["Offset of field: DDS_SampleInfo::no_writers_generation_count"]
        [::std::mem::offset_of!(DDS_SampleInfo, no_writers_generation_count) - 68usize];
    ["Offset of field: DDS_SampleInfo::sample_rank"]
        [::std::mem::offset_of!(DDS_SampleInfo, sample_rank) - 72usize];
    ["Offset of field: DDS_SampleInfo::generation_rank"]
        [::std::mem::offset_of!(DDS_SampleInfo, generation_rank) - 76usize];
    ["Offset of field: DDS_SampleInfo::absolute_generation_rank"]
        [::std::mem::offset_of!(DDS_SampleInfo, absolute_generation_rank) - 80usize];
    ["Offset of field: DDS_SampleInfo::valid_data"]
        [::std::mem::offset_of!(DDS_SampleInfo, valid_data) - 84usize];
    ["Offset of field: DDS_SampleInfo::recive_locator"]
        [::std::mem::offset_of!(DDS_SampleInfo, recive_locator) - 88usize];
    ["Offset of field: DDS_SampleInfo::recive_order"]
        [::std::mem::offset_of!(DDS_SampleInfo, recive_order) - 96usize];
    ["Offset of field: DDS_SampleInfo::is_batch_end"]
        [::std::mem::offset_of!(DDS_SampleInfo, is_batch_end) - 100usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_SampleInfoValidMember {
    pub source_timestamp: DDS_Boolean,
    pub valid_data: DDS_Boolean,
    pub instance_handle: DDS_Boolean,
    pub instance_state: DDS_Boolean,
    pub sample_state: DDS_Boolean,
    pub view_state: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_SampleInfoValidMember"]
        [::std::mem::size_of::<DDS_SampleInfoValidMember>() - 6usize];
    ["Alignment of DDS_SampleInfoValidMember"]
        [::std::mem::align_of::<DDS_SampleInfoValidMember>() - 1usize];
    ["Offset of field: DDS_SampleInfoValidMember::source_timestamp"]
        [::std::mem::offset_of!(DDS_SampleInfoValidMember, source_timestamp) - 0usize];
    ["Offset of field: DDS_SampleInfoValidMember::valid_data"]
        [::std::mem::offset_of!(DDS_SampleInfoValidMember, valid_data) - 1usize];
    ["Offset of field: DDS_SampleInfoValidMember::instance_handle"]
        [::std::mem::offset_of!(DDS_SampleInfoValidMember, instance_handle) - 2usize];
    ["Offset of field: DDS_SampleInfoValidMember::instance_state"]
        [::std::mem::offset_of!(DDS_SampleInfoValidMember, instance_state) - 3usize];
    ["Offset of field: DDS_SampleInfoValidMember::sample_state"]
        [::std::mem::offset_of!(DDS_SampleInfoValidMember, sample_state) - 4usize];
    ["Offset of field: DDS_SampleInfoValidMember::view_state"]
        [::std::mem::offset_of!(DDS_SampleInfoValidMember, view_state) - 5usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_SampleInfoSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_SampleInfo,
    pub _discontiguousBuffer: *mut *mut DDS_SampleInfo,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_SampleInfoSeq"][::std::mem::size_of::<DDS_SampleInfoSeq>() - 72usize];
    ["Alignment of DDS_SampleInfoSeq"][::std::mem::align_of::<DDS_SampleInfoSeq>() - 8usize];
    ["Offset of field: DDS_SampleInfoSeq::_owned"]
        [::std::mem::offset_of!(DDS_SampleInfoSeq, _owned) - 0usize];
    ["Offset of field: DDS_SampleInfoSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_SampleInfoSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_SampleInfoSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_SampleInfoSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_SampleInfoSeq::_maximum"]
        [::std::mem::offset_of!(DDS_SampleInfoSeq, _maximum) - 24usize];
    ["Offset of field: DDS_SampleInfoSeq::_length"]
        [::std::mem::offset_of!(DDS_SampleInfoSeq, _length) - 28usize];
    ["Offset of field: DDS_SampleInfoSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_SampleInfoSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_SampleInfoSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_SampleInfoSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_SampleInfoSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_SampleInfoSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_SampleInfoSeq::_mempool"]
        [::std::mem::offset_of!(DDS_SampleInfoSeq, _mempool) - 56usize];
    ["Offset of field: DDS_SampleInfoSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_SampleInfoSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_is_initialized(self_: *const DDS_SampleInfoSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_set(
        self_: *mut DDS_SampleInfoSeq,
        index: DDS_ULong,
        newValue: *const DDS_SampleInfo,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_initialize(self_: *mut DDS_SampleInfoSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_new(newMax: DDS_ULong) -> *mut DDS_SampleInfoSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_get_maximum(self_: *const DDS_SampleInfoSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_set_maximum(
        self_: *mut DDS_SampleInfoSeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_get_length(self_: *const DDS_SampleInfoSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_set_length(
        self_: *mut DDS_SampleInfoSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_ensure_length(
        self_: *mut DDS_SampleInfoSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_get_reference(
        self_: *const DDS_SampleInfoSeq,
        index: DDS_ULong,
    ) -> *mut DDS_SampleInfo;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_append(
        self_: *mut DDS_SampleInfoSeq,
        newValue: *const DDS_SampleInfo,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_append_autosize(
        self_: *mut DDS_SampleInfoSeq,
        newValue: *const DDS_SampleInfo,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_copy_no_alloc(
        self_: *mut DDS_SampleInfoSeq,
        src: *const DDS_SampleInfoSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_copy(
        self_: *mut DDS_SampleInfoSeq,
        src: *const DDS_SampleInfoSeq,
    ) -> *mut DDS_SampleInfoSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_compare(
        self_: *const DDS_SampleInfoSeq,
        src: *const DDS_SampleInfoSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_from_array(
        self_: *mut DDS_SampleInfoSeq,
        srcArray: *const DDS_SampleInfo,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_to_array(
        self_: *const DDS_SampleInfoSeq,
        dstArray: *mut DDS_SampleInfo,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_loan_contiguous(
        self_: *mut DDS_SampleInfoSeq,
        buffer: *mut DDS_SampleInfo,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_loan_discontiguous(
        self_: *mut DDS_SampleInfoSeq,
        buffer: *mut *mut DDS_SampleInfo,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_unloan(self_: *mut DDS_SampleInfoSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_get_contiguous_buffer(
        self_: *const DDS_SampleInfoSeq,
    ) -> *mut DDS_SampleInfo;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_get_discontiguous_buffer(
        self_: *const DDS_SampleInfoSeq,
    ) -> *mut *mut DDS_SampleInfo;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_get_reader_and_data_ptr(
        self_: *const DDS_SampleInfoSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_set_reader_and_data_ptr(
        self_: *mut DDS_SampleInfoSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_has_ownership(self_: *const DDS_SampleInfoSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_clear(self_: *mut DDS_SampleInfoSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_finalize(self_: *mut DDS_SampleInfoSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_shallow_copy(
        self_: *mut DDS_SampleInfoSeq,
        other: *mut DDS_SampleInfoSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SampleInfoSeq_initialize_ex(
        self_: *mut DDS_SampleInfoSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
pub type DDS_SampleStateMask = DDS_ULong;
pub type DDS_ViewStateMask = DDS_ULong;
pub type DDS_InstanceStateMask = DDS_ULong;
pub type DDS_StatusKindMask = DDS_ULong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_LivelinessChangedStatus {
    pub alive_count: DDS_Long,
    pub not_alive_count: DDS_Long,
    pub alive_count_change: DDS_Long,
    pub not_alive_count_change: DDS_Long,
    pub last_publication_handle: DDS_InstanceHandle_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_LivelinessChangedStatus"]
        [::std::mem::size_of::<DDS_LivelinessChangedStatus>() - 36usize];
    ["Alignment of DDS_LivelinessChangedStatus"]
        [::std::mem::align_of::<DDS_LivelinessChangedStatus>() - 4usize];
    ["Offset of field: DDS_LivelinessChangedStatus::alive_count"]
        [::std::mem::offset_of!(DDS_LivelinessChangedStatus, alive_count) - 0usize];
    ["Offset of field: DDS_LivelinessChangedStatus::not_alive_count"]
        [::std::mem::offset_of!(DDS_LivelinessChangedStatus, not_alive_count) - 4usize];
    ["Offset of field: DDS_LivelinessChangedStatus::alive_count_change"]
        [::std::mem::offset_of!(DDS_LivelinessChangedStatus, alive_count_change) - 8usize];
    ["Offset of field: DDS_LivelinessChangedStatus::not_alive_count_change"]
        [::std::mem::offset_of!(DDS_LivelinessChangedStatus, not_alive_count_change) - 12usize];
    ["Offset of field: DDS_LivelinessChangedStatus::last_publication_handle"]
        [::std::mem::offset_of!(DDS_LivelinessChangedStatus, last_publication_handle) - 16usize];
};
pub const DDS_QosPolicyId_t_DDS_INVALID_QOS_POLICY_ID: DDS_QosPolicyId_t = 0;
pub const DDS_QosPolicyId_t_DDS_USERDATA_QOS_POLICY_ID: DDS_QosPolicyId_t = 1;
pub const DDS_QosPolicyId_t_DDS_DURABILITY_QOS_POLICY_ID: DDS_QosPolicyId_t = 2;
pub const DDS_QosPolicyId_t_DDS_PRESENTATION_QOS_POLICY_ID: DDS_QosPolicyId_t = 3;
pub const DDS_QosPolicyId_t_DDS_DEADLINE_QOS_POLICY_ID: DDS_QosPolicyId_t = 4;
pub const DDS_QosPolicyId_t_DDS_LATENCYBUDGET_QOS_POLICY_ID: DDS_QosPolicyId_t = 5;
pub const DDS_QosPolicyId_t_DDS_OWNERSHIP_QOS_POLICY_ID: DDS_QosPolicyId_t = 6;
pub const DDS_QosPolicyId_t_DDS_OWNERSHIPSTRENGTH_QOS_POLICY_ID: DDS_QosPolicyId_t = 7;
pub const DDS_QosPolicyId_t_DDS_LIVELINESS_QOS_POLICY_ID: DDS_QosPolicyId_t = 8;
pub const DDS_QosPolicyId_t_DDS_TIMEBASEDFILTER_QOS_POLICY_ID: DDS_QosPolicyId_t = 9;
pub const DDS_QosPolicyId_t_DDS_PARTITION_QOS_POLICY_ID: DDS_QosPolicyId_t = 10;
pub const DDS_QosPolicyId_t_DDS_RELIABILITY_QOS_POLICY_ID: DDS_QosPolicyId_t = 11;
pub const DDS_QosPolicyId_t_DDS_DESTINATIONORDER_QOS_POLICY_ID: DDS_QosPolicyId_t = 12;
pub const DDS_QosPolicyId_t_DDS_HISTORY_QOS_POLICY_ID: DDS_QosPolicyId_t = 13;
pub const DDS_QosPolicyId_t_DDS_RESOURCELIMITS_QOS_POLICY_ID: DDS_QosPolicyId_t = 14;
pub const DDS_QosPolicyId_t_DDS_ENTITYFACTORY_QOS_POLICY_ID: DDS_QosPolicyId_t = 15;
pub const DDS_QosPolicyId_t_DDS_WRITERDATALIFECYCLE_QOS_POLICY_ID: DDS_QosPolicyId_t = 16;
pub const DDS_QosPolicyId_t_DDS_READERDATALIFECYCLE_QOS_POLICY_ID: DDS_QosPolicyId_t = 17;
pub const DDS_QosPolicyId_t_DDS_TOPICDATA_QOS_POLICY_ID: DDS_QosPolicyId_t = 18;
pub const DDS_QosPolicyId_t_DDS_GROUPDATA_QOS_POLICY_ID: DDS_QosPolicyId_t = 19;
pub const DDS_QosPolicyId_t_DDS_TRANSPORTPRIORITY_QOS_POLICY_ID: DDS_QosPolicyId_t = 20;
pub const DDS_QosPolicyId_t_DDS_LIFESPAN_QOS_POLICY_ID: DDS_QosPolicyId_t = 21;
pub const DDS_QosPolicyId_t_DDS_DURABILITYSERVICE_QOS_POLICY_ID: DDS_QosPolicyId_t = 22;
pub const DDS_QosPolicyId_t_DDS_DATA_REPRESENTATION_QOS_POLICY_ID: DDS_QosPolicyId_t = 23;
pub const DDS_QosPolicyId_t_DDS_TYPE_CONSISTENCY_ENFORCEMENT_QOS_POLICY_ID: DDS_QosPolicyId_t = 24;
pub const DDS_QosPolicyId_t_DDS_NETWORKCONFIG_QOS_POLICY_ID: DDS_QosPolicyId_t = 50;
pub const DDS_QosPolicyId_t_DDS_DISCOVERYCONFIG_QOS_POLICY_ID: DDS_QosPolicyId_t = 51;
pub type DDS_QosPolicyId_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_QosPolicyCount {
    pub last_policy_id: DDS_QosPolicyId_t,
    pub count: DDS_Long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_QosPolicyCount"][::std::mem::size_of::<DDS_QosPolicyCount>() - 8usize];
    ["Alignment of DDS_QosPolicyCount"][::std::mem::align_of::<DDS_QosPolicyCount>() - 4usize];
    ["Offset of field: DDS_QosPolicyCount::last_policy_id"]
        [::std::mem::offset_of!(DDS_QosPolicyCount, last_policy_id) - 0usize];
    ["Offset of field: DDS_QosPolicyCount::count"]
        [::std::mem::offset_of!(DDS_QosPolicyCount, count) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_QosPolicyCountSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_QosPolicyCount,
    pub _discontiguousBuffer: *mut *mut DDS_QosPolicyCount,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_QosPolicyCountSeq"][::std::mem::size_of::<DDS_QosPolicyCountSeq>() - 72usize];
    ["Alignment of DDS_QosPolicyCountSeq"]
        [::std::mem::align_of::<DDS_QosPolicyCountSeq>() - 8usize];
    ["Offset of field: DDS_QosPolicyCountSeq::_owned"]
        [::std::mem::offset_of!(DDS_QosPolicyCountSeq, _owned) - 0usize];
    ["Offset of field: DDS_QosPolicyCountSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_QosPolicyCountSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_QosPolicyCountSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_QosPolicyCountSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_QosPolicyCountSeq::_maximum"]
        [::std::mem::offset_of!(DDS_QosPolicyCountSeq, _maximum) - 24usize];
    ["Offset of field: DDS_QosPolicyCountSeq::_length"]
        [::std::mem::offset_of!(DDS_QosPolicyCountSeq, _length) - 28usize];
    ["Offset of field: DDS_QosPolicyCountSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_QosPolicyCountSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_QosPolicyCountSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_QosPolicyCountSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_QosPolicyCountSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_QosPolicyCountSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_QosPolicyCountSeq::_mempool"]
        [::std::mem::offset_of!(DDS_QosPolicyCountSeq, _mempool) - 56usize];
    ["Offset of field: DDS_QosPolicyCountSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_QosPolicyCountSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_is_initialized(self_: *const DDS_QosPolicyCountSeq)
    -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_set(
        self_: *mut DDS_QosPolicyCountSeq,
        index: DDS_ULong,
        newValue: *const DDS_QosPolicyCount,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_initialize(self_: *mut DDS_QosPolicyCountSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_new(newMax: DDS_ULong) -> *mut DDS_QosPolicyCountSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_get_maximum(self_: *const DDS_QosPolicyCountSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_set_maximum(
        self_: *mut DDS_QosPolicyCountSeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_get_length(self_: *const DDS_QosPolicyCountSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_set_length(
        self_: *mut DDS_QosPolicyCountSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_ensure_length(
        self_: *mut DDS_QosPolicyCountSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_get_reference(
        self_: *const DDS_QosPolicyCountSeq,
        index: DDS_ULong,
    ) -> *mut DDS_QosPolicyCount;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_append(
        self_: *mut DDS_QosPolicyCountSeq,
        newValue: *const DDS_QosPolicyCount,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_append_autosize(
        self_: *mut DDS_QosPolicyCountSeq,
        newValue: *const DDS_QosPolicyCount,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_copy_no_alloc(
        self_: *mut DDS_QosPolicyCountSeq,
        src: *const DDS_QosPolicyCountSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_copy(
        self_: *mut DDS_QosPolicyCountSeq,
        src: *const DDS_QosPolicyCountSeq,
    ) -> *mut DDS_QosPolicyCountSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_compare(
        self_: *const DDS_QosPolicyCountSeq,
        src: *const DDS_QosPolicyCountSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_from_array(
        self_: *mut DDS_QosPolicyCountSeq,
        srcArray: *const DDS_QosPolicyCount,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_to_array(
        self_: *const DDS_QosPolicyCountSeq,
        dstArray: *mut DDS_QosPolicyCount,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_loan_contiguous(
        self_: *mut DDS_QosPolicyCountSeq,
        buffer: *mut DDS_QosPolicyCount,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_loan_discontiguous(
        self_: *mut DDS_QosPolicyCountSeq,
        buffer: *mut *mut DDS_QosPolicyCount,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_unloan(self_: *mut DDS_QosPolicyCountSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_get_contiguous_buffer(
        self_: *const DDS_QosPolicyCountSeq,
    ) -> *mut DDS_QosPolicyCount;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_get_discontiguous_buffer(
        self_: *const DDS_QosPolicyCountSeq,
    ) -> *mut *mut DDS_QosPolicyCount;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_get_reader_and_data_ptr(
        self_: *const DDS_QosPolicyCountSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_set_reader_and_data_ptr(
        self_: *mut DDS_QosPolicyCountSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_has_ownership(self_: *const DDS_QosPolicyCountSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_clear(self_: *mut DDS_QosPolicyCountSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_finalize(self_: *mut DDS_QosPolicyCountSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_shallow_copy(
        self_: *mut DDS_QosPolicyCountSeq,
        other: *mut DDS_QosPolicyCountSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_QosPolicyCountSeq_initialize_ex(
        self_: *mut DDS_QosPolicyCountSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_RequestedIncompatibleQosStatus {
    pub total_count: DDS_Long,
    pub total_count_change: DDS_Long,
    pub last_policy_id: DDS_QosPolicyId_t,
    pub policies: DDS_QosPolicyCountSeq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_RequestedIncompatibleQosStatus"]
        [::std::mem::size_of::<DDS_RequestedIncompatibleQosStatus>() - 88usize];
    ["Alignment of DDS_RequestedIncompatibleQosStatus"]
        [::std::mem::align_of::<DDS_RequestedIncompatibleQosStatus>() - 8usize];
    ["Offset of field: DDS_RequestedIncompatibleQosStatus::total_count"]
        [::std::mem::offset_of!(DDS_RequestedIncompatibleQosStatus, total_count) - 0usize];
    ["Offset of field: DDS_RequestedIncompatibleQosStatus::total_count_change"]
        [::std::mem::offset_of!(DDS_RequestedIncompatibleQosStatus, total_count_change) - 4usize];
    ["Offset of field: DDS_RequestedIncompatibleQosStatus::last_policy_id"]
        [::std::mem::offset_of!(DDS_RequestedIncompatibleQosStatus, last_policy_id) - 8usize];
    ["Offset of field: DDS_RequestedIncompatibleQosStatus::policies"]
        [::std::mem::offset_of!(DDS_RequestedIncompatibleQosStatus, policies) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_RequestedDeadlineMissedStatus {
    pub total_count: DDS_Long,
    pub total_count_change: DDS_Long,
    pub last_instance_handle: DDS_InstanceHandle_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_RequestedDeadlineMissedStatus"]
        [::std::mem::size_of::<DDS_RequestedDeadlineMissedStatus>() - 28usize];
    ["Alignment of DDS_RequestedDeadlineMissedStatus"]
        [::std::mem::align_of::<DDS_RequestedDeadlineMissedStatus>() - 4usize];
    ["Offset of field: DDS_RequestedDeadlineMissedStatus::total_count"]
        [::std::mem::offset_of!(DDS_RequestedDeadlineMissedStatus, total_count) - 0usize];
    ["Offset of field: DDS_RequestedDeadlineMissedStatus::total_count_change"]
        [::std::mem::offset_of!(DDS_RequestedDeadlineMissedStatus, total_count_change) - 4usize];
    ["Offset of field: DDS_RequestedDeadlineMissedStatus::last_instance_handle"]
        [::std::mem::offset_of!(DDS_RequestedDeadlineMissedStatus, last_instance_handle) - 8usize];
};
pub type DDS_BuiltinTopicKey_t = [DDS_ULong; 4usize];
pub const DDS_DurabilityQosPolicyKind_DDS_VOLATILE_DURABILITY_QOS: DDS_DurabilityQosPolicyKind = 0;
pub const DDS_DurabilityQosPolicyKind_DDS_TRANSIENT_LOCAL_DURABILITY_QOS:
    DDS_DurabilityQosPolicyKind = 1;
pub const DDS_DurabilityQosPolicyKind_DDS_TRANSIENT_DURABILITY_QOS: DDS_DurabilityQosPolicyKind = 2;
pub const DDS_DurabilityQosPolicyKind_DDS_PERSISTENT_DURABILITY_QOS: DDS_DurabilityQosPolicyKind =
    3;
pub type DDS_DurabilityQosPolicyKind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DurabilityQosPolicy {
    pub kind: DDS_DurabilityQosPolicyKind,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_DurabilityQosPolicy"][::std::mem::size_of::<DDS_DurabilityQosPolicy>() - 4usize];
    ["Alignment of DDS_DurabilityQosPolicy"]
        [::std::mem::align_of::<DDS_DurabilityQosPolicy>() - 4usize];
    ["Offset of field: DDS_DurabilityQosPolicy::kind"]
        [::std::mem::offset_of!(DDS_DurabilityQosPolicy, kind) - 0usize];
};
pub const DDS_HistoryQosPolicyKind_DDS_KEEP_LAST_HISTORY_QOS: DDS_HistoryQosPolicyKind = 0;
pub const DDS_HistoryQosPolicyKind_DDS_KEEP_ALL_HISTORY_QOS: DDS_HistoryQosPolicyKind = 1;
pub type DDS_HistoryQosPolicyKind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_HistoryQosPolicy {
    pub kind: DDS_HistoryQosPolicyKind,
    pub depth: DDS_Long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_HistoryQosPolicy"][::std::mem::size_of::<DDS_HistoryQosPolicy>() - 8usize];
    ["Alignment of DDS_HistoryQosPolicy"][::std::mem::align_of::<DDS_HistoryQosPolicy>() - 4usize];
    ["Offset of field: DDS_HistoryQosPolicy::kind"]
        [::std::mem::offset_of!(DDS_HistoryQosPolicy, kind) - 0usize];
    ["Offset of field: DDS_HistoryQosPolicy::depth"]
        [::std::mem::offset_of!(DDS_HistoryQosPolicy, depth) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DurabilityServiceQosPolicy {
    pub service_cleanup_delay: DDS_Duration_t,
    pub history_kind: DDS_HistoryQosPolicyKind,
    pub history_depth: DDS_Long,
    pub max_samples: DDS_Long,
    pub max_instances: DDS_Long,
    pub max_samples_per_instance: DDS_Long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_DurabilityServiceQosPolicy"]
        [::std::mem::size_of::<DDS_DurabilityServiceQosPolicy>() - 28usize];
    ["Alignment of DDS_DurabilityServiceQosPolicy"]
        [::std::mem::align_of::<DDS_DurabilityServiceQosPolicy>() - 4usize];
    ["Offset of field: DDS_DurabilityServiceQosPolicy::service_cleanup_delay"]
        [::std::mem::offset_of!(DDS_DurabilityServiceQosPolicy, service_cleanup_delay) - 0usize];
    ["Offset of field: DDS_DurabilityServiceQosPolicy::history_kind"]
        [::std::mem::offset_of!(DDS_DurabilityServiceQosPolicy, history_kind) - 8usize];
    ["Offset of field: DDS_DurabilityServiceQosPolicy::history_depth"]
        [::std::mem::offset_of!(DDS_DurabilityServiceQosPolicy, history_depth) - 12usize];
    ["Offset of field: DDS_DurabilityServiceQosPolicy::max_samples"]
        [::std::mem::offset_of!(DDS_DurabilityServiceQosPolicy, max_samples) - 16usize];
    ["Offset of field: DDS_DurabilityServiceQosPolicy::max_instances"]
        [::std::mem::offset_of!(DDS_DurabilityServiceQosPolicy, max_instances) - 20usize];
    ["Offset of field: DDS_DurabilityServiceQosPolicy::max_samples_per_instance"][::std::mem::offset_of!(
        DDS_DurabilityServiceQosPolicy,
        max_samples_per_instance
    ) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DeadlineQosPolicy {
    pub period: DDS_Duration_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_DeadlineQosPolicy"][::std::mem::size_of::<DDS_DeadlineQosPolicy>() - 8usize];
    ["Alignment of DDS_DeadlineQosPolicy"]
        [::std::mem::align_of::<DDS_DeadlineQosPolicy>() - 4usize];
    ["Offset of field: DDS_DeadlineQosPolicy::period"]
        [::std::mem::offset_of!(DDS_DeadlineQosPolicy, period) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_LatencyBudgetQosPolicy {
    pub duration: DDS_Duration_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_LatencyBudgetQosPolicy"]
        [::std::mem::size_of::<DDS_LatencyBudgetQosPolicy>() - 8usize];
    ["Alignment of DDS_LatencyBudgetQosPolicy"]
        [::std::mem::align_of::<DDS_LatencyBudgetQosPolicy>() - 4usize];
    ["Offset of field: DDS_LatencyBudgetQosPolicy::duration"]
        [::std::mem::offset_of!(DDS_LatencyBudgetQosPolicy, duration) - 0usize];
};
pub const DDS_LivelinessQosPolicyKind_DDS_AUTOMATIC_LIVELINESS_QOS: DDS_LivelinessQosPolicyKind = 0;
pub const DDS_LivelinessQosPolicyKind_DDS_MANUAL_BY_PARTICIPANT_LIVELINESS_QOS:
    DDS_LivelinessQosPolicyKind = 1;
pub const DDS_LivelinessQosPolicyKind_DDS_MANUAL_BY_TOPIC_LIVELINESS_QOS:
    DDS_LivelinessQosPolicyKind = 2;
pub type DDS_LivelinessQosPolicyKind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_LivelinessQosPolicy {
    pub kind: DDS_LivelinessQosPolicyKind,
    pub lease_duration: DDS_Duration_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_LivelinessQosPolicy"][::std::mem::size_of::<DDS_LivelinessQosPolicy>() - 12usize];
    ["Alignment of DDS_LivelinessQosPolicy"]
        [::std::mem::align_of::<DDS_LivelinessQosPolicy>() - 4usize];
    ["Offset of field: DDS_LivelinessQosPolicy::kind"]
        [::std::mem::offset_of!(DDS_LivelinessQosPolicy, kind) - 0usize];
    ["Offset of field: DDS_LivelinessQosPolicy::lease_duration"]
        [::std::mem::offset_of!(DDS_LivelinessQosPolicy, lease_duration) - 4usize];
};
pub const DDS_ReliabilityQosPolicyKind_DDS_BEST_EFFORT_RELIABILITY_QOS:
    DDS_ReliabilityQosPolicyKind = 1;
pub const DDS_ReliabilityQosPolicyKind_DDS_RELIABLE_RELIABILITY_QOS: DDS_ReliabilityQosPolicyKind =
    2;
pub type DDS_ReliabilityQosPolicyKind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ReliabilityQosPolicy {
    pub kind: DDS_ReliabilityQosPolicyKind,
    pub max_blocking_time: DDS_Duration_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_ReliabilityQosPolicy"]
        [::std::mem::size_of::<DDS_ReliabilityQosPolicy>() - 12usize];
    ["Alignment of DDS_ReliabilityQosPolicy"]
        [::std::mem::align_of::<DDS_ReliabilityQosPolicy>() - 4usize];
    ["Offset of field: DDS_ReliabilityQosPolicy::kind"]
        [::std::mem::offset_of!(DDS_ReliabilityQosPolicy, kind) - 0usize];
    ["Offset of field: DDS_ReliabilityQosPolicy::max_blocking_time"]
        [::std::mem::offset_of!(DDS_ReliabilityQosPolicy, max_blocking_time) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_LifespanQosPolicy {
    pub duration: DDS_Duration_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_LifespanQosPolicy"][::std::mem::size_of::<DDS_LifespanQosPolicy>() - 8usize];
    ["Alignment of DDS_LifespanQosPolicy"]
        [::std::mem::align_of::<DDS_LifespanQosPolicy>() - 4usize];
    ["Offset of field: DDS_LifespanQosPolicy::duration"]
        [::std::mem::offset_of!(DDS_LifespanQosPolicy, duration) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MessageBlock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CDRSerializer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CDRDeserializer {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRSerializerInitialWBuf(
        buffer: *mut ZR_INT8,
        length: ZR_UINT32,
        littleEndian: ZR_BOOLEAN,
    ) -> *mut CDRSerializer;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRDeserializerInitialWBuf(
        buffer: *mut ZR_INT8,
        length: ZR_UINT32,
        littleEndian: ZR_BOOLEAN,
    ) -> *mut CDRDeserializer;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRSerializerGetBufferSpace(self_: *mut CDRSerializer) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRDeserializerGetBufferLength(self_: *mut CDRDeserializer) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRSerializerDestoryBuffer(self_: *mut CDRSerializer);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRDeserializerDestoryBuffer(self_: *mut CDRDeserializer);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRSerializerInitial(
        self_: *mut CDRSerializer,
        tgaMsgBlock: *mut MessageBlock,
        littleEndian: ZR_BOOLEAN,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRSerializerPutString(
        self_: *mut CDRSerializer,
        value: *const ZR_INT8,
        length: ZR_UINT32,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRSerializerPutUntype(
        self_: *mut CDRSerializer,
        val: *const ZR_UINT8,
        typeSize: ZR_UINT32,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRSerializerGetUntypeSize(
        typeSize: ZR_UINT32,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRSerializerGetUntypeArraySize(
        typeSize: ZR_UINT32,
        arraySize: ZR_UINT32,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRSerializerGetStringSize(length: ZR_UINT32, currentAlignment: ZR_UINT32) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRSerializerPutUntypeArray(
        self_: *mut CDRSerializer,
        arrayVal: *const ZR_UINT8,
        arraySize: ZR_UINT32,
        typeSize: ZR_UINT32,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRSerializerNoSerializingMode(self_: *mut CDRSerializer) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRSerializerSetNoSerializingMode(
        self_: *mut CDRSerializer,
        noSerializingMode: ZR_BOOLEAN,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRSerializerIsLittleEndian(self_: *mut CDRSerializer) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRDeserializerInitial(
        self_: *mut CDRDeserializer,
        srcMsg: *mut MessageBlock,
        useLittleEndian: ZR_BOOLEAN,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRDeserializerGetString(
        self_: *mut CDRDeserializer,
        value: *mut ZR_INT8,
        length: *mut ZR_UINT32,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRDeserializerGetUntype(
        self_: *mut CDRDeserializer,
        value: *mut ZR_UINT8,
        typeSize: ZR_UINT32,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRDeserializerLoanContiguousByte(
        self_: *mut CDRDeserializer,
        length: ZR_UINT32,
    ) -> *mut ZR_INT8;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRDeserializerGetUntypeArray(
        self_: *mut CDRDeserializer,
        value: *mut ZR_UINT8,
        arraySize: ZR_UINT32,
        typeSize: ZR_UINT32,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRDeserializerAheadLength(
        self_: *mut CDRDeserializer,
        beginIndex: ZR_UINT32,
        length: ZR_UINT32,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRDeserializerIsLittleEndian(self_: *mut CDRDeserializer) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ParameterHeaderSerialize(
        cdr: *mut CDRSerializer,
        useExtended: ZR_BOOLEAN,
        mustUnderstand: ZR_BOOLEAN,
        memberId: ZR_UINT32,
    ) -> *mut ZR_INT8;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ParameterLenSerialize(
        cdr: *mut CDRSerializer,
        lenAddr: *mut ZR_INT8,
        length: ZR_UINT32,
        lengthSize: ZR_UINT16,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ParameterHeaderDeserialize(
        cdr: *mut CDRDeserializer,
        memberId: *mut ZR_UINT32,
        length: *mut ZR_UINT32,
        useExtend: *mut ZR_BOOLEAN,
        mustUnderstand: *mut ZR_BOOLEAN,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRSerializeGetKeyHash(
        cdr: *mut CDRSerializer,
        keyHash: *mut ZR_UINT8,
        needMd5: ZR_BOOLEAN,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRDeserializerPushState(cdr: *mut CDRDeserializer);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRDeserializerPopState(cdr: *mut CDRDeserializer);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn CDRSerializerAheadWrPtr(self_: *mut CDRSerializer, length: ZR_UINT32);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TypeCodeHeader {
    _unused: [u8; 0],
}
pub const TCTypeKind_DDS_TK_NULL: TCTypeKind = 0;
pub const TCTypeKind_DDS_TK_SHORT: TCTypeKind = 1;
pub const TCTypeKind_DDS_TK_INT: TCTypeKind = 2;
pub const TCTypeKind_DDS_TK_USHORT: TCTypeKind = 3;
pub const TCTypeKind_DDS_TK_UINT: TCTypeKind = 4;
pub const TCTypeKind_DDS_TK_FLOAT: TCTypeKind = 5;
pub const TCTypeKind_DDS_TK_DOUBLE: TCTypeKind = 6;
pub const TCTypeKind_DDS_TK_BOOLEAN: TCTypeKind = 7;
pub const TCTypeKind_DDS_TK_CHAR: TCTypeKind = 8;
pub const TCTypeKind_DDS_TK_UCHAR: TCTypeKind = 9;
pub const TCTypeKind_DDS_TK_STRUCT: TCTypeKind = 10;
pub const TCTypeKind_DDS_TK_UNION: TCTypeKind = 11;
pub const TCTypeKind_DDS_TK_ENUM: TCTypeKind = 12;
pub const TCTypeKind_DDS_TK_STRING: TCTypeKind = 13;
pub const TCTypeKind_DDS_TK_SEQUENCE: TCTypeKind = 14;
pub const TCTypeKind_DDS_TK_ARRAY: TCTypeKind = 15;
pub const TCTypeKind_DDS_TK_ALIAS: TCTypeKind = 16;
pub const TCTypeKind_DDS_TK_LONGLONG: TCTypeKind = 17;
pub const TCTypeKind_DDS_TK_ULONGLONG: TCTypeKind = 18;
pub const TCTypeKind_DDS_TK_VALUETYPE: TCTypeKind = 22;
pub const TCTypeKind_DDS_TK_UNKNOWN: TCTypeKind = -1;
pub type TCTypeKind = ::std::os::raw::c_int;
pub const TypeCodeExceptionCode_TC_EC_OK: TypeCodeExceptionCode = 0;
pub const TypeCodeExceptionCode_TC_EC_ERROR: TypeCodeExceptionCode = 1;
pub type TypeCodeExceptionCode = ::std::os::raw::c_int;
pub const TypeCodeModifierKind_DDS_MODIFIER_NONE: TypeCodeModifierKind = 0;
pub type TypeCodeModifierKind = ::std::os::raw::c_int;
pub const ExtensibilityKind_DDS_EXTENSIBLE_EXTENSIBILITY: ExtensibilityKind = 0;
pub const ExtensibilityKind_DDS_FINAL_EXTENSIBILITY: ExtensibilityKind = 1;
pub const ExtensibilityKind_DDS_MUTABLE_EXTENSIBILITY: ExtensibilityKind = 2;
pub type ExtensibilityKind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_BooleanSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_Boolean,
    pub _discontiguousBuffer: *mut *mut DDS_Boolean,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_BooleanSeq"][::std::mem::size_of::<DDS_BooleanSeq>() - 72usize];
    ["Alignment of DDS_BooleanSeq"][::std::mem::align_of::<DDS_BooleanSeq>() - 8usize];
    ["Offset of field: DDS_BooleanSeq::_owned"]
        [::std::mem::offset_of!(DDS_BooleanSeq, _owned) - 0usize];
    ["Offset of field: DDS_BooleanSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_BooleanSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_BooleanSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_BooleanSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_BooleanSeq::_maximum"]
        [::std::mem::offset_of!(DDS_BooleanSeq, _maximum) - 24usize];
    ["Offset of field: DDS_BooleanSeq::_length"]
        [::std::mem::offset_of!(DDS_BooleanSeq, _length) - 28usize];
    ["Offset of field: DDS_BooleanSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_BooleanSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_BooleanSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_BooleanSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_BooleanSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_BooleanSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_BooleanSeq::_mempool"]
        [::std::mem::offset_of!(DDS_BooleanSeq, _mempool) - 56usize];
    ["Offset of field: DDS_BooleanSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_BooleanSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_is_initialized(self_: *const DDS_BooleanSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_set(
        self_: *mut DDS_BooleanSeq,
        index: DDS_ULong,
        newValue: *const DDS_Boolean,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_initialize(self_: *mut DDS_BooleanSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_new(newMax: DDS_ULong) -> *mut DDS_BooleanSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_get_maximum(self_: *const DDS_BooleanSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_set_maximum(self_: *mut DDS_BooleanSeq, newMax: DDS_ULong)
    -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_get_length(self_: *const DDS_BooleanSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_set_length(
        self_: *mut DDS_BooleanSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_ensure_length(
        self_: *mut DDS_BooleanSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_get_reference(
        self_: *const DDS_BooleanSeq,
        index: DDS_ULong,
    ) -> *mut DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_append(
        self_: *mut DDS_BooleanSeq,
        newValue: *const DDS_Boolean,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_append_autosize(
        self_: *mut DDS_BooleanSeq,
        newValue: *const DDS_Boolean,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_copy_no_alloc(
        self_: *mut DDS_BooleanSeq,
        src: *const DDS_BooleanSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_copy(
        self_: *mut DDS_BooleanSeq,
        src: *const DDS_BooleanSeq,
    ) -> *mut DDS_BooleanSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_compare(
        self_: *const DDS_BooleanSeq,
        src: *const DDS_BooleanSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_from_array(
        self_: *mut DDS_BooleanSeq,
        srcArray: *const DDS_Boolean,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_to_array(
        self_: *const DDS_BooleanSeq,
        dstArray: *mut DDS_Boolean,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_loan_contiguous(
        self_: *mut DDS_BooleanSeq,
        buffer: *mut DDS_Boolean,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_loan_discontiguous(
        self_: *mut DDS_BooleanSeq,
        buffer: *mut *mut DDS_Boolean,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_unloan(self_: *mut DDS_BooleanSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_get_contiguous_buffer(self_: *const DDS_BooleanSeq) -> *mut DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_get_discontiguous_buffer(
        self_: *const DDS_BooleanSeq,
    ) -> *mut *mut DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_get_reader_and_data_ptr(
        self_: *const DDS_BooleanSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_set_reader_and_data_ptr(
        self_: *mut DDS_BooleanSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_has_ownership(self_: *const DDS_BooleanSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_clear(self_: *mut DDS_BooleanSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_finalize(self_: *mut DDS_BooleanSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_shallow_copy(self_: *mut DDS_BooleanSeq, other: *mut DDS_BooleanSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSeq_initialize_ex(
        self_: *mut DDS_BooleanSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_OctetSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_Octet,
    pub _discontiguousBuffer: *mut *mut DDS_Octet,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_OctetSeq"][::std::mem::size_of::<DDS_OctetSeq>() - 72usize];
    ["Alignment of DDS_OctetSeq"][::std::mem::align_of::<DDS_OctetSeq>() - 8usize];
    ["Offset of field: DDS_OctetSeq::_owned"]
        [::std::mem::offset_of!(DDS_OctetSeq, _owned) - 0usize];
    ["Offset of field: DDS_OctetSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_OctetSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_OctetSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_OctetSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_OctetSeq::_maximum"]
        [::std::mem::offset_of!(DDS_OctetSeq, _maximum) - 24usize];
    ["Offset of field: DDS_OctetSeq::_length"]
        [::std::mem::offset_of!(DDS_OctetSeq, _length) - 28usize];
    ["Offset of field: DDS_OctetSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_OctetSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_OctetSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_OctetSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_OctetSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_OctetSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_OctetSeq::_mempool"]
        [::std::mem::offset_of!(DDS_OctetSeq, _mempool) - 56usize];
    ["Offset of field: DDS_OctetSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_OctetSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_is_initialized(self_: *const DDS_OctetSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_set(
        self_: *mut DDS_OctetSeq,
        index: DDS_ULong,
        newValue: *const DDS_Octet,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_initialize(self_: *mut DDS_OctetSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_new(newMax: DDS_ULong) -> *mut DDS_OctetSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_get_maximum(self_: *const DDS_OctetSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_set_maximum(self_: *mut DDS_OctetSeq, newMax: DDS_ULong) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_get_length(self_: *const DDS_OctetSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_set_length(self_: *mut DDS_OctetSeq, newLength: DDS_ULong) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_ensure_length(
        self_: *mut DDS_OctetSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_get_reference(
        self_: *const DDS_OctetSeq,
        index: DDS_ULong,
    ) -> *mut DDS_Octet;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_append(self_: *mut DDS_OctetSeq, newValue: *const DDS_Octet)
    -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_append_autosize(
        self_: *mut DDS_OctetSeq,
        newValue: *const DDS_Octet,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_copy_no_alloc(
        self_: *mut DDS_OctetSeq,
        src: *const DDS_OctetSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_copy(
        self_: *mut DDS_OctetSeq,
        src: *const DDS_OctetSeq,
    ) -> *mut DDS_OctetSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_compare(self_: *const DDS_OctetSeq, src: *const DDS_OctetSeq) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_from_array(
        self_: *mut DDS_OctetSeq,
        srcArray: *const DDS_Octet,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_to_array(
        self_: *const DDS_OctetSeq,
        dstArray: *mut DDS_Octet,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_loan_contiguous(
        self_: *mut DDS_OctetSeq,
        buffer: *mut DDS_Octet,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_loan_discontiguous(
        self_: *mut DDS_OctetSeq,
        buffer: *mut *mut DDS_Octet,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_unloan(self_: *mut DDS_OctetSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_get_contiguous_buffer(self_: *const DDS_OctetSeq) -> *mut DDS_Octet;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_get_discontiguous_buffer(self_: *const DDS_OctetSeq)
    -> *mut *mut DDS_Octet;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_get_reader_and_data_ptr(
        self_: *const DDS_OctetSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_set_reader_and_data_ptr(
        self_: *mut DDS_OctetSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_has_ownership(self_: *const DDS_OctetSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_clear(self_: *mut DDS_OctetSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_finalize(self_: *mut DDS_OctetSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_shallow_copy(self_: *mut DDS_OctetSeq, other: *mut DDS_OctetSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSeq_initialize_ex(
        self_: *mut DDS_OctetSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_CharSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_Char,
    pub _discontiguousBuffer: *mut *mut DDS_Char,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_CharSeq"][::std::mem::size_of::<DDS_CharSeq>() - 72usize];
    ["Alignment of DDS_CharSeq"][::std::mem::align_of::<DDS_CharSeq>() - 8usize];
    ["Offset of field: DDS_CharSeq::_owned"][::std::mem::offset_of!(DDS_CharSeq, _owned) - 0usize];
    ["Offset of field: DDS_CharSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_CharSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_CharSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_CharSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_CharSeq::_maximum"]
        [::std::mem::offset_of!(DDS_CharSeq, _maximum) - 24usize];
    ["Offset of field: DDS_CharSeq::_length"]
        [::std::mem::offset_of!(DDS_CharSeq, _length) - 28usize];
    ["Offset of field: DDS_CharSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_CharSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_CharSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_CharSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_CharSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_CharSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_CharSeq::_mempool"]
        [::std::mem::offset_of!(DDS_CharSeq, _mempool) - 56usize];
    ["Offset of field: DDS_CharSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_CharSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_is_initialized(self_: *const DDS_CharSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_set(
        self_: *mut DDS_CharSeq,
        index: DDS_ULong,
        newValue: *const DDS_Char,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_initialize(self_: *mut DDS_CharSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_new(newMax: DDS_ULong) -> *mut DDS_CharSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_get_maximum(self_: *const DDS_CharSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_set_maximum(self_: *mut DDS_CharSeq, newMax: DDS_ULong) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_get_length(self_: *const DDS_CharSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_set_length(self_: *mut DDS_CharSeq, newLength: DDS_ULong) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_ensure_length(
        self_: *mut DDS_CharSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_get_reference(self_: *const DDS_CharSeq, index: DDS_ULong) -> *mut DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_append(self_: *mut DDS_CharSeq, newValue: *const DDS_Char) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_append_autosize(
        self_: *mut DDS_CharSeq,
        newValue: *const DDS_Char,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_copy_no_alloc(
        self_: *mut DDS_CharSeq,
        src: *const DDS_CharSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_copy(self_: *mut DDS_CharSeq, src: *const DDS_CharSeq) -> *mut DDS_CharSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_compare(self_: *const DDS_CharSeq, src: *const DDS_CharSeq) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_from_array(
        self_: *mut DDS_CharSeq,
        srcArray: *const DDS_Char,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_to_array(
        self_: *const DDS_CharSeq,
        dstArray: *mut DDS_Char,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_loan_contiguous(
        self_: *mut DDS_CharSeq,
        buffer: *mut DDS_Char,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_loan_discontiguous(
        self_: *mut DDS_CharSeq,
        buffer: *mut *mut DDS_Char,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_unloan(self_: *mut DDS_CharSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_get_contiguous_buffer(self_: *const DDS_CharSeq) -> *mut DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_get_discontiguous_buffer(self_: *const DDS_CharSeq) -> *mut *mut DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_get_reader_and_data_ptr(
        self_: *const DDS_CharSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_set_reader_and_data_ptr(
        self_: *mut DDS_CharSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_has_ownership(self_: *const DDS_CharSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_clear(self_: *mut DDS_CharSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_finalize(self_: *mut DDS_CharSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_shallow_copy(self_: *mut DDS_CharSeq, other: *mut DDS_CharSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSeq_initialize_ex(
        self_: *mut DDS_CharSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ShortSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_Short,
    pub _discontiguousBuffer: *mut *mut DDS_Short,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_ShortSeq"][::std::mem::size_of::<DDS_ShortSeq>() - 72usize];
    ["Alignment of DDS_ShortSeq"][::std::mem::align_of::<DDS_ShortSeq>() - 8usize];
    ["Offset of field: DDS_ShortSeq::_owned"]
        [::std::mem::offset_of!(DDS_ShortSeq, _owned) - 0usize];
    ["Offset of field: DDS_ShortSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_ShortSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_ShortSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_ShortSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_ShortSeq::_maximum"]
        [::std::mem::offset_of!(DDS_ShortSeq, _maximum) - 24usize];
    ["Offset of field: DDS_ShortSeq::_length"]
        [::std::mem::offset_of!(DDS_ShortSeq, _length) - 28usize];
    ["Offset of field: DDS_ShortSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_ShortSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_ShortSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_ShortSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_ShortSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_ShortSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_ShortSeq::_mempool"]
        [::std::mem::offset_of!(DDS_ShortSeq, _mempool) - 56usize];
    ["Offset of field: DDS_ShortSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_ShortSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_is_initialized(self_: *const DDS_ShortSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_set(
        self_: *mut DDS_ShortSeq,
        index: DDS_ULong,
        newValue: *const DDS_Short,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_initialize(self_: *mut DDS_ShortSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_new(newMax: DDS_ULong) -> *mut DDS_ShortSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_get_maximum(self_: *const DDS_ShortSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_set_maximum(self_: *mut DDS_ShortSeq, newMax: DDS_ULong) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_get_length(self_: *const DDS_ShortSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_set_length(self_: *mut DDS_ShortSeq, newLength: DDS_ULong) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_ensure_length(
        self_: *mut DDS_ShortSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_get_reference(
        self_: *const DDS_ShortSeq,
        index: DDS_ULong,
    ) -> *mut DDS_Short;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_append(self_: *mut DDS_ShortSeq, newValue: *const DDS_Short)
    -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_append_autosize(
        self_: *mut DDS_ShortSeq,
        newValue: *const DDS_Short,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_copy_no_alloc(
        self_: *mut DDS_ShortSeq,
        src: *const DDS_ShortSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_copy(
        self_: *mut DDS_ShortSeq,
        src: *const DDS_ShortSeq,
    ) -> *mut DDS_ShortSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_compare(self_: *const DDS_ShortSeq, src: *const DDS_ShortSeq) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_from_array(
        self_: *mut DDS_ShortSeq,
        srcArray: *const DDS_Short,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_to_array(
        self_: *const DDS_ShortSeq,
        dstArray: *mut DDS_Short,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_loan_contiguous(
        self_: *mut DDS_ShortSeq,
        buffer: *mut DDS_Short,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_loan_discontiguous(
        self_: *mut DDS_ShortSeq,
        buffer: *mut *mut DDS_Short,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_unloan(self_: *mut DDS_ShortSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_get_contiguous_buffer(self_: *const DDS_ShortSeq) -> *mut DDS_Short;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_get_discontiguous_buffer(self_: *const DDS_ShortSeq)
    -> *mut *mut DDS_Short;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_get_reader_and_data_ptr(
        self_: *const DDS_ShortSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_set_reader_and_data_ptr(
        self_: *mut DDS_ShortSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_has_ownership(self_: *const DDS_ShortSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_clear(self_: *mut DDS_ShortSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_finalize(self_: *mut DDS_ShortSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_shallow_copy(self_: *mut DDS_ShortSeq, other: *mut DDS_ShortSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSeq_initialize_ex(
        self_: *mut DDS_ShortSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_UShortSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_UShort,
    pub _discontiguousBuffer: *mut *mut DDS_UShort,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_UShortSeq"][::std::mem::size_of::<DDS_UShortSeq>() - 72usize];
    ["Alignment of DDS_UShortSeq"][::std::mem::align_of::<DDS_UShortSeq>() - 8usize];
    ["Offset of field: DDS_UShortSeq::_owned"]
        [::std::mem::offset_of!(DDS_UShortSeq, _owned) - 0usize];
    ["Offset of field: DDS_UShortSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_UShortSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_UShortSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_UShortSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_UShortSeq::_maximum"]
        [::std::mem::offset_of!(DDS_UShortSeq, _maximum) - 24usize];
    ["Offset of field: DDS_UShortSeq::_length"]
        [::std::mem::offset_of!(DDS_UShortSeq, _length) - 28usize];
    ["Offset of field: DDS_UShortSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_UShortSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_UShortSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_UShortSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_UShortSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_UShortSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_UShortSeq::_mempool"]
        [::std::mem::offset_of!(DDS_UShortSeq, _mempool) - 56usize];
    ["Offset of field: DDS_UShortSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_UShortSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_is_initialized(self_: *const DDS_UShortSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_set(
        self_: *mut DDS_UShortSeq,
        index: DDS_ULong,
        newValue: *const DDS_UShort,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_initialize(self_: *mut DDS_UShortSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_new(newMax: DDS_ULong) -> *mut DDS_UShortSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_get_maximum(self_: *const DDS_UShortSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_set_maximum(self_: *mut DDS_UShortSeq, newMax: DDS_ULong) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_get_length(self_: *const DDS_UShortSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_set_length(self_: *mut DDS_UShortSeq, newLength: DDS_ULong)
    -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_ensure_length(
        self_: *mut DDS_UShortSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_get_reference(
        self_: *const DDS_UShortSeq,
        index: DDS_ULong,
    ) -> *mut DDS_UShort;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_append(
        self_: *mut DDS_UShortSeq,
        newValue: *const DDS_UShort,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_append_autosize(
        self_: *mut DDS_UShortSeq,
        newValue: *const DDS_UShort,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_copy_no_alloc(
        self_: *mut DDS_UShortSeq,
        src: *const DDS_UShortSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_copy(
        self_: *mut DDS_UShortSeq,
        src: *const DDS_UShortSeq,
    ) -> *mut DDS_UShortSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_compare(
        self_: *const DDS_UShortSeq,
        src: *const DDS_UShortSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_from_array(
        self_: *mut DDS_UShortSeq,
        srcArray: *const DDS_UShort,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_to_array(
        self_: *const DDS_UShortSeq,
        dstArray: *mut DDS_UShort,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_loan_contiguous(
        self_: *mut DDS_UShortSeq,
        buffer: *mut DDS_UShort,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_loan_discontiguous(
        self_: *mut DDS_UShortSeq,
        buffer: *mut *mut DDS_UShort,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_unloan(self_: *mut DDS_UShortSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_get_contiguous_buffer(self_: *const DDS_UShortSeq) -> *mut DDS_UShort;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_get_discontiguous_buffer(
        self_: *const DDS_UShortSeq,
    ) -> *mut *mut DDS_UShort;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_get_reader_and_data_ptr(
        self_: *const DDS_UShortSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_set_reader_and_data_ptr(
        self_: *mut DDS_UShortSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_has_ownership(self_: *const DDS_UShortSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_clear(self_: *mut DDS_UShortSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_finalize(self_: *mut DDS_UShortSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_shallow_copy(self_: *mut DDS_UShortSeq, other: *mut DDS_UShortSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSeq_initialize_ex(
        self_: *mut DDS_UShortSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_LongSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_Long,
    pub _discontiguousBuffer: *mut *mut DDS_Long,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_LongSeq"][::std::mem::size_of::<DDS_LongSeq>() - 72usize];
    ["Alignment of DDS_LongSeq"][::std::mem::align_of::<DDS_LongSeq>() - 8usize];
    ["Offset of field: DDS_LongSeq::_owned"][::std::mem::offset_of!(DDS_LongSeq, _owned) - 0usize];
    ["Offset of field: DDS_LongSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_LongSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_LongSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_LongSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_LongSeq::_maximum"]
        [::std::mem::offset_of!(DDS_LongSeq, _maximum) - 24usize];
    ["Offset of field: DDS_LongSeq::_length"]
        [::std::mem::offset_of!(DDS_LongSeq, _length) - 28usize];
    ["Offset of field: DDS_LongSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_LongSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_LongSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_LongSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_LongSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_LongSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_LongSeq::_mempool"]
        [::std::mem::offset_of!(DDS_LongSeq, _mempool) - 56usize];
    ["Offset of field: DDS_LongSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_LongSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_is_initialized(self_: *const DDS_LongSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_set(
        self_: *mut DDS_LongSeq,
        index: DDS_ULong,
        newValue: *const DDS_Long,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_initialize(self_: *mut DDS_LongSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_new(newMax: DDS_ULong) -> *mut DDS_LongSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_get_maximum(self_: *const DDS_LongSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_set_maximum(self_: *mut DDS_LongSeq, newMax: DDS_ULong) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_get_length(self_: *const DDS_LongSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_set_length(self_: *mut DDS_LongSeq, newLength: DDS_ULong) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_ensure_length(
        self_: *mut DDS_LongSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_get_reference(self_: *const DDS_LongSeq, index: DDS_ULong) -> *mut DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_append(self_: *mut DDS_LongSeq, newValue: *const DDS_Long) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_append_autosize(
        self_: *mut DDS_LongSeq,
        newValue: *const DDS_Long,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_copy_no_alloc(
        self_: *mut DDS_LongSeq,
        src: *const DDS_LongSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_copy(self_: *mut DDS_LongSeq, src: *const DDS_LongSeq) -> *mut DDS_LongSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_compare(self_: *const DDS_LongSeq, src: *const DDS_LongSeq) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_from_array(
        self_: *mut DDS_LongSeq,
        srcArray: *const DDS_Long,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_to_array(
        self_: *const DDS_LongSeq,
        dstArray: *mut DDS_Long,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_loan_contiguous(
        self_: *mut DDS_LongSeq,
        buffer: *mut DDS_Long,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_loan_discontiguous(
        self_: *mut DDS_LongSeq,
        buffer: *mut *mut DDS_Long,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_unloan(self_: *mut DDS_LongSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_get_contiguous_buffer(self_: *const DDS_LongSeq) -> *mut DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_get_discontiguous_buffer(self_: *const DDS_LongSeq) -> *mut *mut DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_get_reader_and_data_ptr(
        self_: *const DDS_LongSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_set_reader_and_data_ptr(
        self_: *mut DDS_LongSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_has_ownership(self_: *const DDS_LongSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_clear(self_: *mut DDS_LongSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_finalize(self_: *mut DDS_LongSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_shallow_copy(self_: *mut DDS_LongSeq, other: *mut DDS_LongSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSeq_initialize_ex(
        self_: *mut DDS_LongSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ULongSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_ULong,
    pub _discontiguousBuffer: *mut *mut DDS_ULong,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_ULongSeq"][::std::mem::size_of::<DDS_ULongSeq>() - 72usize];
    ["Alignment of DDS_ULongSeq"][::std::mem::align_of::<DDS_ULongSeq>() - 8usize];
    ["Offset of field: DDS_ULongSeq::_owned"]
        [::std::mem::offset_of!(DDS_ULongSeq, _owned) - 0usize];
    ["Offset of field: DDS_ULongSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_ULongSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_ULongSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_ULongSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_ULongSeq::_maximum"]
        [::std::mem::offset_of!(DDS_ULongSeq, _maximum) - 24usize];
    ["Offset of field: DDS_ULongSeq::_length"]
        [::std::mem::offset_of!(DDS_ULongSeq, _length) - 28usize];
    ["Offset of field: DDS_ULongSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_ULongSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_ULongSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_ULongSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_ULongSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_ULongSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_ULongSeq::_mempool"]
        [::std::mem::offset_of!(DDS_ULongSeq, _mempool) - 56usize];
    ["Offset of field: DDS_ULongSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_ULongSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_is_initialized(self_: *const DDS_ULongSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_set(
        self_: *mut DDS_ULongSeq,
        index: DDS_ULong,
        newValue: *const DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_initialize(self_: *mut DDS_ULongSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_new(newMax: DDS_ULong) -> *mut DDS_ULongSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_get_maximum(self_: *const DDS_ULongSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_set_maximum(self_: *mut DDS_ULongSeq, newMax: DDS_ULong) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_get_length(self_: *const DDS_ULongSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_set_length(self_: *mut DDS_ULongSeq, newLength: DDS_ULong) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_ensure_length(
        self_: *mut DDS_ULongSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_get_reference(
        self_: *const DDS_ULongSeq,
        index: DDS_ULong,
    ) -> *mut DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_append(self_: *mut DDS_ULongSeq, newValue: *const DDS_ULong)
    -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_append_autosize(
        self_: *mut DDS_ULongSeq,
        newValue: *const DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_copy_no_alloc(
        self_: *mut DDS_ULongSeq,
        src: *const DDS_ULongSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_copy(
        self_: *mut DDS_ULongSeq,
        src: *const DDS_ULongSeq,
    ) -> *mut DDS_ULongSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_compare(self_: *const DDS_ULongSeq, src: *const DDS_ULongSeq) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_from_array(
        self_: *mut DDS_ULongSeq,
        srcArray: *const DDS_ULong,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_to_array(
        self_: *const DDS_ULongSeq,
        dstArray: *mut DDS_ULong,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_loan_contiguous(
        self_: *mut DDS_ULongSeq,
        buffer: *mut DDS_ULong,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_loan_discontiguous(
        self_: *mut DDS_ULongSeq,
        buffer: *mut *mut DDS_ULong,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_unloan(self_: *mut DDS_ULongSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_get_contiguous_buffer(self_: *const DDS_ULongSeq) -> *mut DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_get_discontiguous_buffer(self_: *const DDS_ULongSeq)
    -> *mut *mut DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_get_reader_and_data_ptr(
        self_: *const DDS_ULongSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_set_reader_and_data_ptr(
        self_: *mut DDS_ULongSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_has_ownership(self_: *const DDS_ULongSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_clear(self_: *mut DDS_ULongSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_finalize(self_: *mut DDS_ULongSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_shallow_copy(self_: *mut DDS_ULongSeq, other: *mut DDS_ULongSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSeq_initialize_ex(
        self_: *mut DDS_ULongSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_LongLongSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_LongLong,
    pub _discontiguousBuffer: *mut *mut DDS_LongLong,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_LongLongSeq"][::std::mem::size_of::<DDS_LongLongSeq>() - 72usize];
    ["Alignment of DDS_LongLongSeq"][::std::mem::align_of::<DDS_LongLongSeq>() - 8usize];
    ["Offset of field: DDS_LongLongSeq::_owned"]
        [::std::mem::offset_of!(DDS_LongLongSeq, _owned) - 0usize];
    ["Offset of field: DDS_LongLongSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_LongLongSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_LongLongSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_LongLongSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_LongLongSeq::_maximum"]
        [::std::mem::offset_of!(DDS_LongLongSeq, _maximum) - 24usize];
    ["Offset of field: DDS_LongLongSeq::_length"]
        [::std::mem::offset_of!(DDS_LongLongSeq, _length) - 28usize];
    ["Offset of field: DDS_LongLongSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_LongLongSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_LongLongSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_LongLongSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_LongLongSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_LongLongSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_LongLongSeq::_mempool"]
        [::std::mem::offset_of!(DDS_LongLongSeq, _mempool) - 56usize];
    ["Offset of field: DDS_LongLongSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_LongLongSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_is_initialized(self_: *const DDS_LongLongSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_set(
        self_: *mut DDS_LongLongSeq,
        index: DDS_ULong,
        newValue: *const DDS_LongLong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_initialize(self_: *mut DDS_LongLongSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_new(newMax: DDS_ULong) -> *mut DDS_LongLongSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_get_maximum(self_: *const DDS_LongLongSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_set_maximum(
        self_: *mut DDS_LongLongSeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_get_length(self_: *const DDS_LongLongSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_set_length(
        self_: *mut DDS_LongLongSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_ensure_length(
        self_: *mut DDS_LongLongSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_get_reference(
        self_: *const DDS_LongLongSeq,
        index: DDS_ULong,
    ) -> *mut DDS_LongLong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_append(
        self_: *mut DDS_LongLongSeq,
        newValue: *const DDS_LongLong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_append_autosize(
        self_: *mut DDS_LongLongSeq,
        newValue: *const DDS_LongLong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_copy_no_alloc(
        self_: *mut DDS_LongLongSeq,
        src: *const DDS_LongLongSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_copy(
        self_: *mut DDS_LongLongSeq,
        src: *const DDS_LongLongSeq,
    ) -> *mut DDS_LongLongSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_compare(
        self_: *const DDS_LongLongSeq,
        src: *const DDS_LongLongSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_from_array(
        self_: *mut DDS_LongLongSeq,
        srcArray: *const DDS_LongLong,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_to_array(
        self_: *const DDS_LongLongSeq,
        dstArray: *mut DDS_LongLong,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_loan_contiguous(
        self_: *mut DDS_LongLongSeq,
        buffer: *mut DDS_LongLong,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_loan_discontiguous(
        self_: *mut DDS_LongLongSeq,
        buffer: *mut *mut DDS_LongLong,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_unloan(self_: *mut DDS_LongLongSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_get_contiguous_buffer(
        self_: *const DDS_LongLongSeq,
    ) -> *mut DDS_LongLong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_get_discontiguous_buffer(
        self_: *const DDS_LongLongSeq,
    ) -> *mut *mut DDS_LongLong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_get_reader_and_data_ptr(
        self_: *const DDS_LongLongSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_set_reader_and_data_ptr(
        self_: *mut DDS_LongLongSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_has_ownership(self_: *const DDS_LongLongSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_clear(self_: *mut DDS_LongLongSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_finalize(self_: *mut DDS_LongLongSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_shallow_copy(self_: *mut DDS_LongLongSeq, other: *mut DDS_LongLongSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSeq_initialize_ex(
        self_: *mut DDS_LongLongSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ULongLongSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_ULongLong,
    pub _discontiguousBuffer: *mut *mut DDS_ULongLong,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_ULongLongSeq"][::std::mem::size_of::<DDS_ULongLongSeq>() - 72usize];
    ["Alignment of DDS_ULongLongSeq"][::std::mem::align_of::<DDS_ULongLongSeq>() - 8usize];
    ["Offset of field: DDS_ULongLongSeq::_owned"]
        [::std::mem::offset_of!(DDS_ULongLongSeq, _owned) - 0usize];
    ["Offset of field: DDS_ULongLongSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_ULongLongSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_ULongLongSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_ULongLongSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_ULongLongSeq::_maximum"]
        [::std::mem::offset_of!(DDS_ULongLongSeq, _maximum) - 24usize];
    ["Offset of field: DDS_ULongLongSeq::_length"]
        [::std::mem::offset_of!(DDS_ULongLongSeq, _length) - 28usize];
    ["Offset of field: DDS_ULongLongSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_ULongLongSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_ULongLongSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_ULongLongSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_ULongLongSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_ULongLongSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_ULongLongSeq::_mempool"]
        [::std::mem::offset_of!(DDS_ULongLongSeq, _mempool) - 56usize];
    ["Offset of field: DDS_ULongLongSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_ULongLongSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_is_initialized(self_: *const DDS_ULongLongSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_set(
        self_: *mut DDS_ULongLongSeq,
        index: DDS_ULong,
        newValue: *const DDS_ULongLong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_initialize(self_: *mut DDS_ULongLongSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_new(newMax: DDS_ULong) -> *mut DDS_ULongLongSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_get_maximum(self_: *const DDS_ULongLongSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_set_maximum(
        self_: *mut DDS_ULongLongSeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_get_length(self_: *const DDS_ULongLongSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_set_length(
        self_: *mut DDS_ULongLongSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_ensure_length(
        self_: *mut DDS_ULongLongSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_get_reference(
        self_: *const DDS_ULongLongSeq,
        index: DDS_ULong,
    ) -> *mut DDS_ULongLong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_append(
        self_: *mut DDS_ULongLongSeq,
        newValue: *const DDS_ULongLong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_append_autosize(
        self_: *mut DDS_ULongLongSeq,
        newValue: *const DDS_ULongLong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_copy_no_alloc(
        self_: *mut DDS_ULongLongSeq,
        src: *const DDS_ULongLongSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_copy(
        self_: *mut DDS_ULongLongSeq,
        src: *const DDS_ULongLongSeq,
    ) -> *mut DDS_ULongLongSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_compare(
        self_: *const DDS_ULongLongSeq,
        src: *const DDS_ULongLongSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_from_array(
        self_: *mut DDS_ULongLongSeq,
        srcArray: *const DDS_ULongLong,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_to_array(
        self_: *const DDS_ULongLongSeq,
        dstArray: *mut DDS_ULongLong,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_loan_contiguous(
        self_: *mut DDS_ULongLongSeq,
        buffer: *mut DDS_ULongLong,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_loan_discontiguous(
        self_: *mut DDS_ULongLongSeq,
        buffer: *mut *mut DDS_ULongLong,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_unloan(self_: *mut DDS_ULongLongSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_get_contiguous_buffer(
        self_: *const DDS_ULongLongSeq,
    ) -> *mut DDS_ULongLong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_get_discontiguous_buffer(
        self_: *const DDS_ULongLongSeq,
    ) -> *mut *mut DDS_ULongLong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_get_reader_and_data_ptr(
        self_: *const DDS_ULongLongSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_set_reader_and_data_ptr(
        self_: *mut DDS_ULongLongSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_has_ownership(self_: *const DDS_ULongLongSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_clear(self_: *mut DDS_ULongLongSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_finalize(self_: *mut DDS_ULongLongSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_shallow_copy(
        self_: *mut DDS_ULongLongSeq,
        other: *mut DDS_ULongLongSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSeq_initialize_ex(
        self_: *mut DDS_ULongLongSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_FloatSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_Float,
    pub _discontiguousBuffer: *mut *mut DDS_Float,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_FloatSeq"][::std::mem::size_of::<DDS_FloatSeq>() - 72usize];
    ["Alignment of DDS_FloatSeq"][::std::mem::align_of::<DDS_FloatSeq>() - 8usize];
    ["Offset of field: DDS_FloatSeq::_owned"]
        [::std::mem::offset_of!(DDS_FloatSeq, _owned) - 0usize];
    ["Offset of field: DDS_FloatSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_FloatSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_FloatSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_FloatSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_FloatSeq::_maximum"]
        [::std::mem::offset_of!(DDS_FloatSeq, _maximum) - 24usize];
    ["Offset of field: DDS_FloatSeq::_length"]
        [::std::mem::offset_of!(DDS_FloatSeq, _length) - 28usize];
    ["Offset of field: DDS_FloatSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_FloatSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_FloatSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_FloatSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_FloatSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_FloatSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_FloatSeq::_mempool"]
        [::std::mem::offset_of!(DDS_FloatSeq, _mempool) - 56usize];
    ["Offset of field: DDS_FloatSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_FloatSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_is_initialized(self_: *const DDS_FloatSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_set(
        self_: *mut DDS_FloatSeq,
        index: DDS_ULong,
        newValue: *const DDS_Float,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_initialize(self_: *mut DDS_FloatSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_new(newMax: DDS_ULong) -> *mut DDS_FloatSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_get_maximum(self_: *const DDS_FloatSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_set_maximum(self_: *mut DDS_FloatSeq, newMax: DDS_ULong) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_get_length(self_: *const DDS_FloatSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_set_length(self_: *mut DDS_FloatSeq, newLength: DDS_ULong) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_ensure_length(
        self_: *mut DDS_FloatSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_get_reference(
        self_: *const DDS_FloatSeq,
        index: DDS_ULong,
    ) -> *mut DDS_Float;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_append(self_: *mut DDS_FloatSeq, newValue: *const DDS_Float)
    -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_append_autosize(
        self_: *mut DDS_FloatSeq,
        newValue: *const DDS_Float,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_copy_no_alloc(
        self_: *mut DDS_FloatSeq,
        src: *const DDS_FloatSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_copy(
        self_: *mut DDS_FloatSeq,
        src: *const DDS_FloatSeq,
    ) -> *mut DDS_FloatSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_compare(self_: *const DDS_FloatSeq, src: *const DDS_FloatSeq) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_from_array(
        self_: *mut DDS_FloatSeq,
        srcArray: *const DDS_Float,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_to_array(
        self_: *const DDS_FloatSeq,
        dstArray: *mut DDS_Float,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_loan_contiguous(
        self_: *mut DDS_FloatSeq,
        buffer: *mut DDS_Float,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_loan_discontiguous(
        self_: *mut DDS_FloatSeq,
        buffer: *mut *mut DDS_Float,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_unloan(self_: *mut DDS_FloatSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_get_contiguous_buffer(self_: *const DDS_FloatSeq) -> *mut DDS_Float;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_get_discontiguous_buffer(self_: *const DDS_FloatSeq)
    -> *mut *mut DDS_Float;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_get_reader_and_data_ptr(
        self_: *const DDS_FloatSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_set_reader_and_data_ptr(
        self_: *mut DDS_FloatSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_has_ownership(self_: *const DDS_FloatSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_clear(self_: *mut DDS_FloatSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_finalize(self_: *mut DDS_FloatSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_shallow_copy(self_: *mut DDS_FloatSeq, other: *mut DDS_FloatSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSeq_initialize_ex(
        self_: *mut DDS_FloatSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DoubleSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_Double,
    pub _discontiguousBuffer: *mut *mut DDS_Double,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_DoubleSeq"][::std::mem::size_of::<DDS_DoubleSeq>() - 72usize];
    ["Alignment of DDS_DoubleSeq"][::std::mem::align_of::<DDS_DoubleSeq>() - 8usize];
    ["Offset of field: DDS_DoubleSeq::_owned"]
        [::std::mem::offset_of!(DDS_DoubleSeq, _owned) - 0usize];
    ["Offset of field: DDS_DoubleSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_DoubleSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_DoubleSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_DoubleSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_DoubleSeq::_maximum"]
        [::std::mem::offset_of!(DDS_DoubleSeq, _maximum) - 24usize];
    ["Offset of field: DDS_DoubleSeq::_length"]
        [::std::mem::offset_of!(DDS_DoubleSeq, _length) - 28usize];
    ["Offset of field: DDS_DoubleSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_DoubleSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_DoubleSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_DoubleSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_DoubleSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_DoubleSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_DoubleSeq::_mempool"]
        [::std::mem::offset_of!(DDS_DoubleSeq, _mempool) - 56usize];
    ["Offset of field: DDS_DoubleSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_DoubleSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_is_initialized(self_: *const DDS_DoubleSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_set(
        self_: *mut DDS_DoubleSeq,
        index: DDS_ULong,
        newValue: *const DDS_Double,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_initialize(self_: *mut DDS_DoubleSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_new(newMax: DDS_ULong) -> *mut DDS_DoubleSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_get_maximum(self_: *const DDS_DoubleSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_set_maximum(self_: *mut DDS_DoubleSeq, newMax: DDS_ULong) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_get_length(self_: *const DDS_DoubleSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_set_length(self_: *mut DDS_DoubleSeq, newLength: DDS_ULong)
    -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_ensure_length(
        self_: *mut DDS_DoubleSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_get_reference(
        self_: *const DDS_DoubleSeq,
        index: DDS_ULong,
    ) -> *mut DDS_Double;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_append(
        self_: *mut DDS_DoubleSeq,
        newValue: *const DDS_Double,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_append_autosize(
        self_: *mut DDS_DoubleSeq,
        newValue: *const DDS_Double,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_copy_no_alloc(
        self_: *mut DDS_DoubleSeq,
        src: *const DDS_DoubleSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_copy(
        self_: *mut DDS_DoubleSeq,
        src: *const DDS_DoubleSeq,
    ) -> *mut DDS_DoubleSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_compare(
        self_: *const DDS_DoubleSeq,
        src: *const DDS_DoubleSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_from_array(
        self_: *mut DDS_DoubleSeq,
        srcArray: *const DDS_Double,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_to_array(
        self_: *const DDS_DoubleSeq,
        dstArray: *mut DDS_Double,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_loan_contiguous(
        self_: *mut DDS_DoubleSeq,
        buffer: *mut DDS_Double,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_loan_discontiguous(
        self_: *mut DDS_DoubleSeq,
        buffer: *mut *mut DDS_Double,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_unloan(self_: *mut DDS_DoubleSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_get_contiguous_buffer(self_: *const DDS_DoubleSeq) -> *mut DDS_Double;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_get_discontiguous_buffer(
        self_: *const DDS_DoubleSeq,
    ) -> *mut *mut DDS_Double;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_get_reader_and_data_ptr(
        self_: *const DDS_DoubleSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_set_reader_and_data_ptr(
        self_: *mut DDS_DoubleSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_has_ownership(self_: *const DDS_DoubleSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_clear(self_: *mut DDS_DoubleSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_finalize(self_: *mut DDS_DoubleSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_shallow_copy(self_: *mut DDS_DoubleSeq, other: *mut DDS_DoubleSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSeq_initialize_ex(
        self_: *mut DDS_DoubleSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
pub type DDS_String = *mut DDS_Char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_StringSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut *mut DDS_Char,
    pub _discontiguousBuffer: *mut *mut *mut DDS_Char,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_StringSeq"][::std::mem::size_of::<DDS_StringSeq>() - 72usize];
    ["Alignment of DDS_StringSeq"][::std::mem::align_of::<DDS_StringSeq>() - 8usize];
    ["Offset of field: DDS_StringSeq::_owned"]
        [::std::mem::offset_of!(DDS_StringSeq, _owned) - 0usize];
    ["Offset of field: DDS_StringSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_StringSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_StringSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_StringSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_StringSeq::_maximum"]
        [::std::mem::offset_of!(DDS_StringSeq, _maximum) - 24usize];
    ["Offset of field: DDS_StringSeq::_length"]
        [::std::mem::offset_of!(DDS_StringSeq, _length) - 28usize];
    ["Offset of field: DDS_StringSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_StringSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_StringSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_StringSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_StringSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_StringSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_StringSeq::_mempool"]
        [::std::mem::offset_of!(DDS_StringSeq, _mempool) - 56usize];
    ["Offset of field: DDS_StringSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_StringSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_is_initialized(self_: *const DDS_StringSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_set(
        self_: *mut DDS_StringSeq,
        index: DDS_ULong,
        newValue: *mut *const DDS_Char,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_initialize(self_: *mut DDS_StringSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_new(newMax: DDS_ULong) -> *mut DDS_StringSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_get_maximum(self_: *const DDS_StringSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_set_maximum(self_: *mut DDS_StringSeq, newMax: DDS_ULong) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_get_length(self_: *const DDS_StringSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_set_length(self_: *mut DDS_StringSeq, newLength: DDS_ULong)
    -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_ensure_length(
        self_: *mut DDS_StringSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_get_reference(
        self_: *const DDS_StringSeq,
        index: DDS_ULong,
    ) -> *mut *mut DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_append(
        self_: *mut DDS_StringSeq,
        newValue: *mut *const DDS_Char,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_append_autosize(
        self_: *mut DDS_StringSeq,
        newValue: *mut *const DDS_Char,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_copy_no_alloc(
        self_: *mut DDS_StringSeq,
        src: *const DDS_StringSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_copy(
        self_: *mut DDS_StringSeq,
        src: *const DDS_StringSeq,
    ) -> *mut DDS_StringSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_compare(
        self_: *const DDS_StringSeq,
        src: *const DDS_StringSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_from_array(
        self_: *mut DDS_StringSeq,
        srcArray: *mut *const DDS_Char,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_to_array(
        self_: *const DDS_StringSeq,
        dstArray: *mut *mut DDS_Char,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_loan_contiguous(
        self_: *mut DDS_StringSeq,
        buffer: *mut *mut DDS_Char,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_loan_discontiguous(
        self_: *mut DDS_StringSeq,
        buffer: *mut *mut *mut DDS_Char,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_unloan(self_: *mut DDS_StringSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_get_contiguous_buffer(self_: *const DDS_StringSeq) -> *mut *mut DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_get_discontiguous_buffer(
        self_: *const DDS_StringSeq,
    ) -> *mut *mut *mut DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_get_reader_and_data_ptr(
        self_: *const DDS_StringSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_set_reader_and_data_ptr(
        self_: *mut DDS_StringSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_has_ownership(self_: *const DDS_StringSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_clear(self_: *mut DDS_StringSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_finalize(self_: *mut DDS_StringSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_shallow_copy(self_: *mut DDS_StringSeq, other: *mut DDS_StringSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSeq_initialize_ex(
        self_: *mut DDS_StringSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringInnerCopyEx(
        dst: *mut DDS_String,
        src: *mut *const DDS_Char,
        pool: *mut ZRMemPool,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringCompare(
        first: *const *const DDS_Char,
        second: *const *const DDS_Char,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringInitialize(self_: *mut DDS_String) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringInitializeEx(
        self_: *mut DDS_String,
        pool: *mut ZRMemPool,
        allocateMemory: ZR_BOOLEAN,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringFinalize(self_: *mut DDS_String);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringFinalizeEx(
        self_: *mut DDS_String,
        pool: *mut ZRMemPool,
        deletePointers: ZR_BOOLEAN,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringCopySample(dst: *mut DDS_String, src: *const DDS_String) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringCopyEx(
        dst: *mut DDS_String,
        src: *const DDS_String,
        pool: *mut ZRMemPool,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringPrintData(sample: *const DDS_String);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringGetTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringCreateSample(
        pool: *mut ZRMemPool,
        allocMutable: ZR_BOOLEAN,
    ) -> *mut DDS_String;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDestroySample(pool: *mut ZRMemPool, sample: *mut DDS_String);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringGetSerializedSampleMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringGetSerializedSampleSize(
        sample: *const DDS_String,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSerialize(sample: *const DDS_String, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDeserialize(
        sample: *mut DDS_String,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringGetSerializedKeyMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringGetSerializedKeySize(
        sample: *const DDS_String,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringSerializeKey(sample: *const DDS_String, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDeserializeKey(
        sample: *mut DDS_String,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringGetKeyHash(
        sample: *const DDS_String,
        cdr: *mut CDRSerializer,
        result: *mut DDS_KeyHash_t,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringHasKey() -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringGetInnerTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringNoSerializingSupported(
        typesupport: *const ::std::os::raw::c_void,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringFixedHeaderLength(typesupport: *const ::std::os::raw::c_void) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringOnSiteDeserialize(
        cdr: *mut CDRDeserializer,
        sample: *mut ::std::os::raw::c_void,
        offset: ZR_UINT32,
        totalSize: ZR_UINT32,
        payload: *mut ZR_INT8,
        payloadLen: ZR_UINT32,
        fixedHeaderLen: ZR_UINT32,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanInitialize(self_: *mut DDS_Boolean) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanInitializeEx(
        self_: *mut DDS_Boolean,
        pool: *mut ZRMemPool,
        allocateMemory: ZR_BOOLEAN,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanFinalize(self_: *mut DDS_Boolean);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanFinalizeEx(
        self_: *mut DDS_Boolean,
        pool: *mut ZRMemPool,
        deletePointers: ZR_BOOLEAN,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanCopySample(dst: *mut DDS_Boolean, src: *const DDS_Boolean) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanCopyEx(
        dst: *mut DDS_Boolean,
        src: *const DDS_Boolean,
        pool: *mut ZRMemPool,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanPrintData(sample: *const DDS_Boolean);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanGetTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanCreateSample(
        pool: *mut ZRMemPool,
        allocMutable: ZR_BOOLEAN,
    ) -> *mut DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDestroySample(pool: *mut ZRMemPool, sample: *mut DDS_Boolean);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanGetSerializedSampleMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanGetSerializedSampleSize(
        sample: *const DDS_Boolean,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSerialize(sample: *const DDS_Boolean, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDeserialize(
        sample: *mut DDS_Boolean,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanGetSerializedKeyMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanGetSerializedKeySize(
        sample: *const DDS_Boolean,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanSerializeKey(sample: *const DDS_Boolean, cdr: *mut CDRSerializer)
    -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDeserializeKey(
        sample: *mut DDS_Boolean,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanGetKeyHash(
        sample: *const DDS_Boolean,
        cdr: *mut CDRSerializer,
        result: *mut DDS_KeyHash_t,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanHasKey() -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanGetInnerTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanNoSerializingSupported(
        typesupport: *const ::std::os::raw::c_void,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanFixedHeaderLength(typesupport: *const ::std::os::raw::c_void) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanOnSiteDeserialize(
        cdr: *mut CDRDeserializer,
        sample: *mut ::std::os::raw::c_void,
        offset: ZR_UINT32,
        totalSize: ZR_UINT32,
        payload: *mut ZR_INT8,
        payloadLen: ZR_UINT32,
        fixedHeaderLen: ZR_UINT32,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetInitialize(self_: *mut DDS_Octet) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetInitializeEx(
        self_: *mut DDS_Octet,
        pool: *mut ZRMemPool,
        allocateMemory: ZR_BOOLEAN,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetFinalize(self_: *mut DDS_Octet);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetFinalizeEx(
        self_: *mut DDS_Octet,
        pool: *mut ZRMemPool,
        deletePointers: ZR_BOOLEAN,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetCopySample(dst: *mut DDS_Octet, src: *const DDS_Octet) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetCopyEx(
        dst: *mut DDS_Octet,
        src: *const DDS_Octet,
        pool: *mut ZRMemPool,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetPrintData(sample: *const DDS_Octet);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetGetTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetCreateSample(pool: *mut ZRMemPool, allocMutable: ZR_BOOLEAN) -> *mut DDS_Octet;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDestroySample(pool: *mut ZRMemPool, sample: *mut DDS_Octet);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetGetSerializedSampleMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetGetSerializedSampleSize(
        sample: *const DDS_Octet,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSerialize(sample: *const DDS_Octet, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDeserialize(
        sample: *mut DDS_Octet,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetGetSerializedKeyMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetGetSerializedKeySize(
        sample: *const DDS_Octet,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetSerializeKey(sample: *const DDS_Octet, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDeserializeKey(
        sample: *mut DDS_Octet,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetGetKeyHash(
        sample: *const DDS_Octet,
        cdr: *mut CDRSerializer,
        result: *mut DDS_KeyHash_t,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetHasKey() -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetGetInnerTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetNoSerializingSupported(
        typesupport: *const ::std::os::raw::c_void,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetFixedHeaderLength(typesupport: *const ::std::os::raw::c_void) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetOnSiteDeserialize(
        cdr: *mut CDRDeserializer,
        sample: *mut ::std::os::raw::c_void,
        offset: ZR_UINT32,
        totalSize: ZR_UINT32,
        payload: *mut ZR_INT8,
        payloadLen: ZR_UINT32,
        fixedHeaderLen: ZR_UINT32,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharInitialize(self_: *mut DDS_Char) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharInitializeEx(
        self_: *mut DDS_Char,
        pool: *mut ZRMemPool,
        allocateMemory: ZR_BOOLEAN,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharFinalize(self_: *mut DDS_Char);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharFinalizeEx(
        self_: *mut DDS_Char,
        pool: *mut ZRMemPool,
        deletePointers: ZR_BOOLEAN,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharCopySample(dst: *mut DDS_Char, src: *const DDS_Char) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharCopyEx(
        dst: *mut DDS_Char,
        src: *const DDS_Char,
        pool: *mut ZRMemPool,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharPrintData(sample: *const DDS_Char);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharGetTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharCreateSample(pool: *mut ZRMemPool, allocMutable: ZR_BOOLEAN) -> *mut DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDestroySample(pool: *mut ZRMemPool, sample: *mut DDS_Char);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharGetSerializedSampleMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharGetSerializedSampleSize(
        sample: *const DDS_Char,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSerialize(sample: *const DDS_Char, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDeserialize(
        sample: *mut DDS_Char,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharGetSerializedKeyMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharGetSerializedKeySize(
        sample: *const DDS_Char,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharSerializeKey(sample: *const DDS_Char, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDeserializeKey(
        sample: *mut DDS_Char,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharGetKeyHash(
        sample: *const DDS_Char,
        cdr: *mut CDRSerializer,
        result: *mut DDS_KeyHash_t,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharHasKey() -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharGetInnerTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharNoSerializingSupported(typesupport: *const ::std::os::raw::c_void)
    -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharFixedHeaderLength(typesupport: *const ::std::os::raw::c_void) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharOnSiteDeserialize(
        cdr: *mut CDRDeserializer,
        sample: *mut ::std::os::raw::c_void,
        offset: ZR_UINT32,
        totalSize: ZR_UINT32,
        payload: *mut ZR_INT8,
        payloadLen: ZR_UINT32,
        fixedHeaderLen: ZR_UINT32,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortInitialize(self_: *mut DDS_Short) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortInitializeEx(
        self_: *mut DDS_Short,
        pool: *mut ZRMemPool,
        allocateMemory: ZR_BOOLEAN,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortFinalize(self_: *mut DDS_Short);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortFinalizeEx(
        self_: *mut DDS_Short,
        pool: *mut ZRMemPool,
        deletePointers: ZR_BOOLEAN,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortCopySample(dst: *mut DDS_Short, src: *const DDS_Short) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortCopyEx(
        dst: *mut DDS_Short,
        src: *const DDS_Short,
        pool: *mut ZRMemPool,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortPrintData(sample: *const DDS_Short);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortGetTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortCreateSample(pool: *mut ZRMemPool, allocMutable: ZR_BOOLEAN) -> *mut DDS_Short;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDestroySample(pool: *mut ZRMemPool, sample: *mut DDS_Short);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortGetSerializedSampleMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortGetSerializedSampleSize(
        sample: *const DDS_Short,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSerialize(sample: *const DDS_Short, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDeserialize(
        sample: *mut DDS_Short,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortGetSerializedKeyMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortGetSerializedKeySize(
        sample: *const DDS_Short,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortSerializeKey(sample: *const DDS_Short, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDeserializeKey(
        sample: *mut DDS_Short,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortGetKeyHash(
        sample: *const DDS_Short,
        cdr: *mut CDRSerializer,
        result: *mut DDS_KeyHash_t,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortHasKey() -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortGetInnerTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortNoSerializingSupported(
        typesupport: *const ::std::os::raw::c_void,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortFixedHeaderLength(typesupport: *const ::std::os::raw::c_void) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortOnSiteDeserialize(
        cdr: *mut CDRDeserializer,
        sample: *mut ::std::os::raw::c_void,
        offset: ZR_UINT32,
        totalSize: ZR_UINT32,
        payload: *mut ZR_INT8,
        payloadLen: ZR_UINT32,
        fixedHeaderLen: ZR_UINT32,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortInitialize(self_: *mut DDS_UShort) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortInitializeEx(
        self_: *mut DDS_UShort,
        pool: *mut ZRMemPool,
        allocateMemory: ZR_BOOLEAN,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortFinalize(self_: *mut DDS_UShort);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortFinalizeEx(
        self_: *mut DDS_UShort,
        pool: *mut ZRMemPool,
        deletePointers: ZR_BOOLEAN,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortCopySample(dst: *mut DDS_UShort, src: *const DDS_UShort) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortCopyEx(
        dst: *mut DDS_UShort,
        src: *const DDS_UShort,
        pool: *mut ZRMemPool,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortPrintData(sample: *const DDS_UShort);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortGetTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortCreateSample(
        pool: *mut ZRMemPool,
        allocMutable: ZR_BOOLEAN,
    ) -> *mut DDS_UShort;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDestroySample(pool: *mut ZRMemPool, sample: *mut DDS_UShort);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortGetSerializedSampleMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortGetSerializedSampleSize(
        sample: *const DDS_UShort,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSerialize(sample: *const DDS_UShort, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDeserialize(
        sample: *mut DDS_UShort,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortGetSerializedKeyMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortGetSerializedKeySize(
        sample: *const DDS_UShort,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortSerializeKey(sample: *const DDS_UShort, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDeserializeKey(
        sample: *mut DDS_UShort,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortGetKeyHash(
        sample: *const DDS_UShort,
        cdr: *mut CDRSerializer,
        result: *mut DDS_KeyHash_t,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortHasKey() -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortGetInnerTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortNoSerializingSupported(
        typesupport: *const ::std::os::raw::c_void,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortFixedHeaderLength(typesupport: *const ::std::os::raw::c_void) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortOnSiteDeserialize(
        cdr: *mut CDRDeserializer,
        sample: *mut ::std::os::raw::c_void,
        offset: ZR_UINT32,
        totalSize: ZR_UINT32,
        payload: *mut ZR_INT8,
        payloadLen: ZR_UINT32,
        fixedHeaderLen: ZR_UINT32,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongInitialize(self_: *mut DDS_Long) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongInitializeEx(
        self_: *mut DDS_Long,
        pool: *mut ZRMemPool,
        allocateMemory: ZR_BOOLEAN,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongFinalize(self_: *mut DDS_Long);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongFinalizeEx(
        self_: *mut DDS_Long,
        pool: *mut ZRMemPool,
        deletePointers: ZR_BOOLEAN,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongCopySample(dst: *mut DDS_Long, src: *const DDS_Long) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongCopyEx(
        dst: *mut DDS_Long,
        src: *const DDS_Long,
        pool: *mut ZRMemPool,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongPrintData(sample: *const DDS_Long);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongGetTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongCreateSample(pool: *mut ZRMemPool, allocMutable: ZR_BOOLEAN) -> *mut DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDestroySample(pool: *mut ZRMemPool, sample: *mut DDS_Long);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongGetSerializedSampleMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongGetSerializedSampleSize(
        sample: *const DDS_Long,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSerialize(sample: *const DDS_Long, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDeserialize(
        sample: *mut DDS_Long,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongGetSerializedKeyMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongGetSerializedKeySize(
        sample: *const DDS_Long,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongSerializeKey(sample: *const DDS_Long, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDeserializeKey(
        sample: *mut DDS_Long,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongGetKeyHash(
        sample: *const DDS_Long,
        cdr: *mut CDRSerializer,
        result: *mut DDS_KeyHash_t,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongHasKey() -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongGetInnerTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongNoSerializingSupported(typesupport: *const ::std::os::raw::c_void)
    -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongFixedHeaderLength(typesupport: *const ::std::os::raw::c_void) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongOnSiteDeserialize(
        cdr: *mut CDRDeserializer,
        sample: *mut ::std::os::raw::c_void,
        offset: ZR_UINT32,
        totalSize: ZR_UINT32,
        payload: *mut ZR_INT8,
        payloadLen: ZR_UINT32,
        fixedHeaderLen: ZR_UINT32,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongInitialize(self_: *mut DDS_ULong) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongInitializeEx(
        self_: *mut DDS_ULong,
        pool: *mut ZRMemPool,
        allocateMemory: ZR_BOOLEAN,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongFinalize(self_: *mut DDS_ULong);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongFinalizeEx(
        self_: *mut DDS_ULong,
        pool: *mut ZRMemPool,
        deletePointers: ZR_BOOLEAN,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongCopySample(dst: *mut DDS_ULong, src: *const DDS_ULong) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongCopyEx(
        dst: *mut DDS_ULong,
        src: *const DDS_ULong,
        pool: *mut ZRMemPool,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongPrintData(sample: *const DDS_ULong);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongGetTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongCreateSample(pool: *mut ZRMemPool, allocMutable: ZR_BOOLEAN) -> *mut DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDestroySample(pool: *mut ZRMemPool, sample: *mut DDS_ULong);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongGetSerializedSampleMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongGetSerializedSampleSize(
        sample: *const DDS_ULong,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSerialize(sample: *const DDS_ULong, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDeserialize(
        sample: *mut DDS_ULong,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongGetSerializedKeyMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongGetSerializedKeySize(
        sample: *const DDS_ULong,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongSerializeKey(sample: *const DDS_ULong, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDeserializeKey(
        sample: *mut DDS_ULong,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongGetKeyHash(
        sample: *const DDS_ULong,
        cdr: *mut CDRSerializer,
        result: *mut DDS_KeyHash_t,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongHasKey() -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongGetInnerTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongNoSerializingSupported(
        typesupport: *const ::std::os::raw::c_void,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongFixedHeaderLength(typesupport: *const ::std::os::raw::c_void) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongOnSiteDeserialize(
        cdr: *mut CDRDeserializer,
        sample: *mut ::std::os::raw::c_void,
        offset: ZR_UINT32,
        totalSize: ZR_UINT32,
        payload: *mut ZR_INT8,
        payloadLen: ZR_UINT32,
        fixedHeaderLen: ZR_UINT32,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongInitialize(self_: *mut DDS_LongLong) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongInitializeEx(
        self_: *mut DDS_LongLong,
        pool: *mut ZRMemPool,
        allocateMemory: ZR_BOOLEAN,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongFinalize(self_: *mut DDS_LongLong);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongFinalizeEx(
        self_: *mut DDS_LongLong,
        pool: *mut ZRMemPool,
        deletePointers: ZR_BOOLEAN,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongCopySample(dst: *mut DDS_LongLong, src: *const DDS_LongLong) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongCopyEx(
        dst: *mut DDS_LongLong,
        src: *const DDS_LongLong,
        pool: *mut ZRMemPool,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongPrintData(sample: *const DDS_LongLong);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongGetTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongCreateSample(
        pool: *mut ZRMemPool,
        allocMutable: ZR_BOOLEAN,
    ) -> *mut DDS_LongLong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDestroySample(pool: *mut ZRMemPool, sample: *mut DDS_LongLong);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongGetSerializedSampleMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongGetSerializedSampleSize(
        sample: *const DDS_LongLong,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSerialize(sample: *const DDS_LongLong, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDeserialize(
        sample: *mut DDS_LongLong,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongGetSerializedKeyMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongGetSerializedKeySize(
        sample: *const DDS_LongLong,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongSerializeKey(
        sample: *const DDS_LongLong,
        cdr: *mut CDRSerializer,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDeserializeKey(
        sample: *mut DDS_LongLong,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongGetKeyHash(
        sample: *const DDS_LongLong,
        cdr: *mut CDRSerializer,
        result: *mut DDS_KeyHash_t,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongHasKey() -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongGetInnerTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongNoSerializingSupported(
        typesupport: *const ::std::os::raw::c_void,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongFixedHeaderLength(typesupport: *const ::std::os::raw::c_void) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongOnSiteDeserialize(
        cdr: *mut CDRDeserializer,
        sample: *mut ::std::os::raw::c_void,
        offset: ZR_UINT32,
        totalSize: ZR_UINT32,
        payload: *mut ZR_INT8,
        payloadLen: ZR_UINT32,
        fixedHeaderLen: ZR_UINT32,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongInitialize(self_: *mut DDS_ULongLong) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongInitializeEx(
        self_: *mut DDS_ULongLong,
        pool: *mut ZRMemPool,
        allocateMemory: ZR_BOOLEAN,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongFinalize(self_: *mut DDS_ULongLong);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongFinalizeEx(
        self_: *mut DDS_ULongLong,
        pool: *mut ZRMemPool,
        deletePointers: ZR_BOOLEAN,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongCopySample(
        dst: *mut DDS_ULongLong,
        src: *const DDS_ULongLong,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongCopyEx(
        dst: *mut DDS_ULongLong,
        src: *const DDS_ULongLong,
        pool: *mut ZRMemPool,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongPrintData(sample: *const DDS_ULongLong);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongGetTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongCreateSample(
        pool: *mut ZRMemPool,
        allocMutable: ZR_BOOLEAN,
    ) -> *mut DDS_ULongLong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDestroySample(pool: *mut ZRMemPool, sample: *mut DDS_ULongLong);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongGetSerializedSampleMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongGetSerializedSampleSize(
        sample: *const DDS_ULongLong,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSerialize(
        sample: *const DDS_ULongLong,
        cdr: *mut CDRSerializer,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDeserialize(
        sample: *mut DDS_ULongLong,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongGetSerializedKeyMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongGetSerializedKeySize(
        sample: *const DDS_ULongLong,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongSerializeKey(
        sample: *const DDS_ULongLong,
        cdr: *mut CDRSerializer,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDeserializeKey(
        sample: *mut DDS_ULongLong,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongGetKeyHash(
        sample: *const DDS_ULongLong,
        cdr: *mut CDRSerializer,
        result: *mut DDS_KeyHash_t,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongHasKey() -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongGetInnerTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongNoSerializingSupported(
        typesupport: *const ::std::os::raw::c_void,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongFixedHeaderLength(typesupport: *const ::std::os::raw::c_void) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongOnSiteDeserialize(
        cdr: *mut CDRDeserializer,
        sample: *mut ::std::os::raw::c_void,
        offset: ZR_UINT32,
        totalSize: ZR_UINT32,
        payload: *mut ZR_INT8,
        payloadLen: ZR_UINT32,
        fixedHeaderLen: ZR_UINT32,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatInitialize(self_: *mut DDS_Float) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatInitializeEx(
        self_: *mut DDS_Float,
        pool: *mut ZRMemPool,
        allocateMemory: ZR_BOOLEAN,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatFinalize(self_: *mut DDS_Float);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatFinalizeEx(
        self_: *mut DDS_Float,
        pool: *mut ZRMemPool,
        deletePointers: ZR_BOOLEAN,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatCopySample(dst: *mut DDS_Float, src: *const DDS_Float) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatCopyEx(
        dst: *mut DDS_Float,
        src: *const DDS_Float,
        pool: *mut ZRMemPool,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatPrintData(sample: *const DDS_Float);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatGetTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatCreateSample(pool: *mut ZRMemPool, allocMutable: ZR_BOOLEAN) -> *mut DDS_Float;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDestroySample(pool: *mut ZRMemPool, sample: *mut DDS_Float);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatGetSerializedSampleMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatGetSerializedSampleSize(
        sample: *const DDS_Float,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSerialize(sample: *const DDS_Float, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDeserialize(
        sample: *mut DDS_Float,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatGetSerializedKeyMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatGetSerializedKeySize(
        sample: *const DDS_Float,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatSerializeKey(sample: *const DDS_Float, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDeserializeKey(
        sample: *mut DDS_Float,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatGetKeyHash(
        sample: *const DDS_Float,
        cdr: *mut CDRSerializer,
        result: *mut DDS_KeyHash_t,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatHasKey() -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatGetInnerTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatNoSerializingSupported(
        typesupport: *const ::std::os::raw::c_void,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatFixedHeaderLength(typesupport: *const ::std::os::raw::c_void) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatOnSiteDeserialize(
        cdr: *mut CDRDeserializer,
        sample: *mut ::std::os::raw::c_void,
        offset: ZR_UINT32,
        totalSize: ZR_UINT32,
        payload: *mut ZR_INT8,
        payloadLen: ZR_UINT32,
        fixedHeaderLen: ZR_UINT32,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleInitialize(self_: *mut DDS_Double) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleInitializeEx(
        self_: *mut DDS_Double,
        pool: *mut ZRMemPool,
        allocateMemory: ZR_BOOLEAN,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleFinalize(self_: *mut DDS_Double);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleFinalizeEx(
        self_: *mut DDS_Double,
        pool: *mut ZRMemPool,
        deletePointers: ZR_BOOLEAN,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleCopySample(dst: *mut DDS_Double, src: *const DDS_Double) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleCopyEx(
        dst: *mut DDS_Double,
        src: *const DDS_Double,
        pool: *mut ZRMemPool,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoublePrintData(sample: *const DDS_Double);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleGetTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleCreateSample(
        pool: *mut ZRMemPool,
        allocMutable: ZR_BOOLEAN,
    ) -> *mut DDS_Double;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDestroySample(pool: *mut ZRMemPool, sample: *mut DDS_Double);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleGetSerializedSampleMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleGetSerializedSampleSize(
        sample: *const DDS_Double,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSerialize(sample: *const DDS_Double, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDeserialize(
        sample: *mut DDS_Double,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleGetSerializedKeyMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleGetSerializedKeySize(
        sample: *const DDS_Double,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleSerializeKey(sample: *const DDS_Double, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDeserializeKey(
        sample: *mut DDS_Double,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleGetKeyHash(
        sample: *const DDS_Double,
        cdr: *mut CDRSerializer,
        result: *mut DDS_KeyHash_t,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleHasKey() -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleGetInnerTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleNoSerializingSupported(
        typesupport: *const ::std::os::raw::c_void,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleFixedHeaderLength(typesupport: *const ::std::os::raw::c_void) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleOnSiteDeserialize(
        cdr: *mut CDRDeserializer,
        sample: *mut ::std::os::raw::c_void,
        offset: ZR_UINT32,
        totalSize: ZR_UINT32,
        payload: *mut ZR_INT8,
        payloadLen: ZR_UINT32,
        fixedHeaderLen: ZR_UINT32,
    ) -> ZR_INT32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_KeyedString {
    pub key: *mut DDS_Char,
    pub value: *mut DDS_Char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_KeyedString"][::std::mem::size_of::<DDS_KeyedString>() - 16usize];
    ["Alignment of DDS_KeyedString"][::std::mem::align_of::<DDS_KeyedString>() - 8usize];
    ["Offset of field: DDS_KeyedString::key"]
        [::std::mem::offset_of!(DDS_KeyedString, key) - 0usize];
    ["Offset of field: DDS_KeyedString::value"]
        [::std::mem::offset_of!(DDS_KeyedString, value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_KeyedStringSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_KeyedString,
    pub _discontiguousBuffer: *mut *mut DDS_KeyedString,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_KeyedStringSeq"][::std::mem::size_of::<DDS_KeyedStringSeq>() - 72usize];
    ["Alignment of DDS_KeyedStringSeq"][::std::mem::align_of::<DDS_KeyedStringSeq>() - 8usize];
    ["Offset of field: DDS_KeyedStringSeq::_owned"]
        [::std::mem::offset_of!(DDS_KeyedStringSeq, _owned) - 0usize];
    ["Offset of field: DDS_KeyedStringSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_KeyedStringSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_KeyedStringSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_KeyedStringSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_KeyedStringSeq::_maximum"]
        [::std::mem::offset_of!(DDS_KeyedStringSeq, _maximum) - 24usize];
    ["Offset of field: DDS_KeyedStringSeq::_length"]
        [::std::mem::offset_of!(DDS_KeyedStringSeq, _length) - 28usize];
    ["Offset of field: DDS_KeyedStringSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_KeyedStringSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_KeyedStringSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_KeyedStringSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_KeyedStringSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_KeyedStringSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_KeyedStringSeq::_mempool"]
        [::std::mem::offset_of!(DDS_KeyedStringSeq, _mempool) - 56usize];
    ["Offset of field: DDS_KeyedStringSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_KeyedStringSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_is_initialized(self_: *const DDS_KeyedStringSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_set(
        self_: *mut DDS_KeyedStringSeq,
        index: DDS_ULong,
        newValue: *const DDS_KeyedString,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_initialize(self_: *mut DDS_KeyedStringSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_new(newMax: DDS_ULong) -> *mut DDS_KeyedStringSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_get_maximum(self_: *const DDS_KeyedStringSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_set_maximum(
        self_: *mut DDS_KeyedStringSeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_get_length(self_: *const DDS_KeyedStringSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_set_length(
        self_: *mut DDS_KeyedStringSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_ensure_length(
        self_: *mut DDS_KeyedStringSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_get_reference(
        self_: *const DDS_KeyedStringSeq,
        index: DDS_ULong,
    ) -> *mut DDS_KeyedString;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_append(
        self_: *mut DDS_KeyedStringSeq,
        newValue: *const DDS_KeyedString,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_append_autosize(
        self_: *mut DDS_KeyedStringSeq,
        newValue: *const DDS_KeyedString,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_copy_no_alloc(
        self_: *mut DDS_KeyedStringSeq,
        src: *const DDS_KeyedStringSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_copy(
        self_: *mut DDS_KeyedStringSeq,
        src: *const DDS_KeyedStringSeq,
    ) -> *mut DDS_KeyedStringSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_compare(
        self_: *const DDS_KeyedStringSeq,
        src: *const DDS_KeyedStringSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_from_array(
        self_: *mut DDS_KeyedStringSeq,
        srcArray: *const DDS_KeyedString,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_to_array(
        self_: *const DDS_KeyedStringSeq,
        dstArray: *mut DDS_KeyedString,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_loan_contiguous(
        self_: *mut DDS_KeyedStringSeq,
        buffer: *mut DDS_KeyedString,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_loan_discontiguous(
        self_: *mut DDS_KeyedStringSeq,
        buffer: *mut *mut DDS_KeyedString,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_unloan(self_: *mut DDS_KeyedStringSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_get_contiguous_buffer(
        self_: *const DDS_KeyedStringSeq,
    ) -> *mut DDS_KeyedString;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_get_discontiguous_buffer(
        self_: *const DDS_KeyedStringSeq,
    ) -> *mut *mut DDS_KeyedString;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_get_reader_and_data_ptr(
        self_: *const DDS_KeyedStringSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_set_reader_and_data_ptr(
        self_: *mut DDS_KeyedStringSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_has_ownership(self_: *const DDS_KeyedStringSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_clear(self_: *mut DDS_KeyedStringSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_finalize(self_: *mut DDS_KeyedStringSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_shallow_copy(
        self_: *mut DDS_KeyedStringSeq,
        other: *mut DDS_KeyedStringSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSeq_initialize_ex(
        self_: *mut DDS_KeyedStringSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringInitialize(self_: *mut DDS_KeyedString) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringInitializeEx(
        self_: *mut DDS_KeyedString,
        pool: *mut ZRMemPool,
        allocateMemory: ZR_BOOLEAN,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringFinalize(self_: *mut DDS_KeyedString);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringFinalizeEx(
        self_: *mut DDS_KeyedString,
        pool: *mut ZRMemPool,
        deletePointers: ZR_BOOLEAN,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringCopySample(
        dst: *mut DDS_KeyedString,
        src: *const DDS_KeyedString,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringCopyEx(
        dst: *mut DDS_KeyedString,
        src: *const DDS_KeyedString,
        pool: *mut ZRMemPool,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringPrintData(sample: *const DDS_KeyedString);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringGetTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringCreateSample(
        pool: *mut ZRMemPool,
        allocMutable: ZR_BOOLEAN,
    ) -> *mut DDS_KeyedString;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDestroySample(pool: *mut ZRMemPool, sample: *mut DDS_KeyedString);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringGetSerializedSampleMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringGetSerializedSampleSize(
        sample: *const DDS_KeyedString,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSerialize(
        sample: *const DDS_KeyedString,
        cdr: *mut CDRSerializer,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDeserialize(
        sample: *mut DDS_KeyedString,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringGetSerializedKeyMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringGetSerializedKeySize(
        sample: *const DDS_KeyedString,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringSerializeKey(
        sample: *const DDS_KeyedString,
        cdr: *mut CDRSerializer,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDeserializeKey(
        sample: *mut DDS_KeyedString,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringGetKeyHash(
        sample: *const DDS_KeyedString,
        cdr: *mut CDRSerializer,
        result: *mut DDS_KeyHash_t,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringHasKey() -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringGetInnerTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringNoSerializingSupported(
        typesupport: *const ::std::os::raw::c_void,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringFixedHeaderLength(
        typesupport: *const ::std::os::raw::c_void,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringOnSiteDeserialize(
        cdr: *mut CDRDeserializer,
        sample: *mut ::std::os::raw::c_void,
        offset: ZR_UINT32,
        totalSize: ZR_UINT32,
        payload: *mut ZR_INT8,
        payloadLen: ZR_UINT32,
        fixedHeaderLen: ZR_UINT32,
    ) -> ZR_INT32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_Bytes {
    pub value: DDS_OctetSeq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_Bytes"][::std::mem::size_of::<DDS_Bytes>() - 72usize];
    ["Alignment of DDS_Bytes"][::std::mem::align_of::<DDS_Bytes>() - 8usize];
    ["Offset of field: DDS_Bytes::value"][::std::mem::offset_of!(DDS_Bytes, value) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_BytesSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_Bytes,
    pub _discontiguousBuffer: *mut *mut DDS_Bytes,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_BytesSeq"][::std::mem::size_of::<DDS_BytesSeq>() - 72usize];
    ["Alignment of DDS_BytesSeq"][::std::mem::align_of::<DDS_BytesSeq>() - 8usize];
    ["Offset of field: DDS_BytesSeq::_owned"]
        [::std::mem::offset_of!(DDS_BytesSeq, _owned) - 0usize];
    ["Offset of field: DDS_BytesSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_BytesSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_BytesSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_BytesSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_BytesSeq::_maximum"]
        [::std::mem::offset_of!(DDS_BytesSeq, _maximum) - 24usize];
    ["Offset of field: DDS_BytesSeq::_length"]
        [::std::mem::offset_of!(DDS_BytesSeq, _length) - 28usize];
    ["Offset of field: DDS_BytesSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_BytesSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_BytesSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_BytesSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_BytesSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_BytesSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_BytesSeq::_mempool"]
        [::std::mem::offset_of!(DDS_BytesSeq, _mempool) - 56usize];
    ["Offset of field: DDS_BytesSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_BytesSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_is_initialized(self_: *const DDS_BytesSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_set(
        self_: *mut DDS_BytesSeq,
        index: DDS_ULong,
        newValue: *const DDS_Bytes,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_initialize(self_: *mut DDS_BytesSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_new(newMax: DDS_ULong) -> *mut DDS_BytesSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_get_maximum(self_: *const DDS_BytesSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_set_maximum(self_: *mut DDS_BytesSeq, newMax: DDS_ULong) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_get_length(self_: *const DDS_BytesSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_set_length(self_: *mut DDS_BytesSeq, newLength: DDS_ULong) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_ensure_length(
        self_: *mut DDS_BytesSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_get_reference(
        self_: *const DDS_BytesSeq,
        index: DDS_ULong,
    ) -> *mut DDS_Bytes;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_append(self_: *mut DDS_BytesSeq, newValue: *const DDS_Bytes)
    -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_append_autosize(
        self_: *mut DDS_BytesSeq,
        newValue: *const DDS_Bytes,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_copy_no_alloc(
        self_: *mut DDS_BytesSeq,
        src: *const DDS_BytesSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_copy(
        self_: *mut DDS_BytesSeq,
        src: *const DDS_BytesSeq,
    ) -> *mut DDS_BytesSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_compare(self_: *const DDS_BytesSeq, src: *const DDS_BytesSeq) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_from_array(
        self_: *mut DDS_BytesSeq,
        srcArray: *const DDS_Bytes,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_to_array(
        self_: *const DDS_BytesSeq,
        dstArray: *mut DDS_Bytes,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_loan_contiguous(
        self_: *mut DDS_BytesSeq,
        buffer: *mut DDS_Bytes,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_loan_discontiguous(
        self_: *mut DDS_BytesSeq,
        buffer: *mut *mut DDS_Bytes,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_unloan(self_: *mut DDS_BytesSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_get_contiguous_buffer(self_: *const DDS_BytesSeq) -> *mut DDS_Bytes;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_get_discontiguous_buffer(self_: *const DDS_BytesSeq)
    -> *mut *mut DDS_Bytes;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_get_reader_and_data_ptr(
        self_: *const DDS_BytesSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_set_reader_and_data_ptr(
        self_: *mut DDS_BytesSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_has_ownership(self_: *const DDS_BytesSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_clear(self_: *mut DDS_BytesSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_finalize(self_: *mut DDS_BytesSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_shallow_copy(self_: *mut DDS_BytesSeq, other: *mut DDS_BytesSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSeq_initialize_ex(
        self_: *mut DDS_BytesSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesInitialize(self_: *mut DDS_Bytes) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesInitializeEx(
        self_: *mut DDS_Bytes,
        pool: *mut ZRMemPool,
        allocateMemory: ZR_BOOLEAN,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesFinalize(self_: *mut DDS_Bytes);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesFinalizeEx(
        self_: *mut DDS_Bytes,
        pool: *mut ZRMemPool,
        deletePointers: ZR_BOOLEAN,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesCopySample(dst: *mut DDS_Bytes, src: *const DDS_Bytes) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesCopyEx(
        dst: *mut DDS_Bytes,
        src: *const DDS_Bytes,
        pool: *mut ZRMemPool,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesPrintData(sample: *const DDS_Bytes);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesGetTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesCreateSample(pool: *mut ZRMemPool, allocMutable: ZR_BOOLEAN) -> *mut DDS_Bytes;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDestroySample(pool: *mut ZRMemPool, sample: *mut DDS_Bytes);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesGetSerializedSampleMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesGetSerializedSampleSize(
        sample: *const DDS_Bytes,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSerialize(sample: *const DDS_Bytes, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDeserialize(
        sample: *mut DDS_Bytes,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesGetSerializedKeyMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesGetSerializedKeySize(
        sample: *const DDS_Bytes,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesSerializeKey(sample: *const DDS_Bytes, cdr: *mut CDRSerializer) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDeserializeKey(
        sample: *mut DDS_Bytes,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesGetKeyHash(
        sample: *const DDS_Bytes,
        cdr: *mut CDRSerializer,
        result: *mut DDS_KeyHash_t,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesHasKey() -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesGetInnerTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesNoSerializingSupported(
        typesupport: *const ::std::os::raw::c_void,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesFixedHeaderLength(typesupport: *const ::std::os::raw::c_void) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesOnSiteDeserialize(
        cdr: *mut CDRDeserializer,
        sample: *mut ::std::os::raw::c_void,
        offset: ZR_UINT32,
        totalSize: ZR_UINT32,
        payload: *mut ZR_INT8,
        payloadLen: ZR_UINT32,
        fixedHeaderLen: ZR_UINT32,
    ) -> ZR_INT32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_KeyedBytes {
    pub key: *mut DDS_Char,
    pub value: DDS_OctetSeq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_KeyedBytes"][::std::mem::size_of::<DDS_KeyedBytes>() - 80usize];
    ["Alignment of DDS_KeyedBytes"][::std::mem::align_of::<DDS_KeyedBytes>() - 8usize];
    ["Offset of field: DDS_KeyedBytes::key"][::std::mem::offset_of!(DDS_KeyedBytes, key) - 0usize];
    ["Offset of field: DDS_KeyedBytes::value"]
        [::std::mem::offset_of!(DDS_KeyedBytes, value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_KeyedBytesSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_KeyedBytes,
    pub _discontiguousBuffer: *mut *mut DDS_KeyedBytes,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_KeyedBytesSeq"][::std::mem::size_of::<DDS_KeyedBytesSeq>() - 72usize];
    ["Alignment of DDS_KeyedBytesSeq"][::std::mem::align_of::<DDS_KeyedBytesSeq>() - 8usize];
    ["Offset of field: DDS_KeyedBytesSeq::_owned"]
        [::std::mem::offset_of!(DDS_KeyedBytesSeq, _owned) - 0usize];
    ["Offset of field: DDS_KeyedBytesSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_KeyedBytesSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_KeyedBytesSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_KeyedBytesSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_KeyedBytesSeq::_maximum"]
        [::std::mem::offset_of!(DDS_KeyedBytesSeq, _maximum) - 24usize];
    ["Offset of field: DDS_KeyedBytesSeq::_length"]
        [::std::mem::offset_of!(DDS_KeyedBytesSeq, _length) - 28usize];
    ["Offset of field: DDS_KeyedBytesSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_KeyedBytesSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_KeyedBytesSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_KeyedBytesSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_KeyedBytesSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_KeyedBytesSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_KeyedBytesSeq::_mempool"]
        [::std::mem::offset_of!(DDS_KeyedBytesSeq, _mempool) - 56usize];
    ["Offset of field: DDS_KeyedBytesSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_KeyedBytesSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_is_initialized(self_: *const DDS_KeyedBytesSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_set(
        self_: *mut DDS_KeyedBytesSeq,
        index: DDS_ULong,
        newValue: *const DDS_KeyedBytes,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_initialize(self_: *mut DDS_KeyedBytesSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_new(newMax: DDS_ULong) -> *mut DDS_KeyedBytesSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_get_maximum(self_: *const DDS_KeyedBytesSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_set_maximum(
        self_: *mut DDS_KeyedBytesSeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_get_length(self_: *const DDS_KeyedBytesSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_set_length(
        self_: *mut DDS_KeyedBytesSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_ensure_length(
        self_: *mut DDS_KeyedBytesSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_get_reference(
        self_: *const DDS_KeyedBytesSeq,
        index: DDS_ULong,
    ) -> *mut DDS_KeyedBytes;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_append(
        self_: *mut DDS_KeyedBytesSeq,
        newValue: *const DDS_KeyedBytes,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_append_autosize(
        self_: *mut DDS_KeyedBytesSeq,
        newValue: *const DDS_KeyedBytes,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_copy_no_alloc(
        self_: *mut DDS_KeyedBytesSeq,
        src: *const DDS_KeyedBytesSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_copy(
        self_: *mut DDS_KeyedBytesSeq,
        src: *const DDS_KeyedBytesSeq,
    ) -> *mut DDS_KeyedBytesSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_compare(
        self_: *const DDS_KeyedBytesSeq,
        src: *const DDS_KeyedBytesSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_from_array(
        self_: *mut DDS_KeyedBytesSeq,
        srcArray: *const DDS_KeyedBytes,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_to_array(
        self_: *const DDS_KeyedBytesSeq,
        dstArray: *mut DDS_KeyedBytes,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_loan_contiguous(
        self_: *mut DDS_KeyedBytesSeq,
        buffer: *mut DDS_KeyedBytes,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_loan_discontiguous(
        self_: *mut DDS_KeyedBytesSeq,
        buffer: *mut *mut DDS_KeyedBytes,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_unloan(self_: *mut DDS_KeyedBytesSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_get_contiguous_buffer(
        self_: *const DDS_KeyedBytesSeq,
    ) -> *mut DDS_KeyedBytes;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_get_discontiguous_buffer(
        self_: *const DDS_KeyedBytesSeq,
    ) -> *mut *mut DDS_KeyedBytes;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_get_reader_and_data_ptr(
        self_: *const DDS_KeyedBytesSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_set_reader_and_data_ptr(
        self_: *mut DDS_KeyedBytesSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_has_ownership(self_: *const DDS_KeyedBytesSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_clear(self_: *mut DDS_KeyedBytesSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_finalize(self_: *mut DDS_KeyedBytesSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_shallow_copy(
        self_: *mut DDS_KeyedBytesSeq,
        other: *mut DDS_KeyedBytesSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSeq_initialize_ex(
        self_: *mut DDS_KeyedBytesSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesInitialize(self_: *mut DDS_KeyedBytes) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesInitializeEx(
        self_: *mut DDS_KeyedBytes,
        pool: *mut ZRMemPool,
        allocateMemory: ZR_BOOLEAN,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesFinalize(self_: *mut DDS_KeyedBytes);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesFinalizeEx(
        self_: *mut DDS_KeyedBytes,
        pool: *mut ZRMemPool,
        deletePointers: ZR_BOOLEAN,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesCopySample(
        dst: *mut DDS_KeyedBytes,
        src: *const DDS_KeyedBytes,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesCopyEx(
        dst: *mut DDS_KeyedBytes,
        src: *const DDS_KeyedBytes,
        pool: *mut ZRMemPool,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesPrintData(sample: *const DDS_KeyedBytes);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesGetTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesCreateSample(
        pool: *mut ZRMemPool,
        allocMutable: ZR_BOOLEAN,
    ) -> *mut DDS_KeyedBytes;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDestroySample(pool: *mut ZRMemPool, sample: *mut DDS_KeyedBytes);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesGetSerializedSampleMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesGetSerializedSampleSize(
        sample: *const DDS_KeyedBytes,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSerialize(
        sample: *const DDS_KeyedBytes,
        cdr: *mut CDRSerializer,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDeserialize(
        sample: *mut DDS_KeyedBytes,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesGetSerializedKeyMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesGetSerializedKeySize(
        sample: *const DDS_KeyedBytes,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesSerializeKey(
        sample: *const DDS_KeyedBytes,
        cdr: *mut CDRSerializer,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDeserializeKey(
        sample: *mut DDS_KeyedBytes,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesGetKeyHash(
        sample: *const DDS_KeyedBytes,
        cdr: *mut CDRSerializer,
        result: *mut DDS_KeyHash_t,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesHasKey() -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesGetInnerTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesNoSerializingSupported(
        typesupport: *const ::std::os::raw::c_void,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesFixedHeaderLength(typesupport: *const ::std::os::raw::c_void)
    -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesOnSiteDeserialize(
        cdr: *mut CDRDeserializer,
        sample: *mut ::std::os::raw::c_void,
        offset: ZR_UINT32,
        totalSize: ZR_UINT32,
        payload: *mut ZR_INT8,
        payloadLen: ZR_UINT32,
        fixedHeaderLen: ZR_UINT32,
    ) -> ZR_INT32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ZeroCopyBytes {
    pub totalLength: DDS_Long,
    pub reservedLength: DDS_Long,
    pub value: *mut DDS_Char,
    pub userBuffer: *mut DDS_Char,
    pub userLength: DDS_Long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_ZeroCopyBytes"][::std::mem::size_of::<DDS_ZeroCopyBytes>() - 32usize];
    ["Alignment of DDS_ZeroCopyBytes"][::std::mem::align_of::<DDS_ZeroCopyBytes>() - 8usize];
    ["Offset of field: DDS_ZeroCopyBytes::totalLength"]
        [::std::mem::offset_of!(DDS_ZeroCopyBytes, totalLength) - 0usize];
    ["Offset of field: DDS_ZeroCopyBytes::reservedLength"]
        [::std::mem::offset_of!(DDS_ZeroCopyBytes, reservedLength) - 4usize];
    ["Offset of field: DDS_ZeroCopyBytes::value"]
        [::std::mem::offset_of!(DDS_ZeroCopyBytes, value) - 8usize];
    ["Offset of field: DDS_ZeroCopyBytes::userBuffer"]
        [::std::mem::offset_of!(DDS_ZeroCopyBytes, userBuffer) - 16usize];
    ["Offset of field: DDS_ZeroCopyBytes::userLength"]
        [::std::mem::offset_of!(DDS_ZeroCopyBytes, userLength) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ZeroCopyBytesSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_ZeroCopyBytes,
    pub _discontiguousBuffer: *mut *mut DDS_ZeroCopyBytes,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_ZeroCopyBytesSeq"][::std::mem::size_of::<DDS_ZeroCopyBytesSeq>() - 72usize];
    ["Alignment of DDS_ZeroCopyBytesSeq"][::std::mem::align_of::<DDS_ZeroCopyBytesSeq>() - 8usize];
    ["Offset of field: DDS_ZeroCopyBytesSeq::_owned"]
        [::std::mem::offset_of!(DDS_ZeroCopyBytesSeq, _owned) - 0usize];
    ["Offset of field: DDS_ZeroCopyBytesSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_ZeroCopyBytesSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_ZeroCopyBytesSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_ZeroCopyBytesSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_ZeroCopyBytesSeq::_maximum"]
        [::std::mem::offset_of!(DDS_ZeroCopyBytesSeq, _maximum) - 24usize];
    ["Offset of field: DDS_ZeroCopyBytesSeq::_length"]
        [::std::mem::offset_of!(DDS_ZeroCopyBytesSeq, _length) - 28usize];
    ["Offset of field: DDS_ZeroCopyBytesSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_ZeroCopyBytesSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_ZeroCopyBytesSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_ZeroCopyBytesSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_ZeroCopyBytesSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_ZeroCopyBytesSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_ZeroCopyBytesSeq::_mempool"]
        [::std::mem::offset_of!(DDS_ZeroCopyBytesSeq, _mempool) - 56usize];
    ["Offset of field: DDS_ZeroCopyBytesSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_ZeroCopyBytesSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_is_initialized(self_: *const DDS_ZeroCopyBytesSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_set(
        self_: *mut DDS_ZeroCopyBytesSeq,
        index: DDS_ULong,
        newValue: *const DDS_ZeroCopyBytes,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_initialize(self_: *mut DDS_ZeroCopyBytesSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_new(newMax: DDS_ULong) -> *mut DDS_ZeroCopyBytesSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_get_maximum(self_: *const DDS_ZeroCopyBytesSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_set_maximum(
        self_: *mut DDS_ZeroCopyBytesSeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_get_length(self_: *const DDS_ZeroCopyBytesSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_set_length(
        self_: *mut DDS_ZeroCopyBytesSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_ensure_length(
        self_: *mut DDS_ZeroCopyBytesSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_get_reference(
        self_: *const DDS_ZeroCopyBytesSeq,
        index: DDS_ULong,
    ) -> *mut DDS_ZeroCopyBytes;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_append(
        self_: *mut DDS_ZeroCopyBytesSeq,
        newValue: *const DDS_ZeroCopyBytes,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_append_autosize(
        self_: *mut DDS_ZeroCopyBytesSeq,
        newValue: *const DDS_ZeroCopyBytes,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_copy_no_alloc(
        self_: *mut DDS_ZeroCopyBytesSeq,
        src: *const DDS_ZeroCopyBytesSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_copy(
        self_: *mut DDS_ZeroCopyBytesSeq,
        src: *const DDS_ZeroCopyBytesSeq,
    ) -> *mut DDS_ZeroCopyBytesSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_compare(
        self_: *const DDS_ZeroCopyBytesSeq,
        src: *const DDS_ZeroCopyBytesSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_from_array(
        self_: *mut DDS_ZeroCopyBytesSeq,
        srcArray: *const DDS_ZeroCopyBytes,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_to_array(
        self_: *const DDS_ZeroCopyBytesSeq,
        dstArray: *mut DDS_ZeroCopyBytes,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_loan_contiguous(
        self_: *mut DDS_ZeroCopyBytesSeq,
        buffer: *mut DDS_ZeroCopyBytes,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_loan_discontiguous(
        self_: *mut DDS_ZeroCopyBytesSeq,
        buffer: *mut *mut DDS_ZeroCopyBytes,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_unloan(self_: *mut DDS_ZeroCopyBytesSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_get_contiguous_buffer(
        self_: *const DDS_ZeroCopyBytesSeq,
    ) -> *mut DDS_ZeroCopyBytes;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_get_discontiguous_buffer(
        self_: *const DDS_ZeroCopyBytesSeq,
    ) -> *mut *mut DDS_ZeroCopyBytes;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_get_reader_and_data_ptr(
        self_: *const DDS_ZeroCopyBytesSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_set_reader_and_data_ptr(
        self_: *mut DDS_ZeroCopyBytesSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_has_ownership(self_: *const DDS_ZeroCopyBytesSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_clear(self_: *mut DDS_ZeroCopyBytesSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_finalize(self_: *mut DDS_ZeroCopyBytesSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_shallow_copy(
        self_: *mut DDS_ZeroCopyBytesSeq,
        other: *mut DDS_ZeroCopyBytesSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSeq_initialize_ex(
        self_: *mut DDS_ZeroCopyBytesSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesInitialize(self_: *mut DDS_ZeroCopyBytes) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesInitializeEx(
        self_: *mut DDS_ZeroCopyBytes,
        pool: *mut ZRMemPool,
        allocateMemory: ZR_BOOLEAN,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesFinalize(self_: *mut DDS_ZeroCopyBytes);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesFinalizeEx(
        self_: *mut DDS_ZeroCopyBytes,
        pool: *mut ZRMemPool,
        deletePointers: ZR_BOOLEAN,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesCopySample(
        dst: *mut DDS_ZeroCopyBytes,
        src: *const DDS_ZeroCopyBytes,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesCopyEx(
        dst: *mut DDS_ZeroCopyBytes,
        src: *const DDS_ZeroCopyBytes,
        pool: *mut ZRMemPool,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesPrintData(sample: *const DDS_ZeroCopyBytes);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesGetTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesCreateSample(
        pool: *mut ZRMemPool,
        allocMutable: ZR_BOOLEAN,
    ) -> *mut DDS_ZeroCopyBytes;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDestroySample(pool: *mut ZRMemPool, sample: *mut DDS_ZeroCopyBytes);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesGetSerializedSampleMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesGetSerializedSampleSize(
        sample: *const DDS_ZeroCopyBytes,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSerialize(
        sample: *const DDS_ZeroCopyBytes,
        cdr: *mut CDRSerializer,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDeserialize(
        sample: *mut DDS_ZeroCopyBytes,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesGetSerializedKeyMaxSize() -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesGetSerializedKeySize(
        sample: *const DDS_ZeroCopyBytes,
        currentAlignment: ZR_UINT32,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesSerializeKey(
        sample: *const DDS_ZeroCopyBytes,
        cdr: *mut CDRSerializer,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDeserializeKey(
        sample: *mut DDS_ZeroCopyBytes,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesGetKeyHash(
        sample: *const DDS_ZeroCopyBytes,
        cdr: *mut CDRSerializer,
        result: *mut DDS_KeyHash_t,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesHasKey() -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesGetInnerTypeCode() -> *mut TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesNoSerializingSupported(
        typesupport: *const ::std::os::raw::c_void,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesFixedHeaderLength(
        typesupport: *const ::std::os::raw::c_void,
    ) -> ZR_UINT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesOnSiteDeserialize(
        cdr: *mut CDRDeserializer,
        sample: *mut ::std::os::raw::c_void,
        offset: ZR_UINT32,
        totalSize: ZR_UINT32,
        payload: *mut ZR_INT8,
        payloadLen: ZR_UINT32,
        fixedHeaderLen: ZR_UINT32,
    ) -> ZR_INT32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_UserDataQosPolicy {
    pub value: DDS_CharSeq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_UserDataQosPolicy"][::std::mem::size_of::<DDS_UserDataQosPolicy>() - 72usize];
    ["Alignment of DDS_UserDataQosPolicy"]
        [::std::mem::align_of::<DDS_UserDataQosPolicy>() - 8usize];
    ["Offset of field: DDS_UserDataQosPolicy::value"]
        [::std::mem::offset_of!(DDS_UserDataQosPolicy, value) - 0usize];
};
pub const DDS_OwnershipQosPolicyKind_DDS_SHARED_OWNERSHIP_QOS: DDS_OwnershipQosPolicyKind = 0;
pub const DDS_OwnershipQosPolicyKind_DDS_EXCLUSIVE_OWNERSHIP_QOS: DDS_OwnershipQosPolicyKind = 1;
pub type DDS_OwnershipQosPolicyKind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_OwnershipQosPolicy {
    pub kind: DDS_OwnershipQosPolicyKind,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_OwnershipQosPolicy"][::std::mem::size_of::<DDS_OwnershipQosPolicy>() - 4usize];
    ["Alignment of DDS_OwnershipQosPolicy"]
        [::std::mem::align_of::<DDS_OwnershipQosPolicy>() - 4usize];
    ["Offset of field: DDS_OwnershipQosPolicy::kind"]
        [::std::mem::offset_of!(DDS_OwnershipQosPolicy, kind) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_OwnershipStrengthQosPolicy {
    pub value: DDS_Long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_OwnershipStrengthQosPolicy"]
        [::std::mem::size_of::<DDS_OwnershipStrengthQosPolicy>() - 4usize];
    ["Alignment of DDS_OwnershipStrengthQosPolicy"]
        [::std::mem::align_of::<DDS_OwnershipStrengthQosPolicy>() - 4usize];
    ["Offset of field: DDS_OwnershipStrengthQosPolicy::value"]
        [::std::mem::offset_of!(DDS_OwnershipStrengthQosPolicy, value) - 0usize];
};
pub const DDS_DestinationOrderQosPolicyKind_DDS_BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS:
    DDS_DestinationOrderQosPolicyKind = 0;
pub const DDS_DestinationOrderQosPolicyKind_DDS_BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS:
    DDS_DestinationOrderQosPolicyKind = 1;
pub type DDS_DestinationOrderQosPolicyKind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DestinationOrderQosPolicy {
    pub kind: DDS_DestinationOrderQosPolicyKind,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_DestinationOrderQosPolicy"]
        [::std::mem::size_of::<DDS_DestinationOrderQosPolicy>() - 4usize];
    ["Alignment of DDS_DestinationOrderQosPolicy"]
        [::std::mem::align_of::<DDS_DestinationOrderQosPolicy>() - 4usize];
    ["Offset of field: DDS_DestinationOrderQosPolicy::kind"]
        [::std::mem::offset_of!(DDS_DestinationOrderQosPolicy, kind) - 0usize];
};
pub const DDS_PresentationQosPolicyAccessScopeKind_DDS_INSTANCE_PRESENTATION_QOS:
    DDS_PresentationQosPolicyAccessScopeKind = 0;
pub const DDS_PresentationQosPolicyAccessScopeKind_DDS_TOPIC_PRESENTATION_QOS:
    DDS_PresentationQosPolicyAccessScopeKind = 1;
pub const DDS_PresentationQosPolicyAccessScopeKind_DDS_GROUP_PRESENTATION_QOS:
    DDS_PresentationQosPolicyAccessScopeKind = 2;
pub type DDS_PresentationQosPolicyAccessScopeKind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_PresentationQosPolicy {
    pub access_scope: DDS_PresentationQosPolicyAccessScopeKind,
    pub coherent_access: DDS_Boolean,
    pub ordered_access: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_PresentationQosPolicy"]
        [::std::mem::size_of::<DDS_PresentationQosPolicy>() - 8usize];
    ["Alignment of DDS_PresentationQosPolicy"]
        [::std::mem::align_of::<DDS_PresentationQosPolicy>() - 4usize];
    ["Offset of field: DDS_PresentationQosPolicy::access_scope"]
        [::std::mem::offset_of!(DDS_PresentationQosPolicy, access_scope) - 0usize];
    ["Offset of field: DDS_PresentationQosPolicy::coherent_access"]
        [::std::mem::offset_of!(DDS_PresentationQosPolicy, coherent_access) - 4usize];
    ["Offset of field: DDS_PresentationQosPolicy::ordered_access"]
        [::std::mem::offset_of!(DDS_PresentationQosPolicy, ordered_access) - 5usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_Property {
    pub name: *mut DDS_Char,
    pub value: *mut DDS_Char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_Property"][::std::mem::size_of::<DDS_Property>() - 16usize];
    ["Alignment of DDS_Property"][::std::mem::align_of::<DDS_Property>() - 8usize];
    ["Offset of field: DDS_Property::name"][::std::mem::offset_of!(DDS_Property, name) - 0usize];
    ["Offset of field: DDS_Property::value"][::std::mem::offset_of!(DDS_Property, value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_PropertyList {
    pub size: DDS_ULong,
    pub buffer: [DDS_Property; 16usize],
    pub values: *mut DDS_Property,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_PropertyList"][::std::mem::size_of::<DDS_PropertyList>() - 272usize];
    ["Alignment of DDS_PropertyList"][::std::mem::align_of::<DDS_PropertyList>() - 8usize];
    ["Offset of field: DDS_PropertyList::size"]
        [::std::mem::offset_of!(DDS_PropertyList, size) - 0usize];
    ["Offset of field: DDS_PropertyList::buffer"]
        [::std::mem::offset_of!(DDS_PropertyList, buffer) - 8usize];
    ["Offset of field: DDS_PropertyList::values"]
        [::std::mem::offset_of!(DDS_PropertyList, values) - 264usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertyInitial(
        self_: *mut DDS_Property,
        name: *const DDS_Char,
        value: *const DDS_Char,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertyClear(self_: *mut DDS_Property) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertyListInitial(self_: *mut DDS_PropertyList);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertyListInsert(
        self_: *mut DDS_PropertyList,
        name: *const DDS_Char,
        value: *const DDS_Char,
        newPro: *mut DDS_Property,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertyListCopy(
        self_: *mut DDS_PropertyList,
        right: *const DDS_PropertyList,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertyListGet(
        self_: *mut DDS_PropertyList,
        name: *const ::std::os::raw::c_char,
    ) -> *mut DDS_Property;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertyListClear(self_: *mut DDS_PropertyList) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertyListAt(self_: *mut DDS_PropertyList, index: DDS_ULong) -> *mut DDS_Property;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_PartitionQosPolicy {
    pub name: DDS_StringSeq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_PartitionQosPolicy"][::std::mem::size_of::<DDS_PartitionQosPolicy>() - 72usize];
    ["Alignment of DDS_PartitionQosPolicy"]
        [::std::mem::align_of::<DDS_PartitionQosPolicy>() - 8usize];
    ["Offset of field: DDS_PartitionQosPolicy::name"]
        [::std::mem::offset_of!(DDS_PartitionQosPolicy, name) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_TopicDataQosPolicy {
    pub value: DDS_CharSeq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_TopicDataQosPolicy"][::std::mem::size_of::<DDS_TopicDataQosPolicy>() - 72usize];
    ["Alignment of DDS_TopicDataQosPolicy"]
        [::std::mem::align_of::<DDS_TopicDataQosPolicy>() - 8usize];
    ["Offset of field: DDS_TopicDataQosPolicy::value"]
        [::std::mem::offset_of!(DDS_TopicDataQosPolicy, value) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_GroupDataQosPolicy {
    pub value: DDS_CharSeq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_GroupDataQosPolicy"][::std::mem::size_of::<DDS_GroupDataQosPolicy>() - 72usize];
    ["Alignment of DDS_GroupDataQosPolicy"]
        [::std::mem::align_of::<DDS_GroupDataQosPolicy>() - 8usize];
    ["Offset of field: DDS_GroupDataQosPolicy::value"]
        [::std::mem::offset_of!(DDS_GroupDataQosPolicy, value) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TypeObject {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeObjectFactoryCloneTypeObject(typeObject: *const TypeObject) -> *mut TypeObject;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeObjectFactoryDeleteTypeObject(typeObject: *mut TypeObject) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeObjectAssignableFrom(type1: *const TypeObject, type2: *const TypeObject)
    -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn GetTypeObjectPrintableString(typeObject: *const TypeObject) -> *mut DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ReleaseTypeObjectPrintableString(buffer: *mut DDS_Char);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeObjectFactoryCreateFromTypeCode(typeCode: *mut TypeCodeHeader) -> *mut TypeObject;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeObjectToTypeCode(typeObject: *const TypeObject) -> *mut TypeCodeHeader;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_PublicationBuiltinTopicData {
    pub key: DDS_BuiltinTopicKey_t,
    pub participant_key: DDS_BuiltinTopicKey_t,
    pub topic_name: *mut DDS_Char,
    pub type_name: *mut DDS_Char,
    pub durability: DDS_DurabilityQosPolicy,
    pub durability_service: DDS_DurabilityServiceQosPolicy,
    pub property_list: DDS_PropertyList,
    pub deadline: DDS_DeadlineQosPolicy,
    pub latency_budget: DDS_LatencyBudgetQosPolicy,
    pub liveliness: DDS_LivelinessQosPolicy,
    pub reliability: DDS_ReliabilityQosPolicy,
    pub lifespan: DDS_LifespanQosPolicy,
    pub user_data: DDS_UserDataQosPolicy,
    pub ownership: DDS_OwnershipQosPolicy,
    pub ownership_strength: DDS_OwnershipStrengthQosPolicy,
    pub destination_order: DDS_DestinationOrderQosPolicy,
    pub presention: DDS_PresentationQosPolicy,
    pub partition: DDS_PartitionQosPolicy,
    pub topic_data: DDS_TopicDataQosPolicy,
    pub group_data: DDS_GroupDataQosPolicy,
    pub type_object: *mut TypeObject,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_PublicationBuiltinTopicData"]
        [::std::mem::size_of::<DDS_PublicationBuiltinTopicData>() - 720usize];
    ["Alignment of DDS_PublicationBuiltinTopicData"]
        [::std::mem::align_of::<DDS_PublicationBuiltinTopicData>() - 8usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::key"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, key) - 0usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::participant_key"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, participant_key) - 16usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::topic_name"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, topic_name) - 32usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::type_name"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, type_name) - 40usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::durability"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, durability) - 48usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::durability_service"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, durability_service) - 52usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::property_list"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, property_list) - 80usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::deadline"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, deadline) - 352usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::latency_budget"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, latency_budget) - 360usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::liveliness"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, liveliness) - 368usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::reliability"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, reliability) - 380usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::lifespan"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, lifespan) - 392usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::user_data"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, user_data) - 400usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::ownership"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, ownership) - 472usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::ownership_strength"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, ownership_strength) - 476usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::destination_order"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, destination_order) - 480usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::presention"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, presention) - 484usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::partition"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, partition) - 496usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::topic_data"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, topic_data) - 568usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::group_data"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, group_data) - 640usize];
    ["Offset of field: DDS_PublicationBuiltinTopicData::type_object"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicData, type_object) - 712usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataInitial(self_: *mut DDS_PublicationBuiltinTopicData);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDestroy(self_: *mut DDS_PublicationBuiltinTopicData);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataCopy(
        dst: *mut DDS_PublicationBuiltinTopicData,
        src: *const DDS_PublicationBuiltinTopicData,
    ) -> DDS_Long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_PublicationBuiltinTopicDataSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_PublicationBuiltinTopicData,
    pub _discontiguousBuffer: *mut *mut DDS_PublicationBuiltinTopicData,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_PublicationBuiltinTopicDataSeq"]
        [::std::mem::size_of::<DDS_PublicationBuiltinTopicDataSeq>() - 72usize];
    ["Alignment of DDS_PublicationBuiltinTopicDataSeq"]
        [::std::mem::align_of::<DDS_PublicationBuiltinTopicDataSeq>() - 8usize];
    ["Offset of field: DDS_PublicationBuiltinTopicDataSeq::_owned"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicDataSeq, _owned) - 0usize];
    ["Offset of field: DDS_PublicationBuiltinTopicDataSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicDataSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_PublicationBuiltinTopicDataSeq::_discontiguousBuffer"][::std::mem::offset_of!(
        DDS_PublicationBuiltinTopicDataSeq,
        _discontiguousBuffer
    ) - 16usize];
    ["Offset of field: DDS_PublicationBuiltinTopicDataSeq::_maximum"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicDataSeq, _maximum) - 24usize];
    ["Offset of field: DDS_PublicationBuiltinTopicDataSeq::_length"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicDataSeq, _length) - 28usize];
    ["Offset of field: DDS_PublicationBuiltinTopicDataSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicDataSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_PublicationBuiltinTopicDataSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicDataSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_PublicationBuiltinTopicDataSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicDataSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_PublicationBuiltinTopicDataSeq::_mempool"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicDataSeq, _mempool) - 56usize];
    ["Offset of field: DDS_PublicationBuiltinTopicDataSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_PublicationBuiltinTopicDataSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_is_initialized(
        self_: *const DDS_PublicationBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_set(
        self_: *mut DDS_PublicationBuiltinTopicDataSeq,
        index: DDS_ULong,
        newValue: *const DDS_PublicationBuiltinTopicData,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_initialize(
        self_: *mut DDS_PublicationBuiltinTopicDataSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_new(
        newMax: DDS_ULong,
    ) -> *mut DDS_PublicationBuiltinTopicDataSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_get_maximum(
        self_: *const DDS_PublicationBuiltinTopicDataSeq,
    ) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_set_maximum(
        self_: *mut DDS_PublicationBuiltinTopicDataSeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_get_length(
        self_: *const DDS_PublicationBuiltinTopicDataSeq,
    ) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_set_length(
        self_: *mut DDS_PublicationBuiltinTopicDataSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_ensure_length(
        self_: *mut DDS_PublicationBuiltinTopicDataSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_get_reference(
        self_: *const DDS_PublicationBuiltinTopicDataSeq,
        index: DDS_ULong,
    ) -> *mut DDS_PublicationBuiltinTopicData;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_append(
        self_: *mut DDS_PublicationBuiltinTopicDataSeq,
        newValue: *const DDS_PublicationBuiltinTopicData,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_append_autosize(
        self_: *mut DDS_PublicationBuiltinTopicDataSeq,
        newValue: *const DDS_PublicationBuiltinTopicData,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_copy_no_alloc(
        self_: *mut DDS_PublicationBuiltinTopicDataSeq,
        src: *const DDS_PublicationBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_copy(
        self_: *mut DDS_PublicationBuiltinTopicDataSeq,
        src: *const DDS_PublicationBuiltinTopicDataSeq,
    ) -> *mut DDS_PublicationBuiltinTopicDataSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_compare(
        self_: *const DDS_PublicationBuiltinTopicDataSeq,
        src: *const DDS_PublicationBuiltinTopicDataSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_from_array(
        self_: *mut DDS_PublicationBuiltinTopicDataSeq,
        srcArray: *const DDS_PublicationBuiltinTopicData,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_to_array(
        self_: *const DDS_PublicationBuiltinTopicDataSeq,
        dstArray: *mut DDS_PublicationBuiltinTopicData,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_loan_contiguous(
        self_: *mut DDS_PublicationBuiltinTopicDataSeq,
        buffer: *mut DDS_PublicationBuiltinTopicData,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_loan_discontiguous(
        self_: *mut DDS_PublicationBuiltinTopicDataSeq,
        buffer: *mut *mut DDS_PublicationBuiltinTopicData,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_unloan(
        self_: *mut DDS_PublicationBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_get_contiguous_buffer(
        self_: *const DDS_PublicationBuiltinTopicDataSeq,
    ) -> *mut DDS_PublicationBuiltinTopicData;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_get_discontiguous_buffer(
        self_: *const DDS_PublicationBuiltinTopicDataSeq,
    ) -> *mut *mut DDS_PublicationBuiltinTopicData;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_get_reader_and_data_ptr(
        self_: *const DDS_PublicationBuiltinTopicDataSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_set_reader_and_data_ptr(
        self_: *mut DDS_PublicationBuiltinTopicDataSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_has_ownership(
        self_: *const DDS_PublicationBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_clear(
        self_: *mut DDS_PublicationBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_finalize(
        self_: *mut DDS_PublicationBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_shallow_copy(
        self_: *mut DDS_PublicationBuiltinTopicDataSeq,
        other: *mut DDS_PublicationBuiltinTopicDataSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataSeq_initialize_ex(
        self_: *mut DDS_PublicationBuiltinTopicDataSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_SampleLostStatus {
    pub total_count: DDS_Long,
    pub total_count_change: DDS_Long,
    pub writer_handle: DDS_InstanceHandle_t,
    pub start_seq: DDS_SequenceNumber_t,
    pub end_seq: DDS_SequenceNumber_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_SampleLostStatus"][::std::mem::size_of::<DDS_SampleLostStatus>() - 44usize];
    ["Alignment of DDS_SampleLostStatus"][::std::mem::align_of::<DDS_SampleLostStatus>() - 4usize];
    ["Offset of field: DDS_SampleLostStatus::total_count"]
        [::std::mem::offset_of!(DDS_SampleLostStatus, total_count) - 0usize];
    ["Offset of field: DDS_SampleLostStatus::total_count_change"]
        [::std::mem::offset_of!(DDS_SampleLostStatus, total_count_change) - 4usize];
    ["Offset of field: DDS_SampleLostStatus::writer_handle"]
        [::std::mem::offset_of!(DDS_SampleLostStatus, writer_handle) - 8usize];
    ["Offset of field: DDS_SampleLostStatus::start_seq"]
        [::std::mem::offset_of!(DDS_SampleLostStatus, start_seq) - 28usize];
    ["Offset of field: DDS_SampleLostStatus::end_seq"]
        [::std::mem::offset_of!(DDS_SampleLostStatus, end_seq) - 36usize];
};
pub const DDS_SampleRejectedStatusKind_DDS_NOT_REJECTED: DDS_SampleRejectedStatusKind = 0;
pub const DDS_SampleRejectedStatusKind_DDS_REJECTED_BY_INSTANCE_LIMIT:
    DDS_SampleRejectedStatusKind = 1;
pub const DDS_SampleRejectedStatusKind_DDS_REJECTED_BY_SAMPLES_LIMIT: DDS_SampleRejectedStatusKind =
    2;
pub const DDS_SampleRejectedStatusKind_DDS_REJECTED_BY_SAMPLES_PER_INSTANCE_LIMIT:
    DDS_SampleRejectedStatusKind = 3;
pub type DDS_SampleRejectedStatusKind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_SampleRejectedStatus {
    pub total_count: DDS_Long,
    pub total_count_change: DDS_Long,
    pub last_reason: DDS_SampleRejectedStatusKind,
    pub last_instance_handle: DDS_InstanceHandle_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_SampleRejectedStatus"]
        [::std::mem::size_of::<DDS_SampleRejectedStatus>() - 32usize];
    ["Alignment of DDS_SampleRejectedStatus"]
        [::std::mem::align_of::<DDS_SampleRejectedStatus>() - 4usize];
    ["Offset of field: DDS_SampleRejectedStatus::total_count"]
        [::std::mem::offset_of!(DDS_SampleRejectedStatus, total_count) - 0usize];
    ["Offset of field: DDS_SampleRejectedStatus::total_count_change"]
        [::std::mem::offset_of!(DDS_SampleRejectedStatus, total_count_change) - 4usize];
    ["Offset of field: DDS_SampleRejectedStatus::last_reason"]
        [::std::mem::offset_of!(DDS_SampleRejectedStatus, last_reason) - 8usize];
    ["Offset of field: DDS_SampleRejectedStatus::last_instance_handle"]
        [::std::mem::offset_of!(DDS_SampleRejectedStatus, last_instance_handle) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_SubscriptionMatchedStatus {
    pub total_count: DDS_Long,
    pub total_count_change: DDS_Long,
    pub current_count: DDS_Long,
    pub current_count_change: DDS_Long,
    pub last_publication_handle: DDS_InstanceHandle_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_SubscriptionMatchedStatus"]
        [::std::mem::size_of::<DDS_SubscriptionMatchedStatus>() - 36usize];
    ["Alignment of DDS_SubscriptionMatchedStatus"]
        [::std::mem::align_of::<DDS_SubscriptionMatchedStatus>() - 4usize];
    ["Offset of field: DDS_SubscriptionMatchedStatus::total_count"]
        [::std::mem::offset_of!(DDS_SubscriptionMatchedStatus, total_count) - 0usize];
    ["Offset of field: DDS_SubscriptionMatchedStatus::total_count_change"]
        [::std::mem::offset_of!(DDS_SubscriptionMatchedStatus, total_count_change) - 4usize];
    ["Offset of field: DDS_SubscriptionMatchedStatus::current_count"]
        [::std::mem::offset_of!(DDS_SubscriptionMatchedStatus, current_count) - 8usize];
    ["Offset of field: DDS_SubscriptionMatchedStatus::current_count_change"]
        [::std::mem::offset_of!(DDS_SubscriptionMatchedStatus, current_count_change) - 12usize];
    ["Offset of field: DDS_SubscriptionMatchedStatus::last_publication_handle"]
        [::std::mem::offset_of!(DDS_SubscriptionMatchedStatus, last_publication_handle) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_Listener {
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_Listener"][::std::mem::size_of::<DDS_Listener>() - 8usize];
    ["Alignment of DDS_Listener"][::std::mem::align_of::<DDS_Listener>() - 8usize];
    ["Offset of field: DDS_Listener::user_data"]
        [::std::mem::offset_of!(DDS_Listener, user_data) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConditionImpl {
    _unused: [u8; 0],
}
pub type DDS_Condition = ConditionImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StatusConditionImpl {
    _unused: [u8; 0],
}
pub type DDS_StatusCondition = StatusConditionImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GuardConditionImpl {
    _unused: [u8; 0],
}
pub type DDS_GuardCondition = GuardConditionImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReadConditionImpl {
    _unused: [u8; 0],
}
pub type DDS_ReadCondition = ReadConditionImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QueryConditionImpl {
    _unused: [u8; 0],
}
pub type DDS_QueryCondition = QueryConditionImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WaitSetImpl {
    _unused: [u8; 0],
}
pub type DDS_WaitSet = WaitSetImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EntityImpl {
    _unused: [u8; 0],
}
pub type DDS_Entity = EntityImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DataReaderImpl {
    _unused: [u8; 0],
}
pub type DDS_DataReader = DataReaderImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DataWriterImpl {
    _unused: [u8; 0],
}
pub type DDS_DataWriter = DataWriterImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TopicDescriptionImpl {
    _unused: [u8; 0],
}
pub type DDS_TopicDescription = TopicDescriptionImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TopicImpl {
    _unused: [u8; 0],
}
pub type DDS_Topic = TopicImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ContentFilteredTopicImpl {
    _unused: [u8; 0],
}
pub type DDS_ContentFilteredTopic = ContentFilteredTopicImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubscriberImpl {
    _unused: [u8; 0],
}
pub type DDS_Subscriber = SubscriberImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PublisherImpl {
    _unused: [u8; 0],
}
pub type DDS_Publisher = PublisherImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DomainParticipantImpl {
    _unused: [u8; 0],
}
pub type DDS_DomainParticipant = DomainParticipantImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DomainParticipantFactoryImpl {
    _unused: [u8; 0],
}
pub type DDS_DomainParticipantFactory = DomainParticipantFactoryImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZRDynamicDataDataReader {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZRDynamicDataTypeSupportImpl {
    _unused: [u8; 0],
}
pub type ZRDynamicDataTypeSupport = ZRDynamicDataTypeSupportImpl;
pub type TypeCode = TypeCodeHeader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TypeCodeFactoryImpl {
    _unused: [u8; 0],
}
pub type TypeCodeFactory = TypeCodeFactoryImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DataWriterListenerImpl {
    _unused: [u8; 0],
}
pub type va_list = *mut ::std::os::raw::c_char;
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __security_init_cookie();
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo();
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_data_public"]
        [::std::mem::size_of::<__crt_locale_data_public>() - 16usize];
    ["Alignment of __crt_locale_data_public"]
        [::std::mem::align_of::<__crt_locale_data_public>() - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_pctype"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_pctype) - 0usize];
    ["Offset of field: __crt_locale_data_public::_locale_mb_cur_max"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_mb_cur_max) - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_lc_codepage"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_lc_codepage) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_pointers"][::std::mem::size_of::<__crt_locale_pointers>() - 16usize];
    ["Alignment of __crt_locale_pointers"]
        [::std::mem::align_of::<__crt_locale_pointers>() - 8usize];
    ["Offset of field: __crt_locale_pointers::locinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, locinfo) - 0usize];
    ["Offset of field: __crt_locale_pointers::mbcinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, mbcinfo) - 8usize];
};
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Mbstatet"][::std::mem::size_of::<_Mbstatet>() - 8usize];
    ["Alignment of _Mbstatet"][::std::mem::align_of::<_Mbstatet>() - 4usize];
    ["Offset of field: _Mbstatet::_Wchar"][::std::mem::offset_of!(_Mbstatet, _Wchar) - 0usize];
    ["Offset of field: _Mbstatet::_Byte"][::std::mem::offset_of!(_Mbstatet, _Byte) - 4usize];
    ["Offset of field: _Mbstatet::_State"][::std::mem::offset_of!(_Mbstatet, _State) - 6usize];
};
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _iobuf"][::std::mem::size_of::<_iobuf>() - 8usize];
    ["Alignment of _iobuf"][::std::mem::align_of::<_iobuf>() - 8usize];
    ["Offset of field: _iobuf::_Placeholder"]
        [::std::mem::offset_of!(_iobuf, _Placeholder) - 0usize];
};
pub type FILE = _iobuf;
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn getwchar() -> wint_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> *mut wchar_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> errno_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
pub type DataReaderListenerRequestedDeadlineMissedCallback = ::std::option::Option<
    unsafe extern "C" fn(
        reader: *mut DDS_DataReader,
        status: *const DDS_RequestedDeadlineMissedStatus,
    ),
>;
pub type DataReaderListenerLivelinessChangedCallback = ::std::option::Option<
    unsafe extern "C" fn(reader: *mut DDS_DataReader, status: *const DDS_LivelinessChangedStatus),
>;
pub type DataReaderListenerRequestedIncompatibleQosCallback = ::std::option::Option<
    unsafe extern "C" fn(
        reader: *mut DDS_DataReader,
        status: *const DDS_RequestedIncompatibleQosStatus,
    ),
>;
pub type DataReaderListenerSampleRejectedCallback = ::std::option::Option<
    unsafe extern "C" fn(reader: *mut DDS_DataReader, status: *const DDS_SampleRejectedStatus),
>;
pub type DataReaderListenerDataAvailableCallback =
    ::std::option::Option<unsafe extern "C" fn(reader: *mut DDS_DataReader)>;
pub type DataReaderListenerSubscriptionMatchedCallback = ::std::option::Option<
    unsafe extern "C" fn(reader: *mut DDS_DataReader, status: *const DDS_SubscriptionMatchedStatus),
>;
pub type DataReaderListenerSampleLostCallback = ::std::option::Option<
    unsafe extern "C" fn(reader: *mut DDS_DataReader, status: *const DDS_SampleLostStatus),
>;
pub type DataReaderListenerSampleArrivedCallback = ::std::option::Option<
    unsafe extern "C" fn(
        reader: *mut DDS_DataReader,
        sample: *mut ::std::os::raw::c_void,
        sampleInfo: *const DDS_SampleInfo,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DataReaderListener {
    pub listener: DDS_Listener,
    pub on_requested_deadline_missed: DataReaderListenerRequestedDeadlineMissedCallback,
    pub on_requested_incompatible_qos: DataReaderListenerRequestedIncompatibleQosCallback,
    pub on_sample_rejected: DataReaderListenerSampleRejectedCallback,
    pub on_sample_lost: DataReaderListenerSampleLostCallback,
    pub on_liveliness_changed: DataReaderListenerLivelinessChangedCallback,
    pub on_data_available: DataReaderListenerDataAvailableCallback,
    pub on_data_arrived: DataReaderListenerSampleArrivedCallback,
    pub on_subscription_matched: DataReaderListenerSubscriptionMatchedCallback,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_DataReaderListener"][::std::mem::size_of::<DDS_DataReaderListener>() - 72usize];
    ["Alignment of DDS_DataReaderListener"]
        [::std::mem::align_of::<DDS_DataReaderListener>() - 8usize];
    ["Offset of field: DDS_DataReaderListener::listener"]
        [::std::mem::offset_of!(DDS_DataReaderListener, listener) - 0usize];
    ["Offset of field: DDS_DataReaderListener::on_requested_deadline_missed"]
        [::std::mem::offset_of!(DDS_DataReaderListener, on_requested_deadline_missed) - 8usize];
    ["Offset of field: DDS_DataReaderListener::on_requested_incompatible_qos"]
        [::std::mem::offset_of!(DDS_DataReaderListener, on_requested_incompatible_qos) - 16usize];
    ["Offset of field: DDS_DataReaderListener::on_sample_rejected"]
        [::std::mem::offset_of!(DDS_DataReaderListener, on_sample_rejected) - 24usize];
    ["Offset of field: DDS_DataReaderListener::on_sample_lost"]
        [::std::mem::offset_of!(DDS_DataReaderListener, on_sample_lost) - 32usize];
    ["Offset of field: DDS_DataReaderListener::on_liveliness_changed"]
        [::std::mem::offset_of!(DDS_DataReaderListener, on_liveliness_changed) - 40usize];
    ["Offset of field: DDS_DataReaderListener::on_data_available"]
        [::std::mem::offset_of!(DDS_DataReaderListener, on_data_available) - 48usize];
    ["Offset of field: DDS_DataReaderListener::on_data_arrived"]
        [::std::mem::offset_of!(DDS_DataReaderListener, on_data_arrived) - 56usize];
    ["Offset of field: DDS_DataReaderListener::on_subscription_matched"]
        [::std::mem::offset_of!(DDS_DataReaderListener, on_subscription_matched) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ResourceLimitsQosPolicy {
    pub max_samples: DDS_Long,
    pub max_instances: DDS_Long,
    pub max_samples_per_instance: DDS_Long,
    pub initial_samples: DDS_Long,
    pub max_prealloc_sample_size: DDS_Long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_ResourceLimitsQosPolicy"]
        [::std::mem::size_of::<DDS_ResourceLimitsQosPolicy>() - 20usize];
    ["Alignment of DDS_ResourceLimitsQosPolicy"]
        [::std::mem::align_of::<DDS_ResourceLimitsQosPolicy>() - 4usize];
    ["Offset of field: DDS_ResourceLimitsQosPolicy::max_samples"]
        [::std::mem::offset_of!(DDS_ResourceLimitsQosPolicy, max_samples) - 0usize];
    ["Offset of field: DDS_ResourceLimitsQosPolicy::max_instances"]
        [::std::mem::offset_of!(DDS_ResourceLimitsQosPolicy, max_instances) - 4usize];
    ["Offset of field: DDS_ResourceLimitsQosPolicy::max_samples_per_instance"]
        [::std::mem::offset_of!(DDS_ResourceLimitsQosPolicy, max_samples_per_instance) - 8usize];
    ["Offset of field: DDS_ResourceLimitsQosPolicy::initial_samples"]
        [::std::mem::offset_of!(DDS_ResourceLimitsQosPolicy, initial_samples) - 12usize];
    ["Offset of field: DDS_ResourceLimitsQosPolicy::max_prealloc_sample_size"]
        [::std::mem::offset_of!(DDS_ResourceLimitsQosPolicy, max_prealloc_sample_size) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_TimeBasedFilterQosPolicy {
    pub minimum_separation: DDS_Duration_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_TimeBasedFilterQosPolicy"]
        [::std::mem::size_of::<DDS_TimeBasedFilterQosPolicy>() - 8usize];
    ["Alignment of DDS_TimeBasedFilterQosPolicy"]
        [::std::mem::align_of::<DDS_TimeBasedFilterQosPolicy>() - 4usize];
    ["Offset of field: DDS_TimeBasedFilterQosPolicy::minimum_separation"]
        [::std::mem::offset_of!(DDS_TimeBasedFilterQosPolicy, minimum_separation) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ReaderDataLifecycleQosPolicy {
    pub autopurge_nowriter_samples_delay: DDS_Duration_t,
    pub autopurge_disposed_samples_delay: DDS_Duration_t,
    pub purge_instance_with_not_read_samples: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_ReaderDataLifecycleQosPolicy"]
        [::std::mem::size_of::<DDS_ReaderDataLifecycleQosPolicy>() - 20usize];
    ["Alignment of DDS_ReaderDataLifecycleQosPolicy"]
        [::std::mem::align_of::<DDS_ReaderDataLifecycleQosPolicy>() - 4usize];
    ["Offset of field: DDS_ReaderDataLifecycleQosPolicy::autopurge_nowriter_samples_delay"][::std::mem::offset_of!(
        DDS_ReaderDataLifecycleQosPolicy,
        autopurge_nowriter_samples_delay
    )
        - 0usize];
    ["Offset of field: DDS_ReaderDataLifecycleQosPolicy::autopurge_disposed_samples_delay"][::std::mem::offset_of!(
        DDS_ReaderDataLifecycleQosPolicy,
        autopurge_disposed_samples_delay
    )
        - 8usize];
    ["Offset of field: DDS_ReaderDataLifecycleQosPolicy::purge_instance_with_not_read_samples"][::std::mem::offset_of!(
        DDS_ReaderDataLifecycleQosPolicy,
        purge_instance_with_not_read_samples
    )
        - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_TransportConfigQosPolicy {
    pub addresses: DDS_StringSeq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_TransportConfigQosPolicy"]
        [::std::mem::size_of::<DDS_TransportConfigQosPolicy>() - 72usize];
    ["Alignment of DDS_TransportConfigQosPolicy"]
        [::std::mem::align_of::<DDS_TransportConfigQosPolicy>() - 8usize];
    ["Offset of field: DDS_TransportConfigQosPolicy::addresses"]
        [::std::mem::offset_of!(DDS_TransportConfigQosPolicy, addresses) - 0usize];
};
pub const DDS_TypeConsistencyKind_DDS_DISALLOW_TYPE_COERCION: DDS_TypeConsistencyKind = 0;
pub const DDS_TypeConsistencyKind_DDS_ALLOW_TYPE_COERCION: DDS_TypeConsistencyKind = 1;
pub type DDS_TypeConsistencyKind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_TypeConsistencyEnforcementQosPolicy {
    pub kind: DDS_TypeConsistencyKind,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_TypeConsistencyEnforcementQosPolicy"]
        [::std::mem::size_of::<DDS_TypeConsistencyEnforcementQosPolicy>() - 4usize];
    ["Alignment of DDS_TypeConsistencyEnforcementQosPolicy"]
        [::std::mem::align_of::<DDS_TypeConsistencyEnforcementQosPolicy>() - 4usize];
    ["Offset of field: DDS_TypeConsistencyEnforcementQosPolicy::kind"]
        [::std::mem::offset_of!(DDS_TypeConsistencyEnforcementQosPolicy, kind) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_Property_t {
    pub name: *mut DDS_Char,
    pub value: *mut DDS_Char,
    pub propagate: DDS_Boolean,
    pub owned: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_Property_t"][::std::mem::size_of::<DDS_Property_t>() - 24usize];
    ["Alignment of DDS_Property_t"][::std::mem::align_of::<DDS_Property_t>() - 8usize];
    ["Offset of field: DDS_Property_t::name"]
        [::std::mem::offset_of!(DDS_Property_t, name) - 0usize];
    ["Offset of field: DDS_Property_t::value"]
        [::std::mem::offset_of!(DDS_Property_t, value) - 8usize];
    ["Offset of field: DDS_Property_t::propagate"]
        [::std::mem::offset_of!(DDS_Property_t, propagate) - 16usize];
    ["Offset of field: DDS_Property_t::owned"]
        [::std::mem::offset_of!(DDS_Property_t, owned) - 17usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_PropertySeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_Property_t,
    pub _discontiguousBuffer: *mut *mut DDS_Property_t,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_PropertySeq"][::std::mem::size_of::<DDS_PropertySeq>() - 72usize];
    ["Alignment of DDS_PropertySeq"][::std::mem::align_of::<DDS_PropertySeq>() - 8usize];
    ["Offset of field: DDS_PropertySeq::_owned"]
        [::std::mem::offset_of!(DDS_PropertySeq, _owned) - 0usize];
    ["Offset of field: DDS_PropertySeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_PropertySeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_PropertySeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_PropertySeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_PropertySeq::_maximum"]
        [::std::mem::offset_of!(DDS_PropertySeq, _maximum) - 24usize];
    ["Offset of field: DDS_PropertySeq::_length"]
        [::std::mem::offset_of!(DDS_PropertySeq, _length) - 28usize];
    ["Offset of field: DDS_PropertySeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_PropertySeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_PropertySeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_PropertySeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_PropertySeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_PropertySeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_PropertySeq::_mempool"]
        [::std::mem::offset_of!(DDS_PropertySeq, _mempool) - 56usize];
    ["Offset of field: DDS_PropertySeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_PropertySeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_is_initialized(self_: *const DDS_PropertySeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_set(
        self_: *mut DDS_PropertySeq,
        index: DDS_ULong,
        newValue: *const DDS_Property_t,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_initialize(self_: *mut DDS_PropertySeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_new(newMax: DDS_ULong) -> *mut DDS_PropertySeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_get_maximum(self_: *const DDS_PropertySeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_set_maximum(
        self_: *mut DDS_PropertySeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_get_length(self_: *const DDS_PropertySeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_set_length(
        self_: *mut DDS_PropertySeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_ensure_length(
        self_: *mut DDS_PropertySeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_get_reference(
        self_: *const DDS_PropertySeq,
        index: DDS_ULong,
    ) -> *mut DDS_Property_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_append(
        self_: *mut DDS_PropertySeq,
        newValue: *const DDS_Property_t,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_append_autosize(
        self_: *mut DDS_PropertySeq,
        newValue: *const DDS_Property_t,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_copy_no_alloc(
        self_: *mut DDS_PropertySeq,
        src: *const DDS_PropertySeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_copy(
        self_: *mut DDS_PropertySeq,
        src: *const DDS_PropertySeq,
    ) -> *mut DDS_PropertySeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_compare(
        self_: *const DDS_PropertySeq,
        src: *const DDS_PropertySeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_from_array(
        self_: *mut DDS_PropertySeq,
        srcArray: *const DDS_Property_t,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_to_array(
        self_: *const DDS_PropertySeq,
        dstArray: *mut DDS_Property_t,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_loan_contiguous(
        self_: *mut DDS_PropertySeq,
        buffer: *mut DDS_Property_t,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_loan_discontiguous(
        self_: *mut DDS_PropertySeq,
        buffer: *mut *mut DDS_Property_t,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_unloan(self_: *mut DDS_PropertySeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_get_contiguous_buffer(
        self_: *const DDS_PropertySeq,
    ) -> *mut DDS_Property_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_get_discontiguous_buffer(
        self_: *const DDS_PropertySeq,
    ) -> *mut *mut DDS_Property_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_get_reader_and_data_ptr(
        self_: *const DDS_PropertySeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_set_reader_and_data_ptr(
        self_: *mut DDS_PropertySeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_has_ownership(self_: *const DDS_PropertySeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_clear(self_: *mut DDS_PropertySeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_finalize(self_: *mut DDS_PropertySeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_shallow_copy(self_: *mut DDS_PropertySeq, other: *mut DDS_PropertySeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertySeq_initialize_ex(
        self_: *mut DDS_PropertySeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_BinaryProperty_t {
    pub name: *mut DDS_Char,
    pub value: DDS_OctetSeq,
    pub propagate: DDS_Boolean,
    pub owned: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_BinaryProperty_t"][::std::mem::size_of::<DDS_BinaryProperty_t>() - 88usize];
    ["Alignment of DDS_BinaryProperty_t"][::std::mem::align_of::<DDS_BinaryProperty_t>() - 8usize];
    ["Offset of field: DDS_BinaryProperty_t::name"]
        [::std::mem::offset_of!(DDS_BinaryProperty_t, name) - 0usize];
    ["Offset of field: DDS_BinaryProperty_t::value"]
        [::std::mem::offset_of!(DDS_BinaryProperty_t, value) - 8usize];
    ["Offset of field: DDS_BinaryProperty_t::propagate"]
        [::std::mem::offset_of!(DDS_BinaryProperty_t, propagate) - 80usize];
    ["Offset of field: DDS_BinaryProperty_t::owned"]
        [::std::mem::offset_of!(DDS_BinaryProperty_t, owned) - 81usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_BinaryPropertySeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_BinaryProperty_t,
    pub _discontiguousBuffer: *mut *mut DDS_BinaryProperty_t,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_BinaryPropertySeq"][::std::mem::size_of::<DDS_BinaryPropertySeq>() - 72usize];
    ["Alignment of DDS_BinaryPropertySeq"]
        [::std::mem::align_of::<DDS_BinaryPropertySeq>() - 8usize];
    ["Offset of field: DDS_BinaryPropertySeq::_owned"]
        [::std::mem::offset_of!(DDS_BinaryPropertySeq, _owned) - 0usize];
    ["Offset of field: DDS_BinaryPropertySeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_BinaryPropertySeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_BinaryPropertySeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_BinaryPropertySeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_BinaryPropertySeq::_maximum"]
        [::std::mem::offset_of!(DDS_BinaryPropertySeq, _maximum) - 24usize];
    ["Offset of field: DDS_BinaryPropertySeq::_length"]
        [::std::mem::offset_of!(DDS_BinaryPropertySeq, _length) - 28usize];
    ["Offset of field: DDS_BinaryPropertySeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_BinaryPropertySeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_BinaryPropertySeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_BinaryPropertySeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_BinaryPropertySeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_BinaryPropertySeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_BinaryPropertySeq::_mempool"]
        [::std::mem::offset_of!(DDS_BinaryPropertySeq, _mempool) - 56usize];
    ["Offset of field: DDS_BinaryPropertySeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_BinaryPropertySeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_is_initialized(self_: *const DDS_BinaryPropertySeq)
    -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_set(
        self_: *mut DDS_BinaryPropertySeq,
        index: DDS_ULong,
        newValue: *const DDS_BinaryProperty_t,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_initialize(self_: *mut DDS_BinaryPropertySeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_new(newMax: DDS_ULong) -> *mut DDS_BinaryPropertySeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_get_maximum(self_: *const DDS_BinaryPropertySeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_set_maximum(
        self_: *mut DDS_BinaryPropertySeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_get_length(self_: *const DDS_BinaryPropertySeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_set_length(
        self_: *mut DDS_BinaryPropertySeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_ensure_length(
        self_: *mut DDS_BinaryPropertySeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_get_reference(
        self_: *const DDS_BinaryPropertySeq,
        index: DDS_ULong,
    ) -> *mut DDS_BinaryProperty_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_append(
        self_: *mut DDS_BinaryPropertySeq,
        newValue: *const DDS_BinaryProperty_t,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_append_autosize(
        self_: *mut DDS_BinaryPropertySeq,
        newValue: *const DDS_BinaryProperty_t,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_copy_no_alloc(
        self_: *mut DDS_BinaryPropertySeq,
        src: *const DDS_BinaryPropertySeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_copy(
        self_: *mut DDS_BinaryPropertySeq,
        src: *const DDS_BinaryPropertySeq,
    ) -> *mut DDS_BinaryPropertySeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_compare(
        self_: *const DDS_BinaryPropertySeq,
        src: *const DDS_BinaryPropertySeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_from_array(
        self_: *mut DDS_BinaryPropertySeq,
        srcArray: *const DDS_BinaryProperty_t,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_to_array(
        self_: *const DDS_BinaryPropertySeq,
        dstArray: *mut DDS_BinaryProperty_t,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_loan_contiguous(
        self_: *mut DDS_BinaryPropertySeq,
        buffer: *mut DDS_BinaryProperty_t,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_loan_discontiguous(
        self_: *mut DDS_BinaryPropertySeq,
        buffer: *mut *mut DDS_BinaryProperty_t,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_unloan(self_: *mut DDS_BinaryPropertySeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_get_contiguous_buffer(
        self_: *const DDS_BinaryPropertySeq,
    ) -> *mut DDS_BinaryProperty_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_get_discontiguous_buffer(
        self_: *const DDS_BinaryPropertySeq,
    ) -> *mut *mut DDS_BinaryProperty_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_get_reader_and_data_ptr(
        self_: *const DDS_BinaryPropertySeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_set_reader_and_data_ptr(
        self_: *mut DDS_BinaryPropertySeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_has_ownership(self_: *const DDS_BinaryPropertySeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_clear(self_: *mut DDS_BinaryPropertySeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_finalize(self_: *mut DDS_BinaryPropertySeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_shallow_copy(
        self_: *mut DDS_BinaryPropertySeq,
        other: *mut DDS_BinaryPropertySeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BinaryPropertySeq_initialize_ex(
        self_: *mut DDS_BinaryPropertySeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_PropertyQosPolicy {
    pub value: DDS_PropertySeq,
    pub binary_value: DDS_BinaryPropertySeq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_PropertyQosPolicy"][::std::mem::size_of::<DDS_PropertyQosPolicy>() - 144usize];
    ["Alignment of DDS_PropertyQosPolicy"]
        [::std::mem::align_of::<DDS_PropertyQosPolicy>() - 8usize];
    ["Offset of field: DDS_PropertyQosPolicy::value"]
        [::std::mem::offset_of!(DDS_PropertyQosPolicy, value) - 0usize];
    ["Offset of field: DDS_PropertyQosPolicy::binary_value"]
        [::std::mem::offset_of!(DDS_PropertyQosPolicy, binary_value) - 72usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertyQos_AppendProperty(
        propertyQos: *mut DDS_PropertyQosPolicy,
        name: *const DDS_Char,
        value: *const DDS_Char,
        propagate: DDS_Boolean,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertyQos_AppendBinaryProperty(
        propertyQos: *mut DDS_PropertyQosPolicy,
        name: *const DDS_Char,
        value: *const DDS_OctetSeq,
        propagate: DDS_Boolean,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertyQos_RemoveProperty(
        propertyQos: *mut DDS_PropertyQosPolicy,
        name: *const DDS_Char,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PropertyQos_RemoveBinaryProperty(
        propertyQos: *mut DDS_PropertyQosPolicy,
        name: *const DDS_Char,
    ) -> DDS_Boolean;
}
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_ACKNACK: DDS_RTPS_MESSAGE_KIND = 0;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_NACK: DDS_RTPS_MESSAGE_KIND = 1;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_GAP: DDS_RTPS_MESSAGE_KIND = 2;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_INFO_TS: DDS_RTPS_MESSAGE_KIND = 3;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_HEARTBEAT: DDS_RTPS_MESSAGE_KIND = 4;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_INFO_SRC: DDS_RTPS_MESSAGE_KIND = 5;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_INFO_REPLY_IP4: DDS_RTPS_MESSAGE_KIND = 6;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_INFO_DST: DDS_RTPS_MESSAGE_KIND = 7;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_INFO_REPLY: DDS_RTPS_MESSAGE_KIND = 8;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_NACK_FRAG: DDS_RTPS_MESSAGE_KIND = 9;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_HEARTBEAT_FRAG: DDS_RTPS_MESSAGE_KIND = 10;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_DATA: DDS_RTPS_MESSAGE_KIND = 11;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_RESEND_DATA: DDS_RTPS_MESSAGE_KIND = 12;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_DATA_FRAG: DDS_RTPS_MESSAGE_KIND = 13;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_RESEND_DATA_FRAG: DDS_RTPS_MESSAGE_KIND = 14;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_ACKNACK_BATCH: DDS_RTPS_MESSAGE_KIND = 15;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_DATA_BATCH: DDS_RTPS_MESSAGE_KIND = 16;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_RESEND_DATA_BATCH: DDS_RTPS_MESSAGE_KIND = 17;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_HEARTBEAT_BATCH: DDS_RTPS_MESSAGE_KIND = 18;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_UNKNOWN_SUBMSGKIND: DDS_RTPS_MESSAGE_KIND = 19;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_UNKNOWN_WRITER_DATA: DDS_RTPS_MESSAGE_KIND = 20;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_DUPLICATE_DATA: DDS_RTPS_MESSAGE_KIND = 21;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_MAX_SAMPLES_LIMITS_DATA: DDS_RTPS_MESSAGE_KIND = 22;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_MAX_INSTANCES_LIMITS_DATA: DDS_RTPS_MESSAGE_KIND = 23;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_MAX_SAMPLES_PER_INSTANCE_LIMITS_DATA:
    DDS_RTPS_MESSAGE_KIND = 24;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_FILTERED_DATA: DDS_RTPS_MESSAGE_KIND = 25;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_EARLY_TS_DATA: DDS_RTPS_MESSAGE_KIND = 26;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_DELIVERED_DATA: DDS_RTPS_MESSAGE_KIND = 27;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_NO_OWNERSHIP_DATA: DDS_RTPS_MESSAGE_KIND = 28;
pub const DDS_RTPS_MESSAGE_KIND_RTPS_MSG_INVALID: DDS_RTPS_MESSAGE_KIND = 29;
pub type DDS_RTPS_MESSAGE_KIND = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_LinkQualityEvaluationInfo {
    pub version: DDS_ULong,
    pub writer_id: [DDS_Octet; 16usize],
    pub reader_id: [DDS_Octet; 16usize],
    pub rtps_smsg_recv_count: [DDS_ULongLong; 30usize],
    pub sample_count: DDS_ULongLong,
    pub sample_size: DDS_ULongLong,
    pub latency_infos: DDS_LongSeq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_LinkQualityEvaluationInfo"]
        [::std::mem::size_of::<DDS_LinkQualityEvaluationInfo>() - 368usize];
    ["Alignment of DDS_LinkQualityEvaluationInfo"]
        [::std::mem::align_of::<DDS_LinkQualityEvaluationInfo>() - 8usize];
    ["Offset of field: DDS_LinkQualityEvaluationInfo::version"]
        [::std::mem::offset_of!(DDS_LinkQualityEvaluationInfo, version) - 0usize];
    ["Offset of field: DDS_LinkQualityEvaluationInfo::writer_id"]
        [::std::mem::offset_of!(DDS_LinkQualityEvaluationInfo, writer_id) - 4usize];
    ["Offset of field: DDS_LinkQualityEvaluationInfo::reader_id"]
        [::std::mem::offset_of!(DDS_LinkQualityEvaluationInfo, reader_id) - 20usize];
    ["Offset of field: DDS_LinkQualityEvaluationInfo::rtps_smsg_recv_count"]
        [::std::mem::offset_of!(DDS_LinkQualityEvaluationInfo, rtps_smsg_recv_count) - 40usize];
    ["Offset of field: DDS_LinkQualityEvaluationInfo::sample_count"]
        [::std::mem::offset_of!(DDS_LinkQualityEvaluationInfo, sample_count) - 280usize];
    ["Offset of field: DDS_LinkQualityEvaluationInfo::sample_size"]
        [::std::mem::offset_of!(DDS_LinkQualityEvaluationInfo, sample_size) - 288usize];
    ["Offset of field: DDS_LinkQualityEvaluationInfo::latency_infos"]
        [::std::mem::offset_of!(DDS_LinkQualityEvaluationInfo, latency_infos) - 296usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_QualityEvaluationQosPolicy {
    pub period: DDS_Duration_t,
    pub batch: DDS_Long,
    pub adjust_time: DDS_Boolean,
    pub initial_samples: DDS_ULong,
    pub max_samples: DDS_ULong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_QualityEvaluationQosPolicy"]
        [::std::mem::size_of::<DDS_QualityEvaluationQosPolicy>() - 24usize];
    ["Alignment of DDS_QualityEvaluationQosPolicy"]
        [::std::mem::align_of::<DDS_QualityEvaluationQosPolicy>() - 4usize];
    ["Offset of field: DDS_QualityEvaluationQosPolicy::period"]
        [::std::mem::offset_of!(DDS_QualityEvaluationQosPolicy, period) - 0usize];
    ["Offset of field: DDS_QualityEvaluationQosPolicy::batch"]
        [::std::mem::offset_of!(DDS_QualityEvaluationQosPolicy, batch) - 8usize];
    ["Offset of field: DDS_QualityEvaluationQosPolicy::adjust_time"]
        [::std::mem::offset_of!(DDS_QualityEvaluationQosPolicy, adjust_time) - 12usize];
    ["Offset of field: DDS_QualityEvaluationQosPolicy::initial_samples"]
        [::std::mem::offset_of!(DDS_QualityEvaluationQosPolicy, initial_samples) - 16usize];
    ["Offset of field: DDS_QualityEvaluationQosPolicy::max_samples"]
        [::std::mem::offset_of!(DDS_QualityEvaluationQosPolicy, max_samples) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DataReaderQos {
    pub durability: DDS_DurabilityQosPolicy,
    pub deadline: DDS_DeadlineQosPolicy,
    pub latency_budget: DDS_LatencyBudgetQosPolicy,
    pub liveliness: DDS_LivelinessQosPolicy,
    pub reliability: DDS_ReliabilityQosPolicy,
    pub destination_order: DDS_DestinationOrderQosPolicy,
    pub history: DDS_HistoryQosPolicy,
    pub resource_limits: DDS_ResourceLimitsQosPolicy,
    pub user_data: DDS_UserDataQosPolicy,
    pub ownership: DDS_OwnershipQosPolicy,
    pub time_based_filter: DDS_TimeBasedFilterQosPolicy,
    pub reader_data_lifecycle: DDS_ReaderDataLifecycleQosPolicy,
    pub type_compatibility: DDS_TypeConsistencyEnforcementQosPolicy,
    pub receive_addresses: DDS_TransportConfigQosPolicy,
    pub property: DDS_PropertyQosPolicy,
    pub breakpoint_resume: ZR_BOOLEAN,
    pub quality_evaluation: DDS_QualityEvaluationQosPolicy,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_DataReaderQos"][::std::mem::size_of::<DDS_DataReaderQos>() - 440usize];
    ["Alignment of DDS_DataReaderQos"][::std::mem::align_of::<DDS_DataReaderQos>() - 8usize];
    ["Offset of field: DDS_DataReaderQos::durability"]
        [::std::mem::offset_of!(DDS_DataReaderQos, durability) - 0usize];
    ["Offset of field: DDS_DataReaderQos::deadline"]
        [::std::mem::offset_of!(DDS_DataReaderQos, deadline) - 4usize];
    ["Offset of field: DDS_DataReaderQos::latency_budget"]
        [::std::mem::offset_of!(DDS_DataReaderQos, latency_budget) - 12usize];
    ["Offset of field: DDS_DataReaderQos::liveliness"]
        [::std::mem::offset_of!(DDS_DataReaderQos, liveliness) - 20usize];
    ["Offset of field: DDS_DataReaderQos::reliability"]
        [::std::mem::offset_of!(DDS_DataReaderQos, reliability) - 32usize];
    ["Offset of field: DDS_DataReaderQos::destination_order"]
        [::std::mem::offset_of!(DDS_DataReaderQos, destination_order) - 44usize];
    ["Offset of field: DDS_DataReaderQos::history"]
        [::std::mem::offset_of!(DDS_DataReaderQos, history) - 48usize];
    ["Offset of field: DDS_DataReaderQos::resource_limits"]
        [::std::mem::offset_of!(DDS_DataReaderQos, resource_limits) - 56usize];
    ["Offset of field: DDS_DataReaderQos::user_data"]
        [::std::mem::offset_of!(DDS_DataReaderQos, user_data) - 80usize];
    ["Offset of field: DDS_DataReaderQos::ownership"]
        [::std::mem::offset_of!(DDS_DataReaderQos, ownership) - 152usize];
    ["Offset of field: DDS_DataReaderQos::time_based_filter"]
        [::std::mem::offset_of!(DDS_DataReaderQos, time_based_filter) - 156usize];
    ["Offset of field: DDS_DataReaderQos::reader_data_lifecycle"]
        [::std::mem::offset_of!(DDS_DataReaderQos, reader_data_lifecycle) - 164usize];
    ["Offset of field: DDS_DataReaderQos::type_compatibility"]
        [::std::mem::offset_of!(DDS_DataReaderQos, type_compatibility) - 184usize];
    ["Offset of field: DDS_DataReaderQos::receive_addresses"]
        [::std::mem::offset_of!(DDS_DataReaderQos, receive_addresses) - 192usize];
    ["Offset of field: DDS_DataReaderQos::property"]
        [::std::mem::offset_of!(DDS_DataReaderQos, property) - 264usize];
    ["Offset of field: DDS_DataReaderQos::breakpoint_resume"]
        [::std::mem::offset_of!(DDS_DataReaderQos, breakpoint_resume) - 408usize];
    ["Offset of field: DDS_DataReaderQos::quality_evaluation"]
        [::std::mem::offset_of!(DDS_DataReaderQos, quality_evaluation) - 412usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StatusCondition_get_trigger_value(
        conditon: *const DDS_StatusCondition,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StatusCondition_set_enabled_statuses(
        conditon: *mut DDS_StatusCondition,
        enabledStatuses: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StatusCondition_get_enabled_statuses(
        conditon: *const DDS_StatusCondition,
    ) -> DDS_StatusKindMask;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StatusCondition_get_entity(condition: *mut DDS_StatusCondition) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_GuardCondition_new() -> *mut DDS_GuardCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_GuardCondition_delete(condition: *mut DDS_GuardCondition);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_GuardCondition_get_trigger_value(conditon: *const DDS_GuardCondition)
    -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_GuardCondition_set_trigger_value(
        conditon: *mut DDS_GuardCondition,
        value: DDS_Boolean,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ReadCondition_get_trigger_value(conditon: *const DDS_ReadCondition) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ReadCondition_get_datareader(
        condition: *mut DDS_ReadCondition,
    ) -> *mut DDS_DataReader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ReadCondition_get_sample_state_mask(
        condition: *const DDS_ReadCondition,
    ) -> DDS_SampleStateMask;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ReadCondition_get_view_state_mask(
        condition: *const DDS_ReadCondition,
    ) -> DDS_ViewStateMask;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ReadCondition_get_instance_state_mask(
        condition: *const DDS_ReadCondition,
    ) -> DDS_InstanceStateMask;
}
pub type ConditionPtr = *mut DDS_Condition;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ConditionSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut ConditionPtr,
    pub _discontiguousBuffer: *mut *mut ConditionPtr,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_ConditionSeq"][::std::mem::size_of::<DDS_ConditionSeq>() - 72usize];
    ["Alignment of DDS_ConditionSeq"][::std::mem::align_of::<DDS_ConditionSeq>() - 8usize];
    ["Offset of field: DDS_ConditionSeq::_owned"]
        [::std::mem::offset_of!(DDS_ConditionSeq, _owned) - 0usize];
    ["Offset of field: DDS_ConditionSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_ConditionSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_ConditionSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_ConditionSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_ConditionSeq::_maximum"]
        [::std::mem::offset_of!(DDS_ConditionSeq, _maximum) - 24usize];
    ["Offset of field: DDS_ConditionSeq::_length"]
        [::std::mem::offset_of!(DDS_ConditionSeq, _length) - 28usize];
    ["Offset of field: DDS_ConditionSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_ConditionSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_ConditionSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_ConditionSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_ConditionSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_ConditionSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_ConditionSeq::_mempool"]
        [::std::mem::offset_of!(DDS_ConditionSeq, _mempool) - 56usize];
    ["Offset of field: DDS_ConditionSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_ConditionSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_is_initialized(self_: *const DDS_ConditionSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_set(
        self_: *mut DDS_ConditionSeq,
        index: DDS_ULong,
        newValue: *const ConditionPtr,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_initialize(self_: *mut DDS_ConditionSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_new(newMax: DDS_ULong) -> *mut DDS_ConditionSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_get_maximum(self_: *const DDS_ConditionSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_set_maximum(
        self_: *mut DDS_ConditionSeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_get_length(self_: *const DDS_ConditionSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_set_length(
        self_: *mut DDS_ConditionSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_ensure_length(
        self_: *mut DDS_ConditionSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_get_reference(
        self_: *const DDS_ConditionSeq,
        index: DDS_ULong,
    ) -> *mut ConditionPtr;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_append(
        self_: *mut DDS_ConditionSeq,
        newValue: *const ConditionPtr,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_append_autosize(
        self_: *mut DDS_ConditionSeq,
        newValue: *const ConditionPtr,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_copy_no_alloc(
        self_: *mut DDS_ConditionSeq,
        src: *const DDS_ConditionSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_copy(
        self_: *mut DDS_ConditionSeq,
        src: *const DDS_ConditionSeq,
    ) -> *mut DDS_ConditionSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_compare(
        self_: *const DDS_ConditionSeq,
        src: *const DDS_ConditionSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_from_array(
        self_: *mut DDS_ConditionSeq,
        srcArray: *const ConditionPtr,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_to_array(
        self_: *const DDS_ConditionSeq,
        dstArray: *mut ConditionPtr,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_loan_contiguous(
        self_: *mut DDS_ConditionSeq,
        buffer: *mut ConditionPtr,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_loan_discontiguous(
        self_: *mut DDS_ConditionSeq,
        buffer: *mut *mut ConditionPtr,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_unloan(self_: *mut DDS_ConditionSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_get_contiguous_buffer(
        self_: *const DDS_ConditionSeq,
    ) -> *mut ConditionPtr;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_get_discontiguous_buffer(
        self_: *const DDS_ConditionSeq,
    ) -> *mut *mut ConditionPtr;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_get_reader_and_data_ptr(
        self_: *const DDS_ConditionSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_set_reader_and_data_ptr(
        self_: *mut DDS_ConditionSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_has_ownership(self_: *const DDS_ConditionSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_clear(self_: *mut DDS_ConditionSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_finalize(self_: *mut DDS_ConditionSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_shallow_copy(
        self_: *mut DDS_ConditionSeq,
        other: *mut DDS_ConditionSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ConditionSeq_initialize_ex(
        self_: *mut DDS_ConditionSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Entity_get_instance_handle(self_: *const DDS_Entity) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Entity_get_statuscondition(self_: *mut DDS_Entity) -> *mut DDS_StatusCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Entity_get_status_changes(self_: *mut DDS_Entity) -> DDS_UShort;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_InconsistentTopicStatus {
    pub total_count: DDS_ULong,
    pub total_count_change: DDS_ULong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_InconsistentTopicStatus"]
        [::std::mem::size_of::<DDS_InconsistentTopicStatus>() - 8usize];
    ["Alignment of DDS_InconsistentTopicStatus"]
        [::std::mem::align_of::<DDS_InconsistentTopicStatus>() - 4usize];
    ["Offset of field: DDS_InconsistentTopicStatus::total_count"]
        [::std::mem::offset_of!(DDS_InconsistentTopicStatus, total_count) - 0usize];
    ["Offset of field: DDS_InconsistentTopicStatus::total_count_change"]
        [::std::mem::offset_of!(DDS_InconsistentTopicStatus, total_count_change) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_TransportPriorityQosPolicy {
    pub value: DDS_Long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_TransportPriorityQosPolicy"]
        [::std::mem::size_of::<DDS_TransportPriorityQosPolicy>() - 4usize];
    ["Alignment of DDS_TransportPriorityQosPolicy"]
        [::std::mem::align_of::<DDS_TransportPriorityQosPolicy>() - 4usize];
    ["Offset of field: DDS_TransportPriorityQosPolicy::value"]
        [::std::mem::offset_of!(DDS_TransportPriorityQosPolicy, value) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_TopicQos {
    pub topic_data: DDS_TopicDataQosPolicy,
    pub durability: DDS_DurabilityQosPolicy,
    pub durability_service: DDS_DurabilityServiceQosPolicy,
    pub deadline: DDS_DeadlineQosPolicy,
    pub latency_budget: DDS_LatencyBudgetQosPolicy,
    pub liveliness: DDS_LivelinessQosPolicy,
    pub reliability: DDS_ReliabilityQosPolicy,
    pub destination_order: DDS_DestinationOrderQosPolicy,
    pub history: DDS_HistoryQosPolicy,
    pub resource_limits: DDS_ResourceLimitsQosPolicy,
    pub transport_priority: DDS_TransportPriorityQosPolicy,
    pub lifespan: DDS_LifespanQosPolicy,
    pub ownership: DDS_OwnershipQosPolicy,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_TopicQos"][::std::mem::size_of::<DDS_TopicQos>() - 192usize];
    ["Alignment of DDS_TopicQos"][::std::mem::align_of::<DDS_TopicQos>() - 8usize];
    ["Offset of field: DDS_TopicQos::topic_data"]
        [::std::mem::offset_of!(DDS_TopicQos, topic_data) - 0usize];
    ["Offset of field: DDS_TopicQos::durability"]
        [::std::mem::offset_of!(DDS_TopicQos, durability) - 72usize];
    ["Offset of field: DDS_TopicQos::durability_service"]
        [::std::mem::offset_of!(DDS_TopicQos, durability_service) - 76usize];
    ["Offset of field: DDS_TopicQos::deadline"]
        [::std::mem::offset_of!(DDS_TopicQos, deadline) - 104usize];
    ["Offset of field: DDS_TopicQos::latency_budget"]
        [::std::mem::offset_of!(DDS_TopicQos, latency_budget) - 112usize];
    ["Offset of field: DDS_TopicQos::liveliness"]
        [::std::mem::offset_of!(DDS_TopicQos, liveliness) - 120usize];
    ["Offset of field: DDS_TopicQos::reliability"]
        [::std::mem::offset_of!(DDS_TopicQos, reliability) - 132usize];
    ["Offset of field: DDS_TopicQos::destination_order"]
        [::std::mem::offset_of!(DDS_TopicQos, destination_order) - 144usize];
    ["Offset of field: DDS_TopicQos::history"]
        [::std::mem::offset_of!(DDS_TopicQos, history) - 148usize];
    ["Offset of field: DDS_TopicQos::resource_limits"]
        [::std::mem::offset_of!(DDS_TopicQos, resource_limits) - 156usize];
    ["Offset of field: DDS_TopicQos::transport_priority"]
        [::std::mem::offset_of!(DDS_TopicQos, transport_priority) - 176usize];
    ["Offset of field: DDS_TopicQos::lifespan"]
        [::std::mem::offset_of!(DDS_TopicQos, lifespan) - 180usize];
    ["Offset of field: DDS_TopicQos::ownership"]
        [::std::mem::offset_of!(DDS_TopicQos, ownership) - 188usize];
};
pub type TopicListenerInconsistentTopicCallback = ::std::option::Option<
    unsafe extern "C" fn(topic: *mut DDS_Topic, status: *const DDS_InconsistentTopicStatus),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_TopicListener {
    pub listener: DDS_Listener,
    pub on_inconsistent_topic: TopicListenerInconsistentTopicCallback,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_TopicListener"][::std::mem::size_of::<DDS_TopicListener>() - 16usize];
    ["Alignment of DDS_TopicListener"][::std::mem::align_of::<DDS_TopicListener>() - 8usize];
    ["Offset of field: DDS_TopicListener::listener"]
        [::std::mem::offset_of!(DDS_TopicListener, listener) - 0usize];
    ["Offset of field: DDS_TopicListener::on_inconsistent_topic"]
        [::std::mem::offset_of!(DDS_TopicListener, on_inconsistent_topic) - 8usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut BUILTIN_PARTICIPANT_TOPIC_NAME: *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut BUILTIN_PUBLICATION_TOPIC_NAME: *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut BUILTIN_SUBSCRIPTION_TOPIC_NAME: *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicDescription_get_name(self_: *const DDS_TopicDescription) -> *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicDescription_get_type_name(
        self_: *const DDS_TopicDescription,
    ) -> *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicDescription_get_participant(
        self_: *const DDS_TopicDescription,
    ) -> *mut DDS_DomainParticipant;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Topic_get_inconsistent_topic_status(
        self_: *mut DDS_Topic,
        status: *mut DDS_InconsistentTopicStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Topic_set_qos(
        self_: *mut DDS_Topic,
        qoslist: *const DDS_TopicQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Topic_get_qos(self_: *mut DDS_Topic, qos: *mut DDS_TopicQos) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Topic_get_listener(self_: *mut DDS_Topic) -> *mut DDS_TopicListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Topic_set_listener(
        self_: *mut DDS_Topic,
        listener: *mut DDS_TopicListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Topic_as_entity(topic: *mut DDS_Topic) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Topic_set_qos_with_profile(
        self_: *mut DDS_Topic,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZRDynamicDataProperty_t {
    pub _initialMemberCount: DDS_Long,
    pub _maxMemberCount: DDS_Long,
    pub _incrementCount: DDS_Long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZRDynamicDataProperty_t"][::std::mem::size_of::<ZRDynamicDataProperty_t>() - 12usize];
    ["Alignment of ZRDynamicDataProperty_t"]
        [::std::mem::align_of::<ZRDynamicDataProperty_t>() - 4usize];
    ["Offset of field: ZRDynamicDataProperty_t::_initialMemberCount"]
        [::std::mem::offset_of!(ZRDynamicDataProperty_t, _initialMemberCount) - 0usize];
    ["Offset of field: ZRDynamicDataProperty_t::_maxMemberCount"]
        [::std::mem::offset_of!(ZRDynamicDataProperty_t, _maxMemberCount) - 4usize];
    ["Offset of field: ZRDynamicDataProperty_t::_incrementCount"]
        [::std::mem::offset_of!(ZRDynamicDataProperty_t, _incrementCount) - 8usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static DEFAULT_DYNAMIC_DATA_PROPERTY: ZRDynamicDataProperty_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZRDynamicDataMemberInfo {
    pub _memberId: DDS_Long,
    pub _memberName: *const DDS_Char,
    pub _memberKind: TCTypeKind,
    pub _elementCount: DDS_ULong,
    pub _elementKind: TCTypeKind,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZRDynamicDataMemberInfo"][::std::mem::size_of::<ZRDynamicDataMemberInfo>() - 32usize];
    ["Alignment of ZRDynamicDataMemberInfo"]
        [::std::mem::align_of::<ZRDynamicDataMemberInfo>() - 8usize];
    ["Offset of field: ZRDynamicDataMemberInfo::_memberId"]
        [::std::mem::offset_of!(ZRDynamicDataMemberInfo, _memberId) - 0usize];
    ["Offset of field: ZRDynamicDataMemberInfo::_memberName"]
        [::std::mem::offset_of!(ZRDynamicDataMemberInfo, _memberName) - 8usize];
    ["Offset of field: ZRDynamicDataMemberInfo::_memberKind"]
        [::std::mem::offset_of!(ZRDynamicDataMemberInfo, _memberKind) - 16usize];
    ["Offset of field: ZRDynamicDataMemberInfo::_elementCount"]
        [::std::mem::offset_of!(ZRDynamicDataMemberInfo, _elementCount) - 20usize];
    ["Offset of field: ZRDynamicDataMemberInfo::_elementKind"]
        [::std::mem::offset_of!(ZRDynamicDataMemberInfo, _elementKind) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZRDynamicDataMember {
    pub _memberType: TCTypeKind,
    pub _isKey: DDS_Boolean,
    pub _memberSize: DDS_Long,
    pub _variablePartSize: DDS_Long,
    pub _relatedData: *mut ZRDynamicData,
    pub _fixedPart: [DDS_Char; 64usize],
    pub _variablePart: *mut DDS_Char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZRDynamicDataMember"][::std::mem::size_of::<ZRDynamicDataMember>() - 96usize];
    ["Alignment of ZRDynamicDataMember"][::std::mem::align_of::<ZRDynamicDataMember>() - 8usize];
    ["Offset of field: ZRDynamicDataMember::_memberType"]
        [::std::mem::offset_of!(ZRDynamicDataMember, _memberType) - 0usize];
    ["Offset of field: ZRDynamicDataMember::_isKey"]
        [::std::mem::offset_of!(ZRDynamicDataMember, _isKey) - 4usize];
    ["Offset of field: ZRDynamicDataMember::_memberSize"]
        [::std::mem::offset_of!(ZRDynamicDataMember, _memberSize) - 8usize];
    ["Offset of field: ZRDynamicDataMember::_variablePartSize"]
        [::std::mem::offset_of!(ZRDynamicDataMember, _variablePartSize) - 12usize];
    ["Offset of field: ZRDynamicDataMember::_relatedData"]
        [::std::mem::offset_of!(ZRDynamicDataMember, _relatedData) - 16usize];
    ["Offset of field: ZRDynamicDataMember::_fixedPart"]
        [::std::mem::offset_of!(ZRDynamicDataMember, _fixedPart) - 24usize];
    ["Offset of field: ZRDynamicDataMember::_variablePart"]
        [::std::mem::offset_of!(ZRDynamicDataMember, _variablePart) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZRDynamicDataBuffer {
    pub _membersBuffer: *mut ZRDynamicDataMember,
    pub _usedCount: DDS_Long,
    pub _ownedCount: DDS_Long,
    pub _ownedBuffer: DDS_Boolean,
    pub _properties: ZRDynamicDataProperty_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZRDynamicDataBuffer"][::std::mem::size_of::<ZRDynamicDataBuffer>() - 32usize];
    ["Alignment of ZRDynamicDataBuffer"][::std::mem::align_of::<ZRDynamicDataBuffer>() - 8usize];
    ["Offset of field: ZRDynamicDataBuffer::_membersBuffer"]
        [::std::mem::offset_of!(ZRDynamicDataBuffer, _membersBuffer) - 0usize];
    ["Offset of field: ZRDynamicDataBuffer::_usedCount"]
        [::std::mem::offset_of!(ZRDynamicDataBuffer, _usedCount) - 8usize];
    ["Offset of field: ZRDynamicDataBuffer::_ownedCount"]
        [::std::mem::offset_of!(ZRDynamicDataBuffer, _ownedCount) - 12usize];
    ["Offset of field: ZRDynamicDataBuffer::_ownedBuffer"]
        [::std::mem::offset_of!(ZRDynamicDataBuffer, _ownedBuffer) - 16usize];
    ["Offset of field: ZRDynamicDataBuffer::_properties"]
        [::std::mem::offset_of!(ZRDynamicDataBuffer, _properties) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZRDynamicData {
    pub _type: *const TypeCodeHeader,
    pub _init: DDS_Boolean,
    pub _ownedType: DDS_Boolean,
    pub _boundMember: DDS_Boolean,
    pub _boundIndex: DDS_Long,
    pub _parent: *mut ZRDynamicData,
    pub _buffer: ZRDynamicDataBuffer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZRDynamicData"][::std::mem::size_of::<ZRDynamicData>() - 56usize];
    ["Alignment of ZRDynamicData"][::std::mem::align_of::<ZRDynamicData>() - 8usize];
    ["Offset of field: ZRDynamicData::_type"]
        [::std::mem::offset_of!(ZRDynamicData, _type) - 0usize];
    ["Offset of field: ZRDynamicData::_init"]
        [::std::mem::offset_of!(ZRDynamicData, _init) - 8usize];
    ["Offset of field: ZRDynamicData::_ownedType"]
        [::std::mem::offset_of!(ZRDynamicData, _ownedType) - 9usize];
    ["Offset of field: ZRDynamicData::_boundMember"]
        [::std::mem::offset_of!(ZRDynamicData, _boundMember) - 10usize];
    ["Offset of field: ZRDynamicData::_boundIndex"]
        [::std::mem::offset_of!(ZRDynamicData, _boundIndex) - 12usize];
    ["Offset of field: ZRDynamicData::_parent"]
        [::std::mem::offset_of!(ZRDynamicData, _parent) - 16usize];
    ["Offset of field: ZRDynamicData::_buffer"]
        [::std::mem::offset_of!(ZRDynamicData, _buffer) - 24usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataInitialize(
        self_: *mut ZRDynamicData,
        type_: *const TypeCodeHeader,
        property: *const ZRDynamicDataProperty_t,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataIsValid(self_: *const ZRDynamicData) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataNew(
        type_: *const TypeCodeHeader,
        property: *const ZRDynamicDataProperty_t,
    ) -> *mut ZRDynamicData;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataFinalize(self_: *mut ZRDynamicData);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDelete(self_: *mut ZRDynamicData);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataCopy(
        self_: *mut ZRDynamicData,
        src: *const ZRDynamicData,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataEqual(
        self_: *const ZRDynamicData,
        other: *const ZRDynamicData,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataClearAllMembers(self_: *mut ZRDynamicData) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataClearMember(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataEnsureBufferSize(
        self_: *mut ZRDynamicData,
        requiredSize: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataPrint(
        self_: *const ZRDynamicData,
        maxLength: DDS_ULong,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetPrintableString(self_: *const ZRDynamicData) -> *mut DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataReleasePrintableString(buffer: *mut DDS_Char);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSerialize(
        self_: *const ZRDynamicData,
        cdr: *mut CDRSerializer,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDeserialize(
        self_: *mut ZRDynamicData,
        cdr: *mut CDRDeserializer,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetMaxSerializeSize(
        tc: *const TypeCodeHeader,
        offset: DDS_Long,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetSerializeSize(self_: *const ZRDynamicData, offset: DDS_Long)
    -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSerializeKey(
        self_: *const ZRDynamicData,
        cdr: *mut CDRSerializer,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDeserializeKey(
        self_: *mut ZRDynamicData,
        cdr: *mut CDRDeserializer,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetMaxSerializeKeySize(
        tc: *const TypeCodeHeader,
        offset: DDS_Long,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetSerializeKeySize(
        self_: *const ZRDynamicData,
        offset: DDS_Long,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataBindType(
        self_: *mut ZRDynamicData,
        type_: *const TypeCodeHeader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataUnbindType(self_: *mut ZRDynamicData) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataBindComplexMember(
        self_: *const ZRDynamicData,
        memberName: *const DDS_Char,
        memberID: DDS_Long,
    ) -> *mut ZRDynamicData;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataUnbindComplexMember(self_: *mut ZRDynamicData) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetType(self_: *const ZRDynamicData) -> *const TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetTypeKind(self_: *const ZRDynamicData) -> TCTypeKind;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetMemberCount(self_: *const ZRDynamicData) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataMemberExists(
        self_: *const ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataMemberExistsInType(
        self_: *const ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetMemberInfo(
        self_: *const ZRDynamicData,
        info: *mut ZRDynamicDataMemberInfo,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetMemberInfoByIndex(
        self_: *const ZRDynamicData,
        info: *mut ZRDynamicDataMemberInfo,
        index: DDS_ULong,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetMemberType(
        self_: *const ZRDynamicData,
        type_: *mut *const TypeCodeHeader,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataIsMemberKey(
        self_: *const ZRDynamicData,
        isKey: *mut DDS_Boolean,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetParentData(
        self_: *const ZRDynamicData,
        parentData: *mut *mut ZRDynamicData,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetParentDataConst(
        self_: *const ZRDynamicData,
        parentData: *mut *const ZRDynamicData,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetInt8(
        self_: *const ZRDynamicData,
        value: *mut DDS_Char,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetUInt8(
        self_: *const ZRDynamicData,
        value: *mut DDS_Octet,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetInt16(
        self_: *const ZRDynamicData,
        value: *mut DDS_Short,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetUInt16(
        self_: *const ZRDynamicData,
        value: *mut DDS_UShort,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetInt32(
        self_: *const ZRDynamicData,
        value: *mut DDS_Long,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetUInt32(
        self_: *const ZRDynamicData,
        value: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetEnum(
        self_: *const ZRDynamicData,
        value: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetEnumString(
        self_: *const ZRDynamicData,
        enumStr: *mut *const DDS_Char,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetFloat32(
        self_: *const ZRDynamicData,
        value: *mut DDS_Float,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetDouble64(
        self_: *const ZRDynamicData,
        value: *mut DDS_Double,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetBoolean(
        self_: *const ZRDynamicData,
        value: *mut DDS_Boolean,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetInt64(
        self_: *const ZRDynamicData,
        value: *mut DDS_LongLong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetUInt64(
        self_: *const ZRDynamicData,
        value: *mut DDS_ULongLong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetString(
        self_: *const ZRDynamicData,
        value: *mut *mut DDS_Char,
        size: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetStringConst(
        self_: *const ZRDynamicData,
        value: *mut *const DDS_Char,
        size: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetComplexMember(
        self_: *const ZRDynamicData,
        value: *mut *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetComplexMemberConst(
        self_: *const ZRDynamicData,
        value: *mut *const ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetPrimitiveTypeArray(
        self_: *const ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        elementSize: DDS_ULong,
        offset: DDS_ULong,
        dataAddr: *mut *const DDS_Char,
        elementNum: *mut DDS_ULong,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetInt8Array(
        self_: *const ZRDynamicData,
        array: *mut DDS_Char,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetInt8ArrayConst(
        self_: *const ZRDynamicData,
        array: *mut *const DDS_Char,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetUInt8Array(
        self_: *const ZRDynamicData,
        array: *mut DDS_Octet,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetUInt8ArrayConst(
        self_: *const ZRDynamicData,
        array: *mut *const DDS_Octet,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetInt16Array(
        self_: *const ZRDynamicData,
        array: *mut DDS_Short,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetInt16ArrayConst(
        self_: *const ZRDynamicData,
        array: *mut *const DDS_Short,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetUInt16Array(
        self_: *const ZRDynamicData,
        array: *mut DDS_UShort,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetUInt16ArrayConst(
        self_: *const ZRDynamicData,
        array: *mut *const DDS_UShort,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetInt32Array(
        self_: *const ZRDynamicData,
        array: *mut DDS_Long,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetInt32ArrayConst(
        self_: *const ZRDynamicData,
        array: *mut *const DDS_Long,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetUInt32Array(
        self_: *const ZRDynamicData,
        array: *mut DDS_ULong,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetUInt32ArrayConst(
        self_: *const ZRDynamicData,
        array: *mut *const DDS_ULong,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetInt64Array(
        self_: *const ZRDynamicData,
        array: *mut DDS_LongLong,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetInt64ArrayConst(
        self_: *const ZRDynamicData,
        array: *mut *const DDS_LongLong,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetUInt64Array(
        self_: *const ZRDynamicData,
        array: *mut DDS_ULongLong,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetUInt64ArrayConst(
        self_: *const ZRDynamicData,
        array: *mut *const DDS_ULongLong,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetFloat32Array(
        self_: *const ZRDynamicData,
        array: *mut DDS_Float,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetFloat32ArrayConst(
        self_: *const ZRDynamicData,
        array: *mut *const DDS_Float,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetDouble64Array(
        self_: *const ZRDynamicData,
        array: *mut DDS_Double,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetDouble64ArrayConst(
        self_: *const ZRDynamicData,
        array: *mut *const DDS_Double,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetBooleanArray(
        self_: *const ZRDynamicData,
        array: *mut DDS_Boolean,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetBooleanArrayConst(
        self_: *const ZRDynamicData,
        array: *mut *const DDS_Boolean,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetStringArray(
        self_: *const ZRDynamicData,
        array: *mut *mut DDS_Char,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetComplexMemberArray(
        self_: *const ZRDynamicData,
        array: *mut *mut ZRDynamicData,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetComplexMemberArrayConst(
        self_: *const ZRDynamicData,
        array: *mut *const ZRDynamicData,
        length: *mut DDS_ULong,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetInt8Seq(
        self_: *const ZRDynamicData,
        seq: *mut DDS_CharSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetUInt8Seq(
        self_: *const ZRDynamicData,
        seq: *mut DDS_OctetSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetInt16Seq(
        self_: *const ZRDynamicData,
        seq: *mut DDS_ShortSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetUInt16Seq(
        self_: *const ZRDynamicData,
        seq: *mut DDS_UShortSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetInt32Seq(
        self_: *const ZRDynamicData,
        seq: *mut DDS_LongSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetUInt32Seq(
        self_: *const ZRDynamicData,
        seq: *mut DDS_ULongSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetInt64Seq(
        self_: *const ZRDynamicData,
        seq: *mut DDS_LongLongSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetUInt64Seq(
        self_: *const ZRDynamicData,
        seq: *mut DDS_ULongLongSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetFloat32Seq(
        self_: *const ZRDynamicData,
        seq: *mut DDS_FloatSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetDouble64Seq(
        self_: *const ZRDynamicData,
        seq: *mut DDS_DoubleSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetBooleanSeq(
        self_: *const ZRDynamicData,
        seq: *mut DDS_BooleanSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetStringSeq(
        self_: *const ZRDynamicData,
        seq: *mut DDS_StringSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetInt8SeqConst(
        self_: *const ZRDynamicData,
        seq: *mut DDS_CharSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetUInt8SeqConst(
        self_: *const ZRDynamicData,
        seq: *mut DDS_OctetSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetInt16SeqConst(
        self_: *const ZRDynamicData,
        seq: *mut DDS_ShortSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetUInt16SeqConst(
        self_: *const ZRDynamicData,
        seq: *mut DDS_UShortSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetInt32SeqConst(
        self_: *const ZRDynamicData,
        seq: *mut DDS_LongSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetUInt32SeqConst(
        self_: *const ZRDynamicData,
        seq: *mut DDS_ULongSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetInt64SeqConst(
        self_: *const ZRDynamicData,
        seq: *mut DDS_LongLongSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetUInt64SeqConst(
        self_: *const ZRDynamicData,
        seq: *mut DDS_ULongLongSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetFloat32SeqConst(
        self_: *const ZRDynamicData,
        seq: *mut DDS_FloatSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetDouble64SeqConst(
        self_: *const ZRDynamicData,
        seq: *mut DDS_DoubleSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetBooleanSeqConst(
        self_: *const ZRDynamicData,
        seq: *mut DDS_BooleanSeq,
        memberName: *const DDS_Char,
        index: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetInt8(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetUInt8(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: DDS_Octet,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetInt16(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: DDS_Short,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetUInt16(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: DDS_UShort,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetInt32(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetUInt32(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: DDS_ULong,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetInt64(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: DDS_LongLong,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetUInt64(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: DDS_ULongLong,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetFloat32(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: DDS_Float,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetDouble64(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: DDS_Double,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetBoolean(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: DDS_Boolean,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetString(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetComplexMember(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: *const ZRDynamicData,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetInt8Array(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        length: DDS_ULong,
        array: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetUInt8Array(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        length: DDS_ULong,
        array: *const DDS_Octet,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetInt16Array(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        length: DDS_ULong,
        array: *const DDS_Short,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetUInt16Array(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        length: DDS_ULong,
        array: *const DDS_UShort,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetInt32Array(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        length: DDS_ULong,
        array: *const DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetUInt32Array(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        length: DDS_ULong,
        array: *const DDS_ULong,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetInt64Array(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        length: DDS_ULong,
        array: *const DDS_LongLong,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetUInt64Array(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        length: DDS_ULong,
        array: *const DDS_ULongLong,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetFloat32Array(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        length: DDS_ULong,
        array: *const DDS_Float,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetDouble64Array(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        length: DDS_ULong,
        array: *const DDS_Double,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetBooleanArray(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        length: DDS_ULong,
        array: *const DDS_Boolean,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetStringArray(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        length: DDS_ULong,
        array: *mut *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetComplexMemberArray(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        length: DDS_ULong,
        array: *mut *const ZRDynamicData,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetComplexMemberSequence(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        length: DDS_ULong,
        array: *mut *const ZRDynamicData,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetInt8Seq(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: *const DDS_CharSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetUInt8Seq(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: *const DDS_OctetSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetInt16Seq(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: *const DDS_ShortSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetUInt16Seq(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: *const DDS_UShortSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetInt32Seq(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: *const DDS_LongSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetUInt32Seq(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: *const DDS_ULongSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetInt64Seq(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: *const DDS_LongLongSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetUInt64Seq(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: *const DDS_ULongLongSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetFloat32Seq(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: *const DDS_FloatSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetDouble64Seq(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: *const DDS_DoubleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetBooleanSeq(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: *const DDS_BooleanSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSetStringSeq(
        self_: *mut ZRDynamicData,
        memberName: *const DDS_Char,
        index: DDS_Long,
        value: *const DDS_StringSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetSerializeSizeEx(
        self_: *const ZRDynamicData,
        offset: ZR_INT32,
        fixLen: ZR_BOOLEAN,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDeserializeEx(
        self_: *mut ZRDynamicData,
        cdr: *mut CDRDeserializer,
        elementCount: ZR_INT32,
        offset: ZR_UINT32,
        totalSize: ZR_UINT32,
        payload: *mut ZR_INT8,
        payloadLen: ZR_UINT32,
        fixedHeaderLen: ZR_UINT32,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZRDynamicDataSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut ZRDynamicData,
    pub _discontiguousBuffer: *mut *mut ZRDynamicData,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZRDynamicDataSeq"][::std::mem::size_of::<ZRDynamicDataSeq>() - 72usize];
    ["Alignment of ZRDynamicDataSeq"][::std::mem::align_of::<ZRDynamicDataSeq>() - 8usize];
    ["Offset of field: ZRDynamicDataSeq::_owned"]
        [::std::mem::offset_of!(ZRDynamicDataSeq, _owned) - 0usize];
    ["Offset of field: ZRDynamicDataSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(ZRDynamicDataSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: ZRDynamicDataSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(ZRDynamicDataSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: ZRDynamicDataSeq::_maximum"]
        [::std::mem::offset_of!(ZRDynamicDataSeq, _maximum) - 24usize];
    ["Offset of field: ZRDynamicDataSeq::_length"]
        [::std::mem::offset_of!(ZRDynamicDataSeq, _length) - 28usize];
    ["Offset of field: ZRDynamicDataSeq::_sequenceInit"]
        [::std::mem::offset_of!(ZRDynamicDataSeq, _sequenceInit) - 32usize];
    ["Offset of field: ZRDynamicDataSeq::_readerPtr"]
        [::std::mem::offset_of!(ZRDynamicDataSeq, _readerPtr) - 40usize];
    ["Offset of field: ZRDynamicDataSeq::_dataPtr"]
        [::std::mem::offset_of!(ZRDynamicDataSeq, _dataPtr) - 48usize];
    ["Offset of field: ZRDynamicDataSeq::_mempool"]
        [::std::mem::offset_of!(ZRDynamicDataSeq, _mempool) - 56usize];
    ["Offset of field: ZRDynamicDataSeq::_allocMemory"]
        [::std::mem::offset_of!(ZRDynamicDataSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_is_initialized(self_: *const ZRDynamicDataSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_set(
        self_: *mut ZRDynamicDataSeq,
        index: DDS_ULong,
        newValue: *const ZRDynamicData,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_initialize(self_: *mut ZRDynamicDataSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_new(newMax: DDS_ULong) -> *mut ZRDynamicDataSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_get_maximum(self_: *const ZRDynamicDataSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_set_maximum(
        self_: *mut ZRDynamicDataSeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_get_length(self_: *const ZRDynamicDataSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_set_length(
        self_: *mut ZRDynamicDataSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_ensure_length(
        self_: *mut ZRDynamicDataSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_get_reference(
        self_: *const ZRDynamicDataSeq,
        index: DDS_ULong,
    ) -> *mut ZRDynamicData;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_append(
        self_: *mut ZRDynamicDataSeq,
        newValue: *const ZRDynamicData,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_append_autosize(
        self_: *mut ZRDynamicDataSeq,
        newValue: *const ZRDynamicData,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_copy_no_alloc(
        self_: *mut ZRDynamicDataSeq,
        src: *const ZRDynamicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_copy(
        self_: *mut ZRDynamicDataSeq,
        src: *const ZRDynamicDataSeq,
    ) -> *mut ZRDynamicDataSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_compare(
        self_: *const ZRDynamicDataSeq,
        src: *const ZRDynamicDataSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_from_array(
        self_: *mut ZRDynamicDataSeq,
        srcArray: *const ZRDynamicData,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_to_array(
        self_: *const ZRDynamicDataSeq,
        dstArray: *mut ZRDynamicData,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_loan_contiguous(
        self_: *mut ZRDynamicDataSeq,
        buffer: *mut ZRDynamicData,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_loan_discontiguous(
        self_: *mut ZRDynamicDataSeq,
        buffer: *mut *mut ZRDynamicData,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_unloan(self_: *mut ZRDynamicDataSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_get_contiguous_buffer(
        self_: *const ZRDynamicDataSeq,
    ) -> *mut ZRDynamicData;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_get_discontiguous_buffer(
        self_: *const ZRDynamicDataSeq,
    ) -> *mut *mut ZRDynamicData;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_get_reader_and_data_ptr(
        self_: *const ZRDynamicDataSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_set_reader_and_data_ptr(
        self_: *mut ZRDynamicDataSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_has_ownership(self_: *const ZRDynamicDataSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_clear(self_: *mut ZRDynamicDataSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_finalize(self_: *mut ZRDynamicDataSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_shallow_copy(
        self_: *mut ZRDynamicDataSeq,
        other: *mut ZRDynamicDataSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataSeq_initialize_ex(
        self_: *mut ZRDynamicDataSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataGetPrintRow(
        self_: *const ZRDynamicData,
        typeBuffer: *mut *mut DDS_Char,
        dataBuffer: *mut *mut DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataReleasePrintRow(typeBuffer: *mut DDS_Char, dataBuffer: *mut DDS_Char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DataReaderReadOrTakeParams {
    pub isLoan: ZR_BOOLEAN,
    pub dataPtrArray: *mut *mut ::std::os::raw::c_void,
    pub dataCount: ZR_UINT32,
    pub sampleInfos: *mut DDS_SampleInfoSeq,
    pub dataSeqLen: ZR_INT32,
    pub dataSeqMaxLen: ZR_INT32,
    pub dataSeq_has_ownership: ZR_BOOLEAN,
    pub dataSeqBuffer: *mut ZR_INT8,
    pub dataSize: ZR_UINT32,
    pub dataSeqBufferType: ZR_UINT32,
    pub maxSamples: ZR_INT32,
    pub handle: *const DDS_InstanceHandle_t,
    pub isNext: ZR_BOOLEAN,
    pub sampleMask: DDS_SampleStateMask,
    pub viewMask: DDS_ViewStateMask,
    pub instanceMask: DDS_InstanceStateMask,
    pub isTake: ZR_BOOLEAN,
    pub userCondition: *mut ::std::os::raw::c_void,
    pub readCondition: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DataReaderReadOrTakeParams"]
        [::std::mem::size_of::<DataReaderReadOrTakeParams>() - 120usize];
    ["Alignment of DataReaderReadOrTakeParams"]
        [::std::mem::align_of::<DataReaderReadOrTakeParams>() - 8usize];
    ["Offset of field: DataReaderReadOrTakeParams::isLoan"]
        [::std::mem::offset_of!(DataReaderReadOrTakeParams, isLoan) - 0usize];
    ["Offset of field: DataReaderReadOrTakeParams::dataPtrArray"]
        [::std::mem::offset_of!(DataReaderReadOrTakeParams, dataPtrArray) - 8usize];
    ["Offset of field: DataReaderReadOrTakeParams::dataCount"]
        [::std::mem::offset_of!(DataReaderReadOrTakeParams, dataCount) - 16usize];
    ["Offset of field: DataReaderReadOrTakeParams::sampleInfos"]
        [::std::mem::offset_of!(DataReaderReadOrTakeParams, sampleInfos) - 24usize];
    ["Offset of field: DataReaderReadOrTakeParams::dataSeqLen"]
        [::std::mem::offset_of!(DataReaderReadOrTakeParams, dataSeqLen) - 32usize];
    ["Offset of field: DataReaderReadOrTakeParams::dataSeqMaxLen"]
        [::std::mem::offset_of!(DataReaderReadOrTakeParams, dataSeqMaxLen) - 36usize];
    ["Offset of field: DataReaderReadOrTakeParams::dataSeq_has_ownership"]
        [::std::mem::offset_of!(DataReaderReadOrTakeParams, dataSeq_has_ownership) - 40usize];
    ["Offset of field: DataReaderReadOrTakeParams::dataSeqBuffer"]
        [::std::mem::offset_of!(DataReaderReadOrTakeParams, dataSeqBuffer) - 48usize];
    ["Offset of field: DataReaderReadOrTakeParams::dataSize"]
        [::std::mem::offset_of!(DataReaderReadOrTakeParams, dataSize) - 56usize];
    ["Offset of field: DataReaderReadOrTakeParams::dataSeqBufferType"]
        [::std::mem::offset_of!(DataReaderReadOrTakeParams, dataSeqBufferType) - 60usize];
    ["Offset of field: DataReaderReadOrTakeParams::maxSamples"]
        [::std::mem::offset_of!(DataReaderReadOrTakeParams, maxSamples) - 64usize];
    ["Offset of field: DataReaderReadOrTakeParams::handle"]
        [::std::mem::offset_of!(DataReaderReadOrTakeParams, handle) - 72usize];
    ["Offset of field: DataReaderReadOrTakeParams::isNext"]
        [::std::mem::offset_of!(DataReaderReadOrTakeParams, isNext) - 80usize];
    ["Offset of field: DataReaderReadOrTakeParams::sampleMask"]
        [::std::mem::offset_of!(DataReaderReadOrTakeParams, sampleMask) - 84usize];
    ["Offset of field: DataReaderReadOrTakeParams::viewMask"]
        [::std::mem::offset_of!(DataReaderReadOrTakeParams, viewMask) - 88usize];
    ["Offset of field: DataReaderReadOrTakeParams::instanceMask"]
        [::std::mem::offset_of!(DataReaderReadOrTakeParams, instanceMask) - 92usize];
    ["Offset of field: DataReaderReadOrTakeParams::isTake"]
        [::std::mem::offset_of!(DataReaderReadOrTakeParams, isTake) - 96usize];
    ["Offset of field: DataReaderReadOrTakeParams::userCondition"]
        [::std::mem::offset_of!(DataReaderReadOrTakeParams, userCondition) - 104usize];
    ["Offset of field: DataReaderReadOrTakeParams::readCondition"]
        [::std::mem::offset_of!(DataReaderReadOrTakeParams, readCondition) - 112usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplReadOrTake(
        self_: *mut DDS_DataReader,
        params: *mut DataReaderReadOrTakeParams,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplReadOrTakeNextSample(
        self_: *mut DDS_DataReader,
        dataValue: *mut ZR_INT8,
        sampleInfo: *mut DDS_SampleInfo,
        isTake: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplReturnLoan(
        self_: *mut DDS_DataReader,
        dataSeqBuffer: *mut *mut ::std::os::raw::c_void,
        dataSeqMaxLen: ZR_INT32,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplReturnRecvBuffer(
        self_: *mut DDS_DataReader,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplLoanRecvBuffer(
        self_: *mut DataReaderImpl,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplGetKeyValue(
        self_: *mut DDS_DataReader,
        keyHolder: *mut ::std::os::raw::c_void,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplLookupInstance(
        self_: *mut DDS_DataReader,
        instance: *const ::std::os::raw::c_void,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplCreateReadCondition(
        self_: *mut DDS_DataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplCreateQueryCondition(
        self_: *mut DDS_DataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const ZR_INT8,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplDeleteReadCondition(
        self_: *mut DDS_DataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplGetLivelinessChangedStatus(
        self_: *mut DDS_DataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplGetRequestedDeadlineMissedStatus(
        self_: *mut DDS_DataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplGetRequestedIncompatibleQosStatus(
        self_: *mut DDS_DataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplGetSampleLostStatus(
        self_: *mut DDS_DataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplGetSampleRejectedStatus(
        self_: *mut DDS_DataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplGetSubscriptionMatchedStatus(
        self_: *mut DDS_DataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplGetTopicDescription(
        self_: *mut DDS_DataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplGetSubscriber(self_: *mut DDS_DataReader) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplDeleteContainedEntities(self_: *mut DDS_DataReader) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplWaitForHistoricalData(
        self_: *mut DDS_DataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplGetMatchedPublicationData(
        self_: *mut DDS_DataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplGetMatchedPublications(
        self_: *mut DDS_DataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplSetQos(
        self_: *mut DDS_DataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplGetQos(
        self_: *mut DDS_DataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplSetListener(
        self_: *mut DDS_DataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplGetListener(self_: *mut DDS_DataReader) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplEnable(self_: *mut DDS_DataReader) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplAsEntity(self_: *mut DDS_DataReader) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplRecordData(
        self_: *mut DDS_DataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderImplGetDataInstance(
        self_: *mut DDS_DataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DataReaderSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut *mut DDS_DataReader,
    pub _discontiguousBuffer: *mut *mut *mut DDS_DataReader,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_DataReaderSeq"][::std::mem::size_of::<DDS_DataReaderSeq>() - 72usize];
    ["Alignment of DDS_DataReaderSeq"][::std::mem::align_of::<DDS_DataReaderSeq>() - 8usize];
    ["Offset of field: DDS_DataReaderSeq::_owned"]
        [::std::mem::offset_of!(DDS_DataReaderSeq, _owned) - 0usize];
    ["Offset of field: DDS_DataReaderSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_DataReaderSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_DataReaderSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_DataReaderSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_DataReaderSeq::_maximum"]
        [::std::mem::offset_of!(DDS_DataReaderSeq, _maximum) - 24usize];
    ["Offset of field: DDS_DataReaderSeq::_length"]
        [::std::mem::offset_of!(DDS_DataReaderSeq, _length) - 28usize];
    ["Offset of field: DDS_DataReaderSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_DataReaderSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_DataReaderSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_DataReaderSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_DataReaderSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_DataReaderSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_DataReaderSeq::_mempool"]
        [::std::mem::offset_of!(DDS_DataReaderSeq, _mempool) - 56usize];
    ["Offset of field: DDS_DataReaderSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_DataReaderSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_is_initialized(self_: *const DDS_DataReaderSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_set(
        self_: *mut DDS_DataReaderSeq,
        index: DDS_ULong,
        newValue: *mut *const DDS_DataReader,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_initialize(self_: *mut DDS_DataReaderSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_new(newMax: DDS_ULong) -> *mut DDS_DataReaderSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_get_maximum(self_: *const DDS_DataReaderSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_set_maximum(
        self_: *mut DDS_DataReaderSeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_get_length(self_: *const DDS_DataReaderSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_set_length(
        self_: *mut DDS_DataReaderSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_ensure_length(
        self_: *mut DDS_DataReaderSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_get_reference(
        self_: *const DDS_DataReaderSeq,
        index: DDS_ULong,
    ) -> *mut *mut DDS_DataReader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_append(
        self_: *mut DDS_DataReaderSeq,
        newValue: *mut *const DDS_DataReader,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_append_autosize(
        self_: *mut DDS_DataReaderSeq,
        newValue: *mut *const DDS_DataReader,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_copy_no_alloc(
        self_: *mut DDS_DataReaderSeq,
        src: *const DDS_DataReaderSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_copy(
        self_: *mut DDS_DataReaderSeq,
        src: *const DDS_DataReaderSeq,
    ) -> *mut DDS_DataReaderSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_compare(
        self_: *const DDS_DataReaderSeq,
        src: *const DDS_DataReaderSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_from_array(
        self_: *mut DDS_DataReaderSeq,
        srcArray: *mut *const DDS_DataReader,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_to_array(
        self_: *const DDS_DataReaderSeq,
        dstArray: *mut *mut DDS_DataReader,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_loan_contiguous(
        self_: *mut DDS_DataReaderSeq,
        buffer: *mut *mut DDS_DataReader,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_loan_discontiguous(
        self_: *mut DDS_DataReaderSeq,
        buffer: *mut *mut *mut DDS_DataReader,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_unloan(self_: *mut DDS_DataReaderSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_get_contiguous_buffer(
        self_: *const DDS_DataReaderSeq,
    ) -> *mut *mut DDS_DataReader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_get_discontiguous_buffer(
        self_: *const DDS_DataReaderSeq,
    ) -> *mut *mut *mut DDS_DataReader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_get_reader_and_data_ptr(
        self_: *const DDS_DataReaderSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_set_reader_and_data_ptr(
        self_: *mut DDS_DataReaderSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_has_ownership(self_: *const DDS_DataReaderSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_clear(self_: *mut DDS_DataReaderSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_finalize(self_: *mut DDS_DataReaderSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_shallow_copy(
        self_: *mut DDS_DataReaderSeq,
        other: *mut DDS_DataReaderSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderSeq_initialize_ex(
        self_: *mut DDS_DataReaderSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderSetQosWithProfile(
        self_: *mut DDS_DataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ParticipantBuiltinTopicData {
    pub key: DDS_BuiltinTopicKey_t,
    pub user_data: DDS_UserDataQosPolicy,
    pub property_list: DDS_PropertyList,
    pub domain_id: DDS_ULong,
    pub create_time: DDS_Duration_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_ParticipantBuiltinTopicData"]
        [::std::mem::size_of::<DDS_ParticipantBuiltinTopicData>() - 376usize];
    ["Alignment of DDS_ParticipantBuiltinTopicData"]
        [::std::mem::align_of::<DDS_ParticipantBuiltinTopicData>() - 8usize];
    ["Offset of field: DDS_ParticipantBuiltinTopicData::key"]
        [::std::mem::offset_of!(DDS_ParticipantBuiltinTopicData, key) - 0usize];
    ["Offset of field: DDS_ParticipantBuiltinTopicData::user_data"]
        [::std::mem::offset_of!(DDS_ParticipantBuiltinTopicData, user_data) - 16usize];
    ["Offset of field: DDS_ParticipantBuiltinTopicData::property_list"]
        [::std::mem::offset_of!(DDS_ParticipantBuiltinTopicData, property_list) - 88usize];
    ["Offset of field: DDS_ParticipantBuiltinTopicData::domain_id"]
        [::std::mem::offset_of!(DDS_ParticipantBuiltinTopicData, domain_id) - 360usize];
    ["Offset of field: DDS_ParticipantBuiltinTopicData::create_time"]
        [::std::mem::offset_of!(DDS_ParticipantBuiltinTopicData, create_time) - 364usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataInitial(self_: *mut DDS_ParticipantBuiltinTopicData);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDestroy(self_: *mut DDS_ParticipantBuiltinTopicData);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataCopy(
        dst: *mut DDS_ParticipantBuiltinTopicData,
        src: *const DDS_ParticipantBuiltinTopicData,
    ) -> DDS_Boolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ParticipantBuiltinTopicDataSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_ParticipantBuiltinTopicData,
    pub _discontiguousBuffer: *mut *mut DDS_ParticipantBuiltinTopicData,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_ParticipantBuiltinTopicDataSeq"]
        [::std::mem::size_of::<DDS_ParticipantBuiltinTopicDataSeq>() - 72usize];
    ["Alignment of DDS_ParticipantBuiltinTopicDataSeq"]
        [::std::mem::align_of::<DDS_ParticipantBuiltinTopicDataSeq>() - 8usize];
    ["Offset of field: DDS_ParticipantBuiltinTopicDataSeq::_owned"]
        [::std::mem::offset_of!(DDS_ParticipantBuiltinTopicDataSeq, _owned) - 0usize];
    ["Offset of field: DDS_ParticipantBuiltinTopicDataSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_ParticipantBuiltinTopicDataSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_ParticipantBuiltinTopicDataSeq::_discontiguousBuffer"][::std::mem::offset_of!(
        DDS_ParticipantBuiltinTopicDataSeq,
        _discontiguousBuffer
    ) - 16usize];
    ["Offset of field: DDS_ParticipantBuiltinTopicDataSeq::_maximum"]
        [::std::mem::offset_of!(DDS_ParticipantBuiltinTopicDataSeq, _maximum) - 24usize];
    ["Offset of field: DDS_ParticipantBuiltinTopicDataSeq::_length"]
        [::std::mem::offset_of!(DDS_ParticipantBuiltinTopicDataSeq, _length) - 28usize];
    ["Offset of field: DDS_ParticipantBuiltinTopicDataSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_ParticipantBuiltinTopicDataSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_ParticipantBuiltinTopicDataSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_ParticipantBuiltinTopicDataSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_ParticipantBuiltinTopicDataSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_ParticipantBuiltinTopicDataSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_ParticipantBuiltinTopicDataSeq::_mempool"]
        [::std::mem::offset_of!(DDS_ParticipantBuiltinTopicDataSeq, _mempool) - 56usize];
    ["Offset of field: DDS_ParticipantBuiltinTopicDataSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_ParticipantBuiltinTopicDataSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_is_initialized(
        self_: *const DDS_ParticipantBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_set(
        self_: *mut DDS_ParticipantBuiltinTopicDataSeq,
        index: DDS_ULong,
        newValue: *const DDS_ParticipantBuiltinTopicData,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_initialize(
        self_: *mut DDS_ParticipantBuiltinTopicDataSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_new(
        newMax: DDS_ULong,
    ) -> *mut DDS_ParticipantBuiltinTopicDataSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_get_maximum(
        self_: *const DDS_ParticipantBuiltinTopicDataSeq,
    ) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_set_maximum(
        self_: *mut DDS_ParticipantBuiltinTopicDataSeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_get_length(
        self_: *const DDS_ParticipantBuiltinTopicDataSeq,
    ) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_set_length(
        self_: *mut DDS_ParticipantBuiltinTopicDataSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_ensure_length(
        self_: *mut DDS_ParticipantBuiltinTopicDataSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_get_reference(
        self_: *const DDS_ParticipantBuiltinTopicDataSeq,
        index: DDS_ULong,
    ) -> *mut DDS_ParticipantBuiltinTopicData;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_append(
        self_: *mut DDS_ParticipantBuiltinTopicDataSeq,
        newValue: *const DDS_ParticipantBuiltinTopicData,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_append_autosize(
        self_: *mut DDS_ParticipantBuiltinTopicDataSeq,
        newValue: *const DDS_ParticipantBuiltinTopicData,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_copy_no_alloc(
        self_: *mut DDS_ParticipantBuiltinTopicDataSeq,
        src: *const DDS_ParticipantBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_copy(
        self_: *mut DDS_ParticipantBuiltinTopicDataSeq,
        src: *const DDS_ParticipantBuiltinTopicDataSeq,
    ) -> *mut DDS_ParticipantBuiltinTopicDataSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_compare(
        self_: *const DDS_ParticipantBuiltinTopicDataSeq,
        src: *const DDS_ParticipantBuiltinTopicDataSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_from_array(
        self_: *mut DDS_ParticipantBuiltinTopicDataSeq,
        srcArray: *const DDS_ParticipantBuiltinTopicData,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_to_array(
        self_: *const DDS_ParticipantBuiltinTopicDataSeq,
        dstArray: *mut DDS_ParticipantBuiltinTopicData,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_loan_contiguous(
        self_: *mut DDS_ParticipantBuiltinTopicDataSeq,
        buffer: *mut DDS_ParticipantBuiltinTopicData,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_loan_discontiguous(
        self_: *mut DDS_ParticipantBuiltinTopicDataSeq,
        buffer: *mut *mut DDS_ParticipantBuiltinTopicData,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_unloan(
        self_: *mut DDS_ParticipantBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_get_contiguous_buffer(
        self_: *const DDS_ParticipantBuiltinTopicDataSeq,
    ) -> *mut DDS_ParticipantBuiltinTopicData;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_get_discontiguous_buffer(
        self_: *const DDS_ParticipantBuiltinTopicDataSeq,
    ) -> *mut *mut DDS_ParticipantBuiltinTopicData;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_get_reader_and_data_ptr(
        self_: *const DDS_ParticipantBuiltinTopicDataSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_set_reader_and_data_ptr(
        self_: *mut DDS_ParticipantBuiltinTopicDataSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_has_ownership(
        self_: *const DDS_ParticipantBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_clear(
        self_: *mut DDS_ParticipantBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_finalize(
        self_: *mut DDS_ParticipantBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_shallow_copy(
        self_: *mut DDS_ParticipantBuiltinTopicDataSeq,
        other: *mut DDS_ParticipantBuiltinTopicDataSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataSeq_initialize_ex(
        self_: *mut DDS_ParticipantBuiltinTopicDataSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ContentFilterProperty_t {
    pub contentFilteredTopicName: *mut DDS_Char,
    pub relatedTopicName: *mut DDS_Char,
    pub filterClassName: *mut DDS_Char,
    pub filterExpression: *mut DDS_Char,
    pub expressionParameters: DDS_StringSeq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_ContentFilterProperty_t"]
        [::std::mem::size_of::<DDS_ContentFilterProperty_t>() - 104usize];
    ["Alignment of DDS_ContentFilterProperty_t"]
        [::std::mem::align_of::<DDS_ContentFilterProperty_t>() - 8usize];
    ["Offset of field: DDS_ContentFilterProperty_t::contentFilteredTopicName"]
        [::std::mem::offset_of!(DDS_ContentFilterProperty_t, contentFilteredTopicName) - 0usize];
    ["Offset of field: DDS_ContentFilterProperty_t::relatedTopicName"]
        [::std::mem::offset_of!(DDS_ContentFilterProperty_t, relatedTopicName) - 8usize];
    ["Offset of field: DDS_ContentFilterProperty_t::filterClassName"]
        [::std::mem::offset_of!(DDS_ContentFilterProperty_t, filterClassName) - 16usize];
    ["Offset of field: DDS_ContentFilterProperty_t::filterExpression"]
        [::std::mem::offset_of!(DDS_ContentFilterProperty_t, filterExpression) - 24usize];
    ["Offset of field: DDS_ContentFilterProperty_t::expressionParameters"]
        [::std::mem::offset_of!(DDS_ContentFilterProperty_t, expressionParameters) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_SubscriptionBuiltinTopicData {
    pub key: DDS_BuiltinTopicKey_t,
    pub participant_key: DDS_BuiltinTopicKey_t,
    pub topic_name: *mut DDS_Char,
    pub type_name: *mut DDS_Char,
    pub property_list: DDS_PropertyList,
    pub content_filter_property: DDS_ContentFilterProperty_t,
    pub durability: DDS_DurabilityQosPolicy,
    pub deadline: DDS_DeadlineQosPolicy,
    pub latency_budget: DDS_LatencyBudgetQosPolicy,
    pub liveliness: DDS_LivelinessQosPolicy,
    pub reliability: DDS_ReliabilityQosPolicy,
    pub ownership: DDS_OwnershipQosPolicy,
    pub destination_order: DDS_DestinationOrderQosPolicy,
    pub user_data: DDS_UserDataQosPolicy,
    pub time_based_filter: DDS_TimeBasedFilterQosPolicy,
    pub presention: DDS_PresentationQosPolicy,
    pub type_compatibility: DDS_TypeConsistencyEnforcementQosPolicy,
    pub partition: DDS_PartitionQosPolicy,
    pub topic_data: DDS_TopicDataQosPolicy,
    pub group_data: DDS_GroupDataQosPolicy,
    pub type_object: *mut TypeObject,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_SubscriptionBuiltinTopicData"]
        [::std::mem::size_of::<DDS_SubscriptionBuiltinTopicData>() - 800usize];
    ["Alignment of DDS_SubscriptionBuiltinTopicData"]
        [::std::mem::align_of::<DDS_SubscriptionBuiltinTopicData>() - 8usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::key"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicData, key) - 0usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::participant_key"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicData, participant_key) - 16usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::topic_name"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicData, topic_name) - 32usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::type_name"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicData, type_name) - 40usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::property_list"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicData, property_list) - 48usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::content_filter_property"][::std::mem::offset_of!(
        DDS_SubscriptionBuiltinTopicData,
        content_filter_property
    ) - 320usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::durability"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicData, durability) - 424usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::deadline"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicData, deadline) - 428usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::latency_budget"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicData, latency_budget) - 436usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::liveliness"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicData, liveliness) - 444usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::reliability"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicData, reliability) - 456usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::ownership"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicData, ownership) - 468usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::destination_order"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicData, destination_order) - 472usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::user_data"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicData, user_data) - 480usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::time_based_filter"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicData, time_based_filter) - 552usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::presention"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicData, presention) - 560usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::type_compatibility"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicData, type_compatibility) - 568usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::partition"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicData, partition) - 576usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::topic_data"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicData, topic_data) - 648usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::group_data"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicData, group_data) - 720usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicData::type_object"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicData, type_object) - 792usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataInitial(self_: *mut DDS_SubscriptionBuiltinTopicData);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDestroy(self_: *mut DDS_SubscriptionBuiltinTopicData);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataCopy(
        dst: *mut DDS_SubscriptionBuiltinTopicData,
        src: *const DDS_SubscriptionBuiltinTopicData,
    ) -> DDS_Long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_SubscriptionBuiltinTopicDataSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_SubscriptionBuiltinTopicData,
    pub _discontiguousBuffer: *mut *mut DDS_SubscriptionBuiltinTopicData,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_SubscriptionBuiltinTopicDataSeq"]
        [::std::mem::size_of::<DDS_SubscriptionBuiltinTopicDataSeq>() - 72usize];
    ["Alignment of DDS_SubscriptionBuiltinTopicDataSeq"]
        [::std::mem::align_of::<DDS_SubscriptionBuiltinTopicDataSeq>() - 8usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicDataSeq::_owned"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicDataSeq, _owned) - 0usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicDataSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicDataSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicDataSeq::_discontiguousBuffer"][::std::mem::offset_of!(
        DDS_SubscriptionBuiltinTopicDataSeq,
        _discontiguousBuffer
    ) - 16usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicDataSeq::_maximum"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicDataSeq, _maximum) - 24usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicDataSeq::_length"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicDataSeq, _length) - 28usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicDataSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicDataSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicDataSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicDataSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicDataSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicDataSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicDataSeq::_mempool"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicDataSeq, _mempool) - 56usize];
    ["Offset of field: DDS_SubscriptionBuiltinTopicDataSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_SubscriptionBuiltinTopicDataSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_is_initialized(
        self_: *const DDS_SubscriptionBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_set(
        self_: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        index: DDS_ULong,
        newValue: *const DDS_SubscriptionBuiltinTopicData,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_initialize(
        self_: *mut DDS_SubscriptionBuiltinTopicDataSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_new(
        newMax: DDS_ULong,
    ) -> *mut DDS_SubscriptionBuiltinTopicDataSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_get_maximum(
        self_: *const DDS_SubscriptionBuiltinTopicDataSeq,
    ) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_set_maximum(
        self_: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_get_length(
        self_: *const DDS_SubscriptionBuiltinTopicDataSeq,
    ) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_set_length(
        self_: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_ensure_length(
        self_: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_get_reference(
        self_: *const DDS_SubscriptionBuiltinTopicDataSeq,
        index: DDS_ULong,
    ) -> *mut DDS_SubscriptionBuiltinTopicData;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_append(
        self_: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        newValue: *const DDS_SubscriptionBuiltinTopicData,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_append_autosize(
        self_: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        newValue: *const DDS_SubscriptionBuiltinTopicData,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_copy_no_alloc(
        self_: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        src: *const DDS_SubscriptionBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_copy(
        self_: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        src: *const DDS_SubscriptionBuiltinTopicDataSeq,
    ) -> *mut DDS_SubscriptionBuiltinTopicDataSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_compare(
        self_: *const DDS_SubscriptionBuiltinTopicDataSeq,
        src: *const DDS_SubscriptionBuiltinTopicDataSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_from_array(
        self_: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        srcArray: *const DDS_SubscriptionBuiltinTopicData,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_to_array(
        self_: *const DDS_SubscriptionBuiltinTopicDataSeq,
        dstArray: *mut DDS_SubscriptionBuiltinTopicData,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_loan_contiguous(
        self_: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        buffer: *mut DDS_SubscriptionBuiltinTopicData,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_loan_discontiguous(
        self_: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        buffer: *mut *mut DDS_SubscriptionBuiltinTopicData,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_unloan(
        self_: *mut DDS_SubscriptionBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_get_contiguous_buffer(
        self_: *const DDS_SubscriptionBuiltinTopicDataSeq,
    ) -> *mut DDS_SubscriptionBuiltinTopicData;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_get_discontiguous_buffer(
        self_: *const DDS_SubscriptionBuiltinTopicDataSeq,
    ) -> *mut *mut DDS_SubscriptionBuiltinTopicData;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_get_reader_and_data_ptr(
        self_: *const DDS_SubscriptionBuiltinTopicDataSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_set_reader_and_data_ptr(
        self_: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_has_ownership(
        self_: *const DDS_SubscriptionBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_clear(
        self_: *mut DDS_SubscriptionBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_finalize(
        self_: *mut DDS_SubscriptionBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_shallow_copy(
        self_: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        other: *mut DDS_SubscriptionBuiltinTopicDataSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataSeq_initialize_ex(
        self_: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_TopicBuiltinTopicData {
    pub key: DDS_BuiltinTopicKey_t,
    pub topic_name: *mut DDS_Char,
    pub type_name: *mut DDS_Char,
    pub durability: DDS_DurabilityQosPolicy,
    pub durability_service: DDS_DurabilityServiceQosPolicy,
    pub deadline: DDS_DeadlineQosPolicy,
    pub latency_budget: DDS_LatencyBudgetQosPolicy,
    pub liveliness: DDS_LivelinessQosPolicy,
    pub reliability: DDS_ReliabilityQosPolicy,
    pub transport_priority: DDS_TransportPriorityQosPolicy,
    pub lifespan: DDS_LifespanQosPolicy,
    pub ownership: DDS_OwnershipQosPolicy,
    pub destination_order: DDS_DestinationOrderQosPolicy,
    pub topic_data: DDS_TopicDataQosPolicy,
    pub history: DDS_HistoryQosPolicy,
    pub resource_limits: DDS_ResourceLimitsQosPolicy,
    pub type_object: *mut TypeObject,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_TopicBuiltinTopicData"]
        [::std::mem::size_of::<DDS_TopicBuiltinTopicData>() - 240usize];
    ["Alignment of DDS_TopicBuiltinTopicData"]
        [::std::mem::align_of::<DDS_TopicBuiltinTopicData>() - 8usize];
    ["Offset of field: DDS_TopicBuiltinTopicData::key"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicData, key) - 0usize];
    ["Offset of field: DDS_TopicBuiltinTopicData::topic_name"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicData, topic_name) - 16usize];
    ["Offset of field: DDS_TopicBuiltinTopicData::type_name"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicData, type_name) - 24usize];
    ["Offset of field: DDS_TopicBuiltinTopicData::durability"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicData, durability) - 32usize];
    ["Offset of field: DDS_TopicBuiltinTopicData::durability_service"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicData, durability_service) - 36usize];
    ["Offset of field: DDS_TopicBuiltinTopicData::deadline"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicData, deadline) - 64usize];
    ["Offset of field: DDS_TopicBuiltinTopicData::latency_budget"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicData, latency_budget) - 72usize];
    ["Offset of field: DDS_TopicBuiltinTopicData::liveliness"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicData, liveliness) - 80usize];
    ["Offset of field: DDS_TopicBuiltinTopicData::reliability"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicData, reliability) - 92usize];
    ["Offset of field: DDS_TopicBuiltinTopicData::transport_priority"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicData, transport_priority) - 104usize];
    ["Offset of field: DDS_TopicBuiltinTopicData::lifespan"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicData, lifespan) - 108usize];
    ["Offset of field: DDS_TopicBuiltinTopicData::ownership"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicData, ownership) - 116usize];
    ["Offset of field: DDS_TopicBuiltinTopicData::destination_order"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicData, destination_order) - 120usize];
    ["Offset of field: DDS_TopicBuiltinTopicData::topic_data"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicData, topic_data) - 128usize];
    ["Offset of field: DDS_TopicBuiltinTopicData::history"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicData, history) - 200usize];
    ["Offset of field: DDS_TopicBuiltinTopicData::resource_limits"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicData, resource_limits) - 208usize];
    ["Offset of field: DDS_TopicBuiltinTopicData::type_object"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicData, type_object) - 232usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataInitial(self_: *mut DDS_TopicBuiltinTopicData);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDestroy(self_: *mut DDS_TopicBuiltinTopicData);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataCopy(
        dst: *mut DDS_TopicBuiltinTopicData,
        src: *const DDS_TopicBuiltinTopicData,
    ) -> DDS_Long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_TopicBuiltinTopicDataSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_TopicBuiltinTopicData,
    pub _discontiguousBuffer: *mut *mut DDS_TopicBuiltinTopicData,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_TopicBuiltinTopicDataSeq"]
        [::std::mem::size_of::<DDS_TopicBuiltinTopicDataSeq>() - 72usize];
    ["Alignment of DDS_TopicBuiltinTopicDataSeq"]
        [::std::mem::align_of::<DDS_TopicBuiltinTopicDataSeq>() - 8usize];
    ["Offset of field: DDS_TopicBuiltinTopicDataSeq::_owned"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicDataSeq, _owned) - 0usize];
    ["Offset of field: DDS_TopicBuiltinTopicDataSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicDataSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_TopicBuiltinTopicDataSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicDataSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_TopicBuiltinTopicDataSeq::_maximum"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicDataSeq, _maximum) - 24usize];
    ["Offset of field: DDS_TopicBuiltinTopicDataSeq::_length"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicDataSeq, _length) - 28usize];
    ["Offset of field: DDS_TopicBuiltinTopicDataSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicDataSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_TopicBuiltinTopicDataSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicDataSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_TopicBuiltinTopicDataSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicDataSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_TopicBuiltinTopicDataSeq::_mempool"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicDataSeq, _mempool) - 56usize];
    ["Offset of field: DDS_TopicBuiltinTopicDataSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_TopicBuiltinTopicDataSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_is_initialized(
        self_: *const DDS_TopicBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_set(
        self_: *mut DDS_TopicBuiltinTopicDataSeq,
        index: DDS_ULong,
        newValue: *const DDS_TopicBuiltinTopicData,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_initialize(self_: *mut DDS_TopicBuiltinTopicDataSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_new(newMax: DDS_ULong)
    -> *mut DDS_TopicBuiltinTopicDataSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_get_maximum(
        self_: *const DDS_TopicBuiltinTopicDataSeq,
    ) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_set_maximum(
        self_: *mut DDS_TopicBuiltinTopicDataSeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_get_length(
        self_: *const DDS_TopicBuiltinTopicDataSeq,
    ) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_set_length(
        self_: *mut DDS_TopicBuiltinTopicDataSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_ensure_length(
        self_: *mut DDS_TopicBuiltinTopicDataSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_get_reference(
        self_: *const DDS_TopicBuiltinTopicDataSeq,
        index: DDS_ULong,
    ) -> *mut DDS_TopicBuiltinTopicData;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_append(
        self_: *mut DDS_TopicBuiltinTopicDataSeq,
        newValue: *const DDS_TopicBuiltinTopicData,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_append_autosize(
        self_: *mut DDS_TopicBuiltinTopicDataSeq,
        newValue: *const DDS_TopicBuiltinTopicData,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_copy_no_alloc(
        self_: *mut DDS_TopicBuiltinTopicDataSeq,
        src: *const DDS_TopicBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_copy(
        self_: *mut DDS_TopicBuiltinTopicDataSeq,
        src: *const DDS_TopicBuiltinTopicDataSeq,
    ) -> *mut DDS_TopicBuiltinTopicDataSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_compare(
        self_: *const DDS_TopicBuiltinTopicDataSeq,
        src: *const DDS_TopicBuiltinTopicDataSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_from_array(
        self_: *mut DDS_TopicBuiltinTopicDataSeq,
        srcArray: *const DDS_TopicBuiltinTopicData,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_to_array(
        self_: *const DDS_TopicBuiltinTopicDataSeq,
        dstArray: *mut DDS_TopicBuiltinTopicData,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_loan_contiguous(
        self_: *mut DDS_TopicBuiltinTopicDataSeq,
        buffer: *mut DDS_TopicBuiltinTopicData,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_loan_discontiguous(
        self_: *mut DDS_TopicBuiltinTopicDataSeq,
        buffer: *mut *mut DDS_TopicBuiltinTopicData,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_unloan(
        self_: *mut DDS_TopicBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_get_contiguous_buffer(
        self_: *const DDS_TopicBuiltinTopicDataSeq,
    ) -> *mut DDS_TopicBuiltinTopicData;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_get_discontiguous_buffer(
        self_: *const DDS_TopicBuiltinTopicDataSeq,
    ) -> *mut *mut DDS_TopicBuiltinTopicData;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_get_reader_and_data_ptr(
        self_: *const DDS_TopicBuiltinTopicDataSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_set_reader_and_data_ptr(
        self_: *mut DDS_TopicBuiltinTopicDataSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_has_ownership(
        self_: *const DDS_TopicBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_clear(
        self_: *mut DDS_TopicBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_finalize(
        self_: *mut DDS_TopicBuiltinTopicDataSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_shallow_copy(
        self_: *mut DDS_TopicBuiltinTopicDataSeq,
        other: *mut DDS_TopicBuiltinTopicDataSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataSeq_initialize_ex(
        self_: *mut DDS_TopicBuiltinTopicDataSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ParticipantBuiltinTopicDataDataReader {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_read(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        dataValues: *mut DDS_ParticipantBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_take(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        dataValues: *mut DDS_ParticipantBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_read_next_sample(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        dataValue: *mut DDS_ParticipantBuiltinTopicData,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_take_next_sample(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        dataValue: *mut DDS_ParticipantBuiltinTopicData,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_read_instance(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        dataValues: *mut DDS_ParticipantBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_take_instance(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        dataValues: *mut DDS_ParticipantBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_read_next_instance(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        dataValues: *mut DDS_ParticipantBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_take_next_instance(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        dataValues: *mut DDS_ParticipantBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_return_loan(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        dataValues: *mut DDS_ParticipantBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_return_recv_buffer(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_loan_recv_buffer(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_get_key_value(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        keyHolder: *mut DDS_ParticipantBuiltinTopicData,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_lookup_instance(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        instance: *const DDS_ParticipantBuiltinTopicData,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_get_data_instance(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_read_next_instance_w_condition(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        dataValues: *mut DDS_ParticipantBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_take_next_instance_w_condition(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        dataValues: *mut DDS_ParticipantBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_read_w_condition(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        dataValues: *mut DDS_ParticipantBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_take_w_condition(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        dataValues: *mut DDS_ParticipantBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_create_readcondition(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_delete_readcondition(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_delete_contained_entities(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_create_querycondition(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_set_qos(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_get_qos(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_set_listener(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_enable(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_as_entity(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
    ) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_get_listener(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_get_liveliness_changed_status(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_get_requested_deadline_missed_status(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_get_subscription_matched_status(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_get_matched_publication_data(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_get_matched_publications(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_get_sample_lost_status(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_get_sample_rejected_status(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_get_subscriber(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_get_topicdescription(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_get_requested_incompatible_qos_status(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_wait_for_historical_data(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_set_qos_with_profile(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_create_named_readcondition(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_delete_named_readcondition(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_get_named_readcondition(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ParticipantBuiltinTopicDataDataReader_record_data(
        self_: *mut DDS_ParticipantBuiltinTopicDataDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_PublicationBuiltinTopicDataDataReader {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_read(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        dataValues: *mut DDS_PublicationBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_take(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        dataValues: *mut DDS_PublicationBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_read_next_sample(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        dataValue: *mut DDS_PublicationBuiltinTopicData,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_take_next_sample(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        dataValue: *mut DDS_PublicationBuiltinTopicData,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_read_instance(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        dataValues: *mut DDS_PublicationBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_take_instance(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        dataValues: *mut DDS_PublicationBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_read_next_instance(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        dataValues: *mut DDS_PublicationBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_take_next_instance(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        dataValues: *mut DDS_PublicationBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_return_loan(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        dataValues: *mut DDS_PublicationBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_return_recv_buffer(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_loan_recv_buffer(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_get_key_value(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        keyHolder: *mut DDS_PublicationBuiltinTopicData,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_lookup_instance(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        instance: *const DDS_PublicationBuiltinTopicData,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_get_data_instance(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_read_next_instance_w_condition(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        dataValues: *mut DDS_PublicationBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_take_next_instance_w_condition(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        dataValues: *mut DDS_PublicationBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_read_w_condition(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        dataValues: *mut DDS_PublicationBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_take_w_condition(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        dataValues: *mut DDS_PublicationBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_create_readcondition(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_delete_readcondition(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_delete_contained_entities(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_create_querycondition(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_set_qos(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_get_qos(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_set_listener(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_enable(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_as_entity(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
    ) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_get_listener(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_get_liveliness_changed_status(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_get_requested_deadline_missed_status(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_get_subscription_matched_status(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_get_matched_publication_data(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_get_matched_publications(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_get_sample_lost_status(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_get_sample_rejected_status(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_get_subscriber(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_get_topicdescription(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_get_requested_incompatible_qos_status(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_wait_for_historical_data(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_set_qos_with_profile(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_create_named_readcondition(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_delete_named_readcondition(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_get_named_readcondition(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationBuiltinTopicDataDataReader_record_data(
        self_: *mut DDS_PublicationBuiltinTopicDataDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_SubscriptionBuiltinTopicDataDataReader {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_read(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        dataValues: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_take(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        dataValues: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_read_next_sample(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        dataValue: *mut DDS_SubscriptionBuiltinTopicData,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_take_next_sample(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        dataValue: *mut DDS_SubscriptionBuiltinTopicData,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_read_instance(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        dataValues: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_take_instance(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        dataValues: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_read_next_instance(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        dataValues: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_take_next_instance(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        dataValues: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_return_loan(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        dataValues: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_return_recv_buffer(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_loan_recv_buffer(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_get_key_value(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        keyHolder: *mut DDS_SubscriptionBuiltinTopicData,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_lookup_instance(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        instance: *const DDS_SubscriptionBuiltinTopicData,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_get_data_instance(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_read_next_instance_w_condition(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        dataValues: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_take_next_instance_w_condition(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        dataValues: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_read_w_condition(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        dataValues: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_take_w_condition(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        dataValues: *mut DDS_SubscriptionBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_create_readcondition(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_delete_readcondition(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_delete_contained_entities(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_create_querycondition(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_set_qos(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_get_qos(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_set_listener(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_enable(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_as_entity(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
    ) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_get_listener(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_get_liveliness_changed_status(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_get_requested_deadline_missed_status(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_get_subscription_matched_status(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_get_matched_publication_data(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_get_matched_publications(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_get_sample_lost_status(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_get_sample_rejected_status(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_get_subscriber(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_get_topicdescription(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_get_requested_incompatible_qos_status(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_wait_for_historical_data(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_set_qos_with_profile(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_create_named_readcondition(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_delete_named_readcondition(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_get_named_readcondition(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriptionBuiltinTopicDataDataReader_record_data(
        self_: *mut DDS_SubscriptionBuiltinTopicDataDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_TopicBuiltinTopicDataDataReader {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_read(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        dataValues: *mut DDS_TopicBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_take(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        dataValues: *mut DDS_TopicBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_read_next_sample(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        dataValue: *mut DDS_TopicBuiltinTopicData,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_take_next_sample(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        dataValue: *mut DDS_TopicBuiltinTopicData,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_read_instance(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        dataValues: *mut DDS_TopicBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_take_instance(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        dataValues: *mut DDS_TopicBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_read_next_instance(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        dataValues: *mut DDS_TopicBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_take_next_instance(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        dataValues: *mut DDS_TopicBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_return_loan(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        dataValues: *mut DDS_TopicBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_return_recv_buffer(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_loan_recv_buffer(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_get_key_value(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        keyHolder: *mut DDS_TopicBuiltinTopicData,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_lookup_instance(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        instance: *const DDS_TopicBuiltinTopicData,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_get_data_instance(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_read_next_instance_w_condition(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        dataValues: *mut DDS_TopicBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_take_next_instance_w_condition(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        dataValues: *mut DDS_TopicBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_read_w_condition(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        dataValues: *mut DDS_TopicBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_take_w_condition(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        dataValues: *mut DDS_TopicBuiltinTopicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_create_readcondition(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_delete_readcondition(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_delete_contained_entities(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_create_querycondition(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_set_qos(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_get_qos(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_set_listener(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_enable(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_as_entity(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
    ) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_get_listener(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_get_liveliness_changed_status(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_get_requested_deadline_missed_status(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_get_subscription_matched_status(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_get_matched_publication_data(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_get_matched_publications(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_get_sample_lost_status(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_get_sample_rejected_status(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_get_subscriber(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_get_topicdescription(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_get_requested_incompatible_qos_status(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_wait_for_historical_data(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_set_qos_with_profile(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_create_named_readcondition(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_delete_named_readcondition(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_get_named_readcondition(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicBuiltinTopicDataDataReader_record_data(
        self_: *mut DDS_TopicBuiltinTopicDataDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ContentFilterTopic_get_related_topic(
        self_: *mut DDS_ContentFilteredTopic,
    ) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ContentFilteredTopic_get_expression_paramters(
        self_: *mut DDS_ContentFilteredTopic,
        para: *mut DDS_StringSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ContentFilteredTopic_set_expression_paramters(
        self_: *mut DDS_ContentFilteredTopic,
        para: *const DDS_StringSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ContentFilteredTopic_get_filter_expression(
        self_: *mut DDS_ContentFilteredTopic,
    ) -> *const DDS_Char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_WriterDataLifecycleQosPolicy {
    pub autodispose_unregistered_instances: DDS_Boolean,
    pub autopurge_unregistered_instance_delay: DDS_Duration_t,
    pub autopurge_disposed_instance_delay: DDS_Duration_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_WriterDataLifecycleQosPolicy"]
        [::std::mem::size_of::<DDS_WriterDataLifecycleQosPolicy>() - 20usize];
    ["Alignment of DDS_WriterDataLifecycleQosPolicy"]
        [::std::mem::align_of::<DDS_WriterDataLifecycleQosPolicy>() - 4usize];
    ["Offset of field: DDS_WriterDataLifecycleQosPolicy::autodispose_unregistered_instances"][::std::mem::offset_of!(
        DDS_WriterDataLifecycleQosPolicy,
        autodispose_unregistered_instances
    )
        - 0usize];
    ["Offset of field: DDS_WriterDataLifecycleQosPolicy::autopurge_unregistered_instance_delay"][::std::mem::offset_of!(
        DDS_WriterDataLifecycleQosPolicy,
        autopurge_unregistered_instance_delay
    )
        - 4usize];
    ["Offset of field: DDS_WriterDataLifecycleQosPolicy::autopurge_disposed_instance_delay"][::std::mem::offset_of!(
        DDS_WriterDataLifecycleQosPolicy,
        autopurge_disposed_instance_delay
    )
        - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_BatchQosPolicy {
    pub enable: DDS_Boolean,
    pub max_data_bytes: DDS_Long,
    pub max_meta_data_bytes: DDS_Long,
    pub max_samples: DDS_Long,
    pub max_flush_delay: DDS_Duration_t,
    pub source_timestamp_resolution: DDS_Duration_t,
    pub thread_safe_write: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_BatchQosPolicy"][::std::mem::size_of::<DDS_BatchQosPolicy>() - 36usize];
    ["Alignment of DDS_BatchQosPolicy"][::std::mem::align_of::<DDS_BatchQosPolicy>() - 4usize];
    ["Offset of field: DDS_BatchQosPolicy::enable"]
        [::std::mem::offset_of!(DDS_BatchQosPolicy, enable) - 0usize];
    ["Offset of field: DDS_BatchQosPolicy::max_data_bytes"]
        [::std::mem::offset_of!(DDS_BatchQosPolicy, max_data_bytes) - 4usize];
    ["Offset of field: DDS_BatchQosPolicy::max_meta_data_bytes"]
        [::std::mem::offset_of!(DDS_BatchQosPolicy, max_meta_data_bytes) - 8usize];
    ["Offset of field: DDS_BatchQosPolicy::max_samples"]
        [::std::mem::offset_of!(DDS_BatchQosPolicy, max_samples) - 12usize];
    ["Offset of field: DDS_BatchQosPolicy::max_flush_delay"]
        [::std::mem::offset_of!(DDS_BatchQosPolicy, max_flush_delay) - 16usize];
    ["Offset of field: DDS_BatchQosPolicy::source_timestamp_resolution"]
        [::std::mem::offset_of!(DDS_BatchQosPolicy, source_timestamp_resolution) - 24usize];
    ["Offset of field: DDS_BatchQosPolicy::thread_safe_write"]
        [::std::mem::offset_of!(DDS_BatchQosPolicy, thread_safe_write) - 32usize];
};
pub const DDS_PublishModeQosPolicyKind_DDS_SYNCHRONOUS_PUBLISH_MODE_QOS:
    DDS_PublishModeQosPolicyKind = 0;
pub const DDS_PublishModeQosPolicyKind_DDS_ASYNCHRONOUS_PUBLISH_MODE_QOS:
    DDS_PublishModeQosPolicyKind = 1;
pub type DDS_PublishModeQosPolicyKind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_PublishModeQosPolicy {
    pub kind: DDS_PublishModeQosPolicyKind,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_PublishModeQosPolicy"]
        [::std::mem::size_of::<DDS_PublishModeQosPolicy>() - 4usize];
    ["Alignment of DDS_PublishModeQosPolicy"]
        [::std::mem::align_of::<DDS_PublishModeQosPolicy>() - 4usize];
    ["Offset of field: DDS_PublishModeQosPolicy::kind"]
        [::std::mem::offset_of!(DDS_PublishModeQosPolicy, kind) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_RtpsReliableWriterProtocol {
    pub heartbeat_period: DDS_Duration_t,
    pub fastheartbeat_period: DDS_Duration_t,
    pub max_heartbeat_retries: DDS_Long,
    pub heartbeats_per_max_samples: DDS_Long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_RtpsReliableWriterProtocol"]
        [::std::mem::size_of::<DDS_RtpsReliableWriterProtocol>() - 24usize];
    ["Alignment of DDS_RtpsReliableWriterProtocol"]
        [::std::mem::align_of::<DDS_RtpsReliableWriterProtocol>() - 4usize];
    ["Offset of field: DDS_RtpsReliableWriterProtocol::heartbeat_period"]
        [::std::mem::offset_of!(DDS_RtpsReliableWriterProtocol, heartbeat_period) - 0usize];
    ["Offset of field: DDS_RtpsReliableWriterProtocol::fastheartbeat_period"]
        [::std::mem::offset_of!(DDS_RtpsReliableWriterProtocol, fastheartbeat_period) - 8usize];
    ["Offset of field: DDS_RtpsReliableWriterProtocol::max_heartbeat_retries"]
        [::std::mem::offset_of!(DDS_RtpsReliableWriterProtocol, max_heartbeat_retries) - 16usize];
    ["Offset of field: DDS_RtpsReliableWriterProtocol::heartbeats_per_max_samples"][::std::mem::offset_of!(
        DDS_RtpsReliableWriterProtocol,
        heartbeats_per_max_samples
    ) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DataWriterProtocolQosPolicy {
    pub push_on_write: DDS_Boolean,
    pub rtps_reliable_writer: DDS_RtpsReliableWriterProtocol,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_DataWriterProtocolQosPolicy"]
        [::std::mem::size_of::<DDS_DataWriterProtocolQosPolicy>() - 28usize];
    ["Alignment of DDS_DataWriterProtocolQosPolicy"]
        [::std::mem::align_of::<DDS_DataWriterProtocolQosPolicy>() - 4usize];
    ["Offset of field: DDS_DataWriterProtocolQosPolicy::push_on_write"]
        [::std::mem::offset_of!(DDS_DataWriterProtocolQosPolicy, push_on_write) - 0usize];
    ["Offset of field: DDS_DataWriterProtocolQosPolicy::rtps_reliable_writer"]
        [::std::mem::offset_of!(DDS_DataWriterProtocolQosPolicy, rtps_reliable_writer) - 4usize];
};
pub const DDS_DataWriterResourceLimitsInstanceReplacementKind_DDS_UNREGISTERED_INSTANCE_REPLACEMENT : DDS_DataWriterResourceLimitsInstanceReplacementKind = 0 ;
pub const DDS_DataWriterResourceLimitsInstanceReplacementKind_DDS_ALIVE_INSTANCE_REPLACEMENT:
    DDS_DataWriterResourceLimitsInstanceReplacementKind = 1;
pub const DDS_DataWriterResourceLimitsInstanceReplacementKind_DDS_DISPOSED_INSTANCE_REPLACEMENT:
    DDS_DataWriterResourceLimitsInstanceReplacementKind = 2;
pub const DDS_DataWriterResourceLimitsInstanceReplacementKind_DDS_ALIVE_THEN_DISPOSED_INSTANCE_REPLACEMENT : DDS_DataWriterResourceLimitsInstanceReplacementKind = 3 ;
pub const DDS_DataWriterResourceLimitsInstanceReplacementKind_DDS_DISPOSED_THEN_ALIVE_INSTANCE_REPLACEMENT : DDS_DataWriterResourceLimitsInstanceReplacementKind = 4 ;
pub const DDS_DataWriterResourceLimitsInstanceReplacementKind_DDS_ALIVE_OR_DISPOSED_INSTANCE_REPLACEMENT : DDS_DataWriterResourceLimitsInstanceReplacementKind = 5 ;
pub type DDS_DataWriterResourceLimitsInstanceReplacementKind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DataWriterResourceLimitsQosPolicy {
    pub initial_concurrent_blocking_threads: DDS_Long,
    pub max_concurrent_blocking_threads: DDS_Long,
    pub instance_replacement: DDS_DataWriterResourceLimitsInstanceReplacementKind,
    pub replace_empty_instances: DDS_Boolean,
    pub autoregister_instances: DDS_Boolean,
    pub max_batches: DDS_Long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_DataWriterResourceLimitsQosPolicy"]
        [::std::mem::size_of::<DDS_DataWriterResourceLimitsQosPolicy>() - 20usize];
    ["Alignment of DDS_DataWriterResourceLimitsQosPolicy"]
        [::std::mem::align_of::<DDS_DataWriterResourceLimitsQosPolicy>() - 4usize];
    ["Offset of field: DDS_DataWriterResourceLimitsQosPolicy::initial_concurrent_blocking_threads"]
        [::std::mem::offset_of!(
            DDS_DataWriterResourceLimitsQosPolicy,
            initial_concurrent_blocking_threads
        ) - 0usize];
    ["Offset of field: DDS_DataWriterResourceLimitsQosPolicy::max_concurrent_blocking_threads"][::std::mem::offset_of!(
        DDS_DataWriterResourceLimitsQosPolicy,
        max_concurrent_blocking_threads
    )
        - 4usize];
    ["Offset of field: DDS_DataWriterResourceLimitsQosPolicy::instance_replacement"][::std::mem::offset_of!(
        DDS_DataWriterResourceLimitsQosPolicy,
        instance_replacement
    ) - 8usize];
    ["Offset of field: DDS_DataWriterResourceLimitsQosPolicy::replace_empty_instances"][::std::mem::offset_of!(
        DDS_DataWriterResourceLimitsQosPolicy,
        replace_empty_instances
    )
        - 12usize];
    ["Offset of field: DDS_DataWriterResourceLimitsQosPolicy::autoregister_instances"][::std::mem::offset_of!(
        DDS_DataWriterResourceLimitsQosPolicy,
        autoregister_instances
    ) - 13usize];
    ["Offset of field: DDS_DataWriterResourceLimitsQosPolicy::max_batches"]
        [::std::mem::offset_of!(DDS_DataWriterResourceLimitsQosPolicy, max_batches) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DataWriterMessageModeQosPolicy {
    pub without_timestamp: DDS_Boolean,
    pub without_inlineQos: DDS_Boolean,
    pub disallow_message_coalesce: DDS_Boolean,
    pub message_header_coalesce: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_DataWriterMessageModeQosPolicy"]
        [::std::mem::size_of::<DDS_DataWriterMessageModeQosPolicy>() - 4usize];
    ["Alignment of DDS_DataWriterMessageModeQosPolicy"]
        [::std::mem::align_of::<DDS_DataWriterMessageModeQosPolicy>() - 1usize];
    ["Offset of field: DDS_DataWriterMessageModeQosPolicy::without_timestamp"]
        [::std::mem::offset_of!(DDS_DataWriterMessageModeQosPolicy, without_timestamp) - 0usize];
    ["Offset of field: DDS_DataWriterMessageModeQosPolicy::without_inlineQos"]
        [::std::mem::offset_of!(DDS_DataWriterMessageModeQosPolicy, without_inlineQos) - 1usize];
    ["Offset of field: DDS_DataWriterMessageModeQosPolicy::disallow_message_coalesce"][::std::mem::offset_of!(
        DDS_DataWriterMessageModeQosPolicy,
        disallow_message_coalesce
    ) - 2usize];
    ["Offset of field: DDS_DataWriterMessageModeQosPolicy::message_header_coalesce"][::std::mem::offset_of!(
        DDS_DataWriterMessageModeQosPolicy,
        message_header_coalesce
    ) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DataWriterQos {
    pub durability: DDS_DurabilityQosPolicy,
    pub durability_service: DDS_DurabilityServiceQosPolicy,
    pub deadline: DDS_DeadlineQosPolicy,
    pub latency_budget: DDS_LatencyBudgetQosPolicy,
    pub liveliness: DDS_LivelinessQosPolicy,
    pub reliability: DDS_ReliabilityQosPolicy,
    pub destination_order: DDS_DestinationOrderQosPolicy,
    pub history: DDS_HistoryQosPolicy,
    pub resource_limits: DDS_ResourceLimitsQosPolicy,
    pub transport_priority: DDS_TransportPriorityQosPolicy,
    pub lifespan: DDS_LifespanQosPolicy,
    pub user_data: DDS_UserDataQosPolicy,
    pub ownership: DDS_OwnershipQosPolicy,
    pub ownership_strength: DDS_OwnershipStrengthQosPolicy,
    pub writer_data_lifecycle: DDS_WriterDataLifecycleQosPolicy,
    pub batch: DDS_BatchQosPolicy,
    pub publish_mode: DDS_PublishModeQosPolicy,
    pub protocol: DDS_DataWriterProtocolQosPolicy,
    pub writer_resource_limits: DDS_DataWriterResourceLimitsQosPolicy,
    pub message_mode: DDS_DataWriterMessageModeQosPolicy,
    pub receive_addresses: DDS_TransportConfigQosPolicy,
    pub property: DDS_PropertyQosPolicy,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_DataWriterQos"][::std::mem::size_of::<DDS_DataWriterQos>() - 528usize];
    ["Alignment of DDS_DataWriterQos"][::std::mem::align_of::<DDS_DataWriterQos>() - 8usize];
    ["Offset of field: DDS_DataWriterQos::durability"]
        [::std::mem::offset_of!(DDS_DataWriterQos, durability) - 0usize];
    ["Offset of field: DDS_DataWriterQos::durability_service"]
        [::std::mem::offset_of!(DDS_DataWriterQos, durability_service) - 4usize];
    ["Offset of field: DDS_DataWriterQos::deadline"]
        [::std::mem::offset_of!(DDS_DataWriterQos, deadline) - 32usize];
    ["Offset of field: DDS_DataWriterQos::latency_budget"]
        [::std::mem::offset_of!(DDS_DataWriterQos, latency_budget) - 40usize];
    ["Offset of field: DDS_DataWriterQos::liveliness"]
        [::std::mem::offset_of!(DDS_DataWriterQos, liveliness) - 48usize];
    ["Offset of field: DDS_DataWriterQos::reliability"]
        [::std::mem::offset_of!(DDS_DataWriterQos, reliability) - 60usize];
    ["Offset of field: DDS_DataWriterQos::destination_order"]
        [::std::mem::offset_of!(DDS_DataWriterQos, destination_order) - 72usize];
    ["Offset of field: DDS_DataWriterQos::history"]
        [::std::mem::offset_of!(DDS_DataWriterQos, history) - 76usize];
    ["Offset of field: DDS_DataWriterQos::resource_limits"]
        [::std::mem::offset_of!(DDS_DataWriterQos, resource_limits) - 84usize];
    ["Offset of field: DDS_DataWriterQos::transport_priority"]
        [::std::mem::offset_of!(DDS_DataWriterQos, transport_priority) - 104usize];
    ["Offset of field: DDS_DataWriterQos::lifespan"]
        [::std::mem::offset_of!(DDS_DataWriterQos, lifespan) - 108usize];
    ["Offset of field: DDS_DataWriterQos::user_data"]
        [::std::mem::offset_of!(DDS_DataWriterQos, user_data) - 120usize];
    ["Offset of field: DDS_DataWriterQos::ownership"]
        [::std::mem::offset_of!(DDS_DataWriterQos, ownership) - 192usize];
    ["Offset of field: DDS_DataWriterQos::ownership_strength"]
        [::std::mem::offset_of!(DDS_DataWriterQos, ownership_strength) - 196usize];
    ["Offset of field: DDS_DataWriterQos::writer_data_lifecycle"]
        [::std::mem::offset_of!(DDS_DataWriterQos, writer_data_lifecycle) - 200usize];
    ["Offset of field: DDS_DataWriterQos::batch"]
        [::std::mem::offset_of!(DDS_DataWriterQos, batch) - 220usize];
    ["Offset of field: DDS_DataWriterQos::publish_mode"]
        [::std::mem::offset_of!(DDS_DataWriterQos, publish_mode) - 256usize];
    ["Offset of field: DDS_DataWriterQos::protocol"]
        [::std::mem::offset_of!(DDS_DataWriterQos, protocol) - 260usize];
    ["Offset of field: DDS_DataWriterQos::writer_resource_limits"]
        [::std::mem::offset_of!(DDS_DataWriterQos, writer_resource_limits) - 288usize];
    ["Offset of field: DDS_DataWriterQos::message_mode"]
        [::std::mem::offset_of!(DDS_DataWriterQos, message_mode) - 308usize];
    ["Offset of field: DDS_DataWriterQos::receive_addresses"]
        [::std::mem::offset_of!(DDS_DataWriterQos, receive_addresses) - 312usize];
    ["Offset of field: DDS_DataWriterQos::property"]
        [::std::mem::offset_of!(DDS_DataWriterQos, property) - 384usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_LivelinessLostStatus {
    pub total_count: DDS_Long,
    pub total_count_change: DDS_Long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_LivelinessLostStatus"]
        [::std::mem::size_of::<DDS_LivelinessLostStatus>() - 8usize];
    ["Alignment of DDS_LivelinessLostStatus"]
        [::std::mem::align_of::<DDS_LivelinessLostStatus>() - 4usize];
    ["Offset of field: DDS_LivelinessLostStatus::total_count"]
        [::std::mem::offset_of!(DDS_LivelinessLostStatus, total_count) - 0usize];
    ["Offset of field: DDS_LivelinessLostStatus::total_count_change"]
        [::std::mem::offset_of!(DDS_LivelinessLostStatus, total_count_change) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_OfferedDeadlineMissedStatus {
    pub total_count: DDS_Long,
    pub total_count_change: DDS_Long,
    pub last_instance_handle: DDS_InstanceHandle_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_OfferedDeadlineMissedStatus"]
        [::std::mem::size_of::<DDS_OfferedDeadlineMissedStatus>() - 28usize];
    ["Alignment of DDS_OfferedDeadlineMissedStatus"]
        [::std::mem::align_of::<DDS_OfferedDeadlineMissedStatus>() - 4usize];
    ["Offset of field: DDS_OfferedDeadlineMissedStatus::total_count"]
        [::std::mem::offset_of!(DDS_OfferedDeadlineMissedStatus, total_count) - 0usize];
    ["Offset of field: DDS_OfferedDeadlineMissedStatus::total_count_change"]
        [::std::mem::offset_of!(DDS_OfferedDeadlineMissedStatus, total_count_change) - 4usize];
    ["Offset of field: DDS_OfferedDeadlineMissedStatus::last_instance_handle"]
        [::std::mem::offset_of!(DDS_OfferedDeadlineMissedStatus, last_instance_handle) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_OfferedIncompatibleQosStatus {
    pub total_count: DDS_Long,
    pub total_count_change: DDS_Long,
    pub last_policy_id: DDS_QosPolicyId_t,
    pub policies: DDS_QosPolicyCountSeq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_OfferedIncompatibleQosStatus"]
        [::std::mem::size_of::<DDS_OfferedIncompatibleQosStatus>() - 88usize];
    ["Alignment of DDS_OfferedIncompatibleQosStatus"]
        [::std::mem::align_of::<DDS_OfferedIncompatibleQosStatus>() - 8usize];
    ["Offset of field: DDS_OfferedIncompatibleQosStatus::total_count"]
        [::std::mem::offset_of!(DDS_OfferedIncompatibleQosStatus, total_count) - 0usize];
    ["Offset of field: DDS_OfferedIncompatibleQosStatus::total_count_change"]
        [::std::mem::offset_of!(DDS_OfferedIncompatibleQosStatus, total_count_change) - 4usize];
    ["Offset of field: DDS_OfferedIncompatibleQosStatus::last_policy_id"]
        [::std::mem::offset_of!(DDS_OfferedIncompatibleQosStatus, last_policy_id) - 8usize];
    ["Offset of field: DDS_OfferedIncompatibleQosStatus::policies"]
        [::std::mem::offset_of!(DDS_OfferedIncompatibleQosStatus, policies) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_PublicationMatchedStatus {
    pub total_count: DDS_Long,
    pub total_count_change: DDS_Long,
    pub current_count: DDS_Long,
    pub current_count_change: DDS_Long,
    pub last_subscription_handle: DDS_InstanceHandle_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_PublicationMatchedStatus"]
        [::std::mem::size_of::<DDS_PublicationMatchedStatus>() - 36usize];
    ["Alignment of DDS_PublicationMatchedStatus"]
        [::std::mem::align_of::<DDS_PublicationMatchedStatus>() - 4usize];
    ["Offset of field: DDS_PublicationMatchedStatus::total_count"]
        [::std::mem::offset_of!(DDS_PublicationMatchedStatus, total_count) - 0usize];
    ["Offset of field: DDS_PublicationMatchedStatus::total_count_change"]
        [::std::mem::offset_of!(DDS_PublicationMatchedStatus, total_count_change) - 4usize];
    ["Offset of field: DDS_PublicationMatchedStatus::current_count"]
        [::std::mem::offset_of!(DDS_PublicationMatchedStatus, current_count) - 8usize];
    ["Offset of field: DDS_PublicationMatchedStatus::current_count_change"]
        [::std::mem::offset_of!(DDS_PublicationMatchedStatus, current_count_change) - 12usize];
    ["Offset of field: DDS_PublicationMatchedStatus::last_subscription_handle"]
        [::std::mem::offset_of!(DDS_PublicationMatchedStatus, last_subscription_handle) - 16usize];
};
pub const DDS_TransportKind_DDS_TRANSPORT_KIND_RESERVED: DDS_TransportKind = 0;
pub const DDS_TransportKind_DDS_TRANSPORT_KIND_UDPv4: DDS_TransportKind = 1;
pub const DDS_TransportKind_DDS_TRANSPORT_KIND_UDPv6: DDS_TransportKind = 2;
pub const DDS_TransportKind_DDS_TRANSPORT_KIND_TCPv4: DDS_TransportKind = 8;
pub const DDS_TransportKind_DDS_TRANSPORT_KIND_TCPv6: DDS_TransportKind = 16;
pub const DDS_TransportKind_DDS_TRANSPORT_KIND_UDPv4_RAW: DDS_TransportKind = 32;
pub const DDS_TransportKind_DDS_TRANSPORT_KIND_TCPv4_RAW: DDS_TransportKind = 64;
pub const DDS_TransportKind_DDS_TRANSPORT_KIND_TCPv4_CC: DDS_TransportKind = 128;
pub const DDS_TransportKind_DDS_TRANSPORT_KIND_TCPv4_MC: DDS_TransportKind = 256;
pub const DDS_TransportKind_DDS_TRANSPORT_KIND_SHMEM: DDS_TransportKind = 16777216;
pub const DDS_TransportKind_DDS_TRANSPORT_KIND_RAPIDIO: DDS_TransportKind = 100;
pub const DDS_TransportKind_DDS_TRANSPORT_KIND_PCIE: DDS_TransportKind = 101;
pub type DDS_TransportKind = ::std::os::raw::c_int;
pub const DDS_LocatorStatusKind_DDS_LOCATOR_STATUS_NOT_VALID: DDS_LocatorStatusKind = 0;
pub const DDS_LocatorStatusKind_DDS_LOCATOR_STATUS_WATING_SEND: DDS_LocatorStatusKind = 1;
pub const DDS_LocatorStatusKind_DDS_LOCATOR_STATUS_SENDED: DDS_LocatorStatusKind = 2;
pub const DDS_LocatorStatusKind_DDS_LOCATOR_STATUS_ERROR: DDS_LocatorStatusKind = 3;
pub const DDS_LocatorStatusKind_DDS_LOCATOR_STATUS_RECONNECTING: DDS_LocatorStatusKind = 4;
pub type DDS_LocatorStatusKind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_PublicationSendLocator {
    pub locator_type: DDS_TransportKind,
    pub locator_addr: [DDS_Octet; 4usize],
    pub locator_port: DDS_ULong,
    pub locator_status: DDS_LocatorStatusKind,
    pub locator_return_code: DDS_Long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_PublicationSendLocator"]
        [::std::mem::size_of::<DDS_PublicationSendLocator>() - 20usize];
    ["Alignment of DDS_PublicationSendLocator"]
        [::std::mem::align_of::<DDS_PublicationSendLocator>() - 4usize];
    ["Offset of field: DDS_PublicationSendLocator::locator_type"]
        [::std::mem::offset_of!(DDS_PublicationSendLocator, locator_type) - 0usize];
    ["Offset of field: DDS_PublicationSendLocator::locator_addr"]
        [::std::mem::offset_of!(DDS_PublicationSendLocator, locator_addr) - 4usize];
    ["Offset of field: DDS_PublicationSendLocator::locator_port"]
        [::std::mem::offset_of!(DDS_PublicationSendLocator, locator_port) - 8usize];
    ["Offset of field: DDS_PublicationSendLocator::locator_status"]
        [::std::mem::offset_of!(DDS_PublicationSendLocator, locator_status) - 12usize];
    ["Offset of field: DDS_PublicationSendLocator::locator_return_code"]
        [::std::mem::offset_of!(DDS_PublicationSendLocator, locator_return_code) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_PublicationSendLocatorSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_PublicationSendLocator,
    pub _discontiguousBuffer: *mut *mut DDS_PublicationSendLocator,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_PublicationSendLocatorSeq"]
        [::std::mem::size_of::<DDS_PublicationSendLocatorSeq>() - 72usize];
    ["Alignment of DDS_PublicationSendLocatorSeq"]
        [::std::mem::align_of::<DDS_PublicationSendLocatorSeq>() - 8usize];
    ["Offset of field: DDS_PublicationSendLocatorSeq::_owned"]
        [::std::mem::offset_of!(DDS_PublicationSendLocatorSeq, _owned) - 0usize];
    ["Offset of field: DDS_PublicationSendLocatorSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_PublicationSendLocatorSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_PublicationSendLocatorSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_PublicationSendLocatorSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_PublicationSendLocatorSeq::_maximum"]
        [::std::mem::offset_of!(DDS_PublicationSendLocatorSeq, _maximum) - 24usize];
    ["Offset of field: DDS_PublicationSendLocatorSeq::_length"]
        [::std::mem::offset_of!(DDS_PublicationSendLocatorSeq, _length) - 28usize];
    ["Offset of field: DDS_PublicationSendLocatorSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_PublicationSendLocatorSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_PublicationSendLocatorSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_PublicationSendLocatorSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_PublicationSendLocatorSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_PublicationSendLocatorSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_PublicationSendLocatorSeq::_mempool"]
        [::std::mem::offset_of!(DDS_PublicationSendLocatorSeq, _mempool) - 56usize];
    ["Offset of field: DDS_PublicationSendLocatorSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_PublicationSendLocatorSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_is_initialized(
        self_: *const DDS_PublicationSendLocatorSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_set(
        self_: *mut DDS_PublicationSendLocatorSeq,
        index: DDS_ULong,
        newValue: *const DDS_PublicationSendLocator,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_initialize(self_: *mut DDS_PublicationSendLocatorSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_new(
        newMax: DDS_ULong,
    ) -> *mut DDS_PublicationSendLocatorSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_get_maximum(
        self_: *const DDS_PublicationSendLocatorSeq,
    ) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_set_maximum(
        self_: *mut DDS_PublicationSendLocatorSeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_get_length(
        self_: *const DDS_PublicationSendLocatorSeq,
    ) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_set_length(
        self_: *mut DDS_PublicationSendLocatorSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_ensure_length(
        self_: *mut DDS_PublicationSendLocatorSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_get_reference(
        self_: *const DDS_PublicationSendLocatorSeq,
        index: DDS_ULong,
    ) -> *mut DDS_PublicationSendLocator;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_append(
        self_: *mut DDS_PublicationSendLocatorSeq,
        newValue: *const DDS_PublicationSendLocator,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_append_autosize(
        self_: *mut DDS_PublicationSendLocatorSeq,
        newValue: *const DDS_PublicationSendLocator,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_copy_no_alloc(
        self_: *mut DDS_PublicationSendLocatorSeq,
        src: *const DDS_PublicationSendLocatorSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_copy(
        self_: *mut DDS_PublicationSendLocatorSeq,
        src: *const DDS_PublicationSendLocatorSeq,
    ) -> *mut DDS_PublicationSendLocatorSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_compare(
        self_: *const DDS_PublicationSendLocatorSeq,
        src: *const DDS_PublicationSendLocatorSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_from_array(
        self_: *mut DDS_PublicationSendLocatorSeq,
        srcArray: *const DDS_PublicationSendLocator,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_to_array(
        self_: *const DDS_PublicationSendLocatorSeq,
        dstArray: *mut DDS_PublicationSendLocator,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_loan_contiguous(
        self_: *mut DDS_PublicationSendLocatorSeq,
        buffer: *mut DDS_PublicationSendLocator,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_loan_discontiguous(
        self_: *mut DDS_PublicationSendLocatorSeq,
        buffer: *mut *mut DDS_PublicationSendLocator,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_unloan(
        self_: *mut DDS_PublicationSendLocatorSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_get_contiguous_buffer(
        self_: *const DDS_PublicationSendLocatorSeq,
    ) -> *mut DDS_PublicationSendLocator;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_get_discontiguous_buffer(
        self_: *const DDS_PublicationSendLocatorSeq,
    ) -> *mut *mut DDS_PublicationSendLocator;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_get_reader_and_data_ptr(
        self_: *const DDS_PublicationSendLocatorSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_set_reader_and_data_ptr(
        self_: *mut DDS_PublicationSendLocatorSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_has_ownership(
        self_: *const DDS_PublicationSendLocatorSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_clear(
        self_: *mut DDS_PublicationSendLocatorSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_finalize(
        self_: *mut DDS_PublicationSendLocatorSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_shallow_copy(
        self_: *mut DDS_PublicationSendLocatorSeq,
        other: *mut DDS_PublicationSendLocatorSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendLocatorSeq_initialize_ex(
        self_: *mut DDS_PublicationSendLocatorSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_PublicationSendStatus {
    pub subscription_handle: DDS_InstanceHandle_t,
    pub send_locators: DDS_PublicationSendLocatorSeq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_PublicationSendStatus"]
        [::std::mem::size_of::<DDS_PublicationSendStatus>() - 96usize];
    ["Alignment of DDS_PublicationSendStatus"]
        [::std::mem::align_of::<DDS_PublicationSendStatus>() - 8usize];
    ["Offset of field: DDS_PublicationSendStatus::subscription_handle"]
        [::std::mem::offset_of!(DDS_PublicationSendStatus, subscription_handle) - 0usize];
    ["Offset of field: DDS_PublicationSendStatus::send_locators"]
        [::std::mem::offset_of!(DDS_PublicationSendStatus, send_locators) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_PublicationSendStatusSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut DDS_PublicationSendStatus,
    pub _discontiguousBuffer: *mut *mut DDS_PublicationSendStatus,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_PublicationSendStatusSeq"]
        [::std::mem::size_of::<DDS_PublicationSendStatusSeq>() - 72usize];
    ["Alignment of DDS_PublicationSendStatusSeq"]
        [::std::mem::align_of::<DDS_PublicationSendStatusSeq>() - 8usize];
    ["Offset of field: DDS_PublicationSendStatusSeq::_owned"]
        [::std::mem::offset_of!(DDS_PublicationSendStatusSeq, _owned) - 0usize];
    ["Offset of field: DDS_PublicationSendStatusSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_PublicationSendStatusSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_PublicationSendStatusSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_PublicationSendStatusSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_PublicationSendStatusSeq::_maximum"]
        [::std::mem::offset_of!(DDS_PublicationSendStatusSeq, _maximum) - 24usize];
    ["Offset of field: DDS_PublicationSendStatusSeq::_length"]
        [::std::mem::offset_of!(DDS_PublicationSendStatusSeq, _length) - 28usize];
    ["Offset of field: DDS_PublicationSendStatusSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_PublicationSendStatusSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_PublicationSendStatusSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_PublicationSendStatusSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_PublicationSendStatusSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_PublicationSendStatusSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_PublicationSendStatusSeq::_mempool"]
        [::std::mem::offset_of!(DDS_PublicationSendStatusSeq, _mempool) - 56usize];
    ["Offset of field: DDS_PublicationSendStatusSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_PublicationSendStatusSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_is_initialized(
        self_: *const DDS_PublicationSendStatusSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_set(
        self_: *mut DDS_PublicationSendStatusSeq,
        index: DDS_ULong,
        newValue: *const DDS_PublicationSendStatus,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_initialize(self_: *mut DDS_PublicationSendStatusSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_new(newMax: DDS_ULong)
    -> *mut DDS_PublicationSendStatusSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_get_maximum(
        self_: *const DDS_PublicationSendStatusSeq,
    ) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_set_maximum(
        self_: *mut DDS_PublicationSendStatusSeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_get_length(
        self_: *const DDS_PublicationSendStatusSeq,
    ) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_set_length(
        self_: *mut DDS_PublicationSendStatusSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_ensure_length(
        self_: *mut DDS_PublicationSendStatusSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_get_reference(
        self_: *const DDS_PublicationSendStatusSeq,
        index: DDS_ULong,
    ) -> *mut DDS_PublicationSendStatus;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_append(
        self_: *mut DDS_PublicationSendStatusSeq,
        newValue: *const DDS_PublicationSendStatus,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_append_autosize(
        self_: *mut DDS_PublicationSendStatusSeq,
        newValue: *const DDS_PublicationSendStatus,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_copy_no_alloc(
        self_: *mut DDS_PublicationSendStatusSeq,
        src: *const DDS_PublicationSendStatusSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_copy(
        self_: *mut DDS_PublicationSendStatusSeq,
        src: *const DDS_PublicationSendStatusSeq,
    ) -> *mut DDS_PublicationSendStatusSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_compare(
        self_: *const DDS_PublicationSendStatusSeq,
        src: *const DDS_PublicationSendStatusSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_from_array(
        self_: *mut DDS_PublicationSendStatusSeq,
        srcArray: *const DDS_PublicationSendStatus,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_to_array(
        self_: *const DDS_PublicationSendStatusSeq,
        dstArray: *mut DDS_PublicationSendStatus,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_loan_contiguous(
        self_: *mut DDS_PublicationSendStatusSeq,
        buffer: *mut DDS_PublicationSendStatus,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_loan_discontiguous(
        self_: *mut DDS_PublicationSendStatusSeq,
        buffer: *mut *mut DDS_PublicationSendStatus,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_unloan(
        self_: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_get_contiguous_buffer(
        self_: *const DDS_PublicationSendStatusSeq,
    ) -> *mut DDS_PublicationSendStatus;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_get_discontiguous_buffer(
        self_: *const DDS_PublicationSendStatusSeq,
    ) -> *mut *mut DDS_PublicationSendStatus;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_get_reader_and_data_ptr(
        self_: *const DDS_PublicationSendStatusSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_set_reader_and_data_ptr(
        self_: *mut DDS_PublicationSendStatusSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_has_ownership(
        self_: *const DDS_PublicationSendStatusSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_clear(
        self_: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_finalize(
        self_: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_shallow_copy(
        self_: *mut DDS_PublicationSendStatusSeq,
        other: *mut DDS_PublicationSendStatusSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublicationSendStatusSeq_initialize_ex(
        self_: *mut DDS_PublicationSendStatusSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterRegisterInstance(
        writer: *mut DDS_DataWriter,
        instance: *const ::std::os::raw::c_void,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterRegisterInstanceWTimestamp(
        writer: *mut DDS_DataWriter,
        instance: *const ::std::os::raw::c_void,
        timestamp: *const DDS_Time_t,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterUnregisterInstance(
        writer: *mut DDS_DataWriter,
        instance: *const ::std::os::raw::c_void,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterUnregisterInstanceWTimestamp(
        writer: *mut DDS_DataWriter,
        instance: *const ::std::os::raw::c_void,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterGetKeyValue(
        writer: *mut DDS_DataWriter,
        keyHolder: *mut ::std::os::raw::c_void,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterLookupInstance(
        writer: *mut DDS_DataWriter,
        keyHolder: *const ::std::os::raw::c_void,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterWrite(
        writer: *mut DDS_DataWriter,
        sample: *const ::std::os::raw::c_void,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterWriteWTimestamp(
        writer: *mut DDS_DataWriter,
        sample: *const ::std::os::raw::c_void,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterWriteWDst(
        writer: *mut DDS_DataWriter,
        sample: *const ::std::os::raw::c_void,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterDispose(
        writer: *mut DDS_DataWriter,
        instance: *const ::std::os::raw::c_void,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterDisposeWTimestamp(
        writer: *mut DDS_DataWriter,
        instance: *const ::std::os::raw::c_void,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterGetLivelinessLostStatus(
        writer: *mut DDS_DataWriter,
        status: *mut DDS_LivelinessLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterAssertLiveliness(writer: *mut DDS_DataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterGetOfferedDeadlineMissedStatus(
        writer: *mut DDS_DataWriter,
        status: *mut DDS_OfferedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterGetOfferedIncompatibleQosStatus(
        writer: *mut DDS_DataWriter,
        status: *mut DDS_OfferedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterGetPublicationMatchedStatus(
        writer: *mut DDS_DataWriter,
        status: *mut DDS_PublicationMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterGetMatchedSubscriptions(
        writer: *mut DDS_DataWriter,
        handleSeq: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterGetMatchedSubscriptionData(
        writer: *mut DDS_DataWriter,
        handle: *const DDS_InstanceHandle_t,
        subscriptionData: *mut DDS_SubscriptionBuiltinTopicData,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterGetSendStatus(
        dw: *mut DDS_DataWriter,
        statusSeq: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterPrintSendStatus(
        dw: *mut DDS_DataWriter,
        statusSeq: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterGetSendStatusWithHandle(
        dw: *mut DDS_DataWriter,
        status: *mut DDS_PublicationSendStatus,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterWaitForAcknowledgments(
        writer: *mut DDS_DataWriter,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterGetTopic(writer: *mut DDS_DataWriter) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterGetPublisher(writer: *mut DDS_DataWriter) -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterSetQos(
        writer: *mut DDS_DataWriter,
        qos: *const DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterGetQos(
        writer: *mut DDS_DataWriter,
        qos: *mut DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterSetListener(
        writer: *mut DDS_DataWriter,
        listener: *mut DataWriterListenerImpl,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterGetListener(writer: *mut DDS_DataWriter) -> *mut DataWriterListenerImpl;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterEnable(writer: *mut DDS_DataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterFlush(dw: *mut DDS_DataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterAsEntity(self_: *mut DDS_DataWriter) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterSetQosWithProfile(
        dw: *mut DDS_DataWriter,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DataWriterSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut *mut DDS_DataWriter,
    pub _discontiguousBuffer: *mut *mut *mut DDS_DataWriter,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_DataWriterSeq"][::std::mem::size_of::<DDS_DataWriterSeq>() - 72usize];
    ["Alignment of DDS_DataWriterSeq"][::std::mem::align_of::<DDS_DataWriterSeq>() - 8usize];
    ["Offset of field: DDS_DataWriterSeq::_owned"]
        [::std::mem::offset_of!(DDS_DataWriterSeq, _owned) - 0usize];
    ["Offset of field: DDS_DataWriterSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_DataWriterSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_DataWriterSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_DataWriterSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_DataWriterSeq::_maximum"]
        [::std::mem::offset_of!(DDS_DataWriterSeq, _maximum) - 24usize];
    ["Offset of field: DDS_DataWriterSeq::_length"]
        [::std::mem::offset_of!(DDS_DataWriterSeq, _length) - 28usize];
    ["Offset of field: DDS_DataWriterSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_DataWriterSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_DataWriterSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_DataWriterSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_DataWriterSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_DataWriterSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_DataWriterSeq::_mempool"]
        [::std::mem::offset_of!(DDS_DataWriterSeq, _mempool) - 56usize];
    ["Offset of field: DDS_DataWriterSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_DataWriterSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_is_initialized(self_: *const DDS_DataWriterSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_set(
        self_: *mut DDS_DataWriterSeq,
        index: DDS_ULong,
        newValue: *mut *const DDS_DataWriter,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_initialize(self_: *mut DDS_DataWriterSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_new(newMax: DDS_ULong) -> *mut DDS_DataWriterSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_get_maximum(self_: *const DDS_DataWriterSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_set_maximum(
        self_: *mut DDS_DataWriterSeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_get_length(self_: *const DDS_DataWriterSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_set_length(
        self_: *mut DDS_DataWriterSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_ensure_length(
        self_: *mut DDS_DataWriterSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_get_reference(
        self_: *const DDS_DataWriterSeq,
        index: DDS_ULong,
    ) -> *mut *mut DDS_DataWriter;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_append(
        self_: *mut DDS_DataWriterSeq,
        newValue: *mut *const DDS_DataWriter,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_append_autosize(
        self_: *mut DDS_DataWriterSeq,
        newValue: *mut *const DDS_DataWriter,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_copy_no_alloc(
        self_: *mut DDS_DataWriterSeq,
        src: *const DDS_DataWriterSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_copy(
        self_: *mut DDS_DataWriterSeq,
        src: *const DDS_DataWriterSeq,
    ) -> *mut DDS_DataWriterSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_compare(
        self_: *const DDS_DataWriterSeq,
        src: *const DDS_DataWriterSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_from_array(
        self_: *mut DDS_DataWriterSeq,
        srcArray: *mut *const DDS_DataWriter,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_to_array(
        self_: *const DDS_DataWriterSeq,
        dstArray: *mut *mut DDS_DataWriter,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_loan_contiguous(
        self_: *mut DDS_DataWriterSeq,
        buffer: *mut *mut DDS_DataWriter,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_loan_discontiguous(
        self_: *mut DDS_DataWriterSeq,
        buffer: *mut *mut *mut DDS_DataWriter,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_unloan(self_: *mut DDS_DataWriterSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_get_contiguous_buffer(
        self_: *const DDS_DataWriterSeq,
    ) -> *mut *mut DDS_DataWriter;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_get_discontiguous_buffer(
        self_: *const DDS_DataWriterSeq,
    ) -> *mut *mut *mut DDS_DataWriter;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_get_reader_and_data_ptr(
        self_: *const DDS_DataWriterSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_set_reader_and_data_ptr(
        self_: *mut DDS_DataWriterSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_has_ownership(self_: *const DDS_DataWriterSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_clear(self_: *mut DDS_DataWriterSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_finalize(self_: *mut DDS_DataWriterSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_shallow_copy(
        self_: *mut DDS_DataWriterSeq,
        other: *mut DDS_DataWriterSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterSeq_initialize_ex(
        self_: *mut DDS_DataWriterSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
pub type DataWriterListenerOfferedDeadlineMissedCallback = ::std::option::Option<
    unsafe extern "C" fn(
        writer: *mut DDS_DataWriter,
        status: *const DDS_OfferedDeadlineMissedStatus,
    ),
>;
pub type DataWriterListenerLivelinessLostCallback = ::std::option::Option<
    unsafe extern "C" fn(writer: *mut DDS_DataWriter, status: *const DDS_LivelinessLostStatus),
>;
pub type DataWriterListenerOfferedIncompatibleQosCallback = ::std::option::Option<
    unsafe extern "C" fn(
        writer: *mut DDS_DataWriter,
        status: *const DDS_OfferedIncompatibleQosStatus,
    ),
>;
pub type DataWriterListenerPublicationMatchedCallback = ::std::option::Option<
    unsafe extern "C" fn(writer: *mut DDS_DataWriter, status: *const DDS_PublicationMatchedStatus),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DataWriterListener {
    pub listener: DDS_Listener,
    pub on_offered_deadline_missed: DataWriterListenerOfferedDeadlineMissedCallback,
    pub on_offered_incompatible_qos: DataWriterListenerOfferedIncompatibleQosCallback,
    pub on_liveliness_lost: DataWriterListenerLivelinessLostCallback,
    pub on_publication_matched: DataWriterListenerPublicationMatchedCallback,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_DataWriterListener"][::std::mem::size_of::<DDS_DataWriterListener>() - 40usize];
    ["Alignment of DDS_DataWriterListener"]
        [::std::mem::align_of::<DDS_DataWriterListener>() - 8usize];
    ["Offset of field: DDS_DataWriterListener::listener"]
        [::std::mem::offset_of!(DDS_DataWriterListener, listener) - 0usize];
    ["Offset of field: DDS_DataWriterListener::on_offered_deadline_missed"]
        [::std::mem::offset_of!(DDS_DataWriterListener, on_offered_deadline_missed) - 8usize];
    ["Offset of field: DDS_DataWriterListener::on_offered_incompatible_qos"]
        [::std::mem::offset_of!(DDS_DataWriterListener, on_offered_incompatible_qos) - 16usize];
    ["Offset of field: DDS_DataWriterListener::on_liveliness_lost"]
        [::std::mem::offset_of!(DDS_DataWriterListener, on_liveliness_lost) - 24usize];
    ["Offset of field: DDS_DataWriterListener::on_publication_matched"]
        [::std::mem::offset_of!(DDS_DataWriterListener, on_publication_matched) - 32usize];
};
pub type DDS_DomainId_t = DDS_ULong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_EntityFactoryQosPolicy {
    pub autoenable_created_entities: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_EntityFactoryQosPolicy"]
        [::std::mem::size_of::<DDS_EntityFactoryQosPolicy>() - 1usize];
    ["Alignment of DDS_EntityFactoryQosPolicy"]
        [::std::mem::align_of::<DDS_EntityFactoryQosPolicy>() - 1usize];
    ["Offset of field: DDS_EntityFactoryQosPolicy::autoenable_created_entities"]
        [::std::mem::offset_of!(DDS_EntityFactoryQosPolicy, autoenable_created_entities) - 0usize];
};
pub const DDS_ReceiverThreadKind_DDS_THREAD_PER_PORT: DDS_ReceiverThreadKind = 0;
pub const DDS_ReceiverThreadKind_DDS_THREAD_PER_KIND: DDS_ReceiverThreadKind = 1;
pub const DDS_ReceiverThreadKind_DDS_THREAD_ALL_PORTS: DDS_ReceiverThreadKind = 2;
pub type DDS_ReceiverThreadKind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ReceiverThreadConfigQosPolicy {
    pub kind: DDS_ReceiverThreadKind,
    pub receive_buffer_length: DDS_Long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_ReceiverThreadConfigQosPolicy"]
        [::std::mem::size_of::<DDS_ReceiverThreadConfigQosPolicy>() - 8usize];
    ["Alignment of DDS_ReceiverThreadConfigQosPolicy"]
        [::std::mem::align_of::<DDS_ReceiverThreadConfigQosPolicy>() - 4usize];
    ["Offset of field: DDS_ReceiverThreadConfigQosPolicy::kind"]
        [::std::mem::offset_of!(DDS_ReceiverThreadConfigQosPolicy, kind) - 0usize];
    ["Offset of field: DDS_ReceiverThreadConfigQosPolicy::receive_buffer_length"]
        [::std::mem::offset_of!(DDS_ReceiverThreadConfigQosPolicy, receive_buffer_length) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ThreadCoreAffinityQosPolicy {
    pub receive_thread_default_affinity_mask: DDS_ULong,
    pub user_data_receive_thread_affinity_mask: DDS_ULong,
    pub builtin_data_receive_thread_affinity_mask: DDS_ULong,
    pub timer_thread_affinity_mask: DDS_ULong,
    pub async_send_thread_affinity_mask: DDS_ULong,
    pub tcp_receive_thread_affinity_masks: DDS_ULongSeq,
    pub tcp_receive_thread_repeat_use_affinity_masks: ZR_BOOLEAN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_ThreadCoreAffinityQosPolicy"]
        [::std::mem::size_of::<DDS_ThreadCoreAffinityQosPolicy>() - 104usize];
    ["Alignment of DDS_ThreadCoreAffinityQosPolicy"]
        [::std::mem::align_of::<DDS_ThreadCoreAffinityQosPolicy>() - 8usize];
    ["Offset of field: DDS_ThreadCoreAffinityQosPolicy::receive_thread_default_affinity_mask"][::std::mem::offset_of!(
        DDS_ThreadCoreAffinityQosPolicy,
        receive_thread_default_affinity_mask
    )
        - 0usize];
    ["Offset of field: DDS_ThreadCoreAffinityQosPolicy::user_data_receive_thread_affinity_mask"][::std::mem::offset_of!(
        DDS_ThreadCoreAffinityQosPolicy,
        user_data_receive_thread_affinity_mask
    )
        - 4usize];
    ["Offset of field: DDS_ThreadCoreAffinityQosPolicy::builtin_data_receive_thread_affinity_mask"]
        [::std::mem::offset_of!(
            DDS_ThreadCoreAffinityQosPolicy,
            builtin_data_receive_thread_affinity_mask
        ) - 8usize];
    ["Offset of field: DDS_ThreadCoreAffinityQosPolicy::timer_thread_affinity_mask"][::std::mem::offset_of!(
        DDS_ThreadCoreAffinityQosPolicy,
        timer_thread_affinity_mask
    ) - 12usize];
    ["Offset of field: DDS_ThreadCoreAffinityQosPolicy::async_send_thread_affinity_mask"][::std::mem::offset_of!(
        DDS_ThreadCoreAffinityQosPolicy,
        async_send_thread_affinity_mask
    )
        - 16usize];
    ["Offset of field: DDS_ThreadCoreAffinityQosPolicy::tcp_receive_thread_affinity_masks"][::std::mem::offset_of!(
        DDS_ThreadCoreAffinityQosPolicy,
        tcp_receive_thread_affinity_masks
    )
        - 24usize];
    [
        "Offset of field: DDS_ThreadCoreAffinityQosPolicy::tcp_receive_thread_repeat_use_affinity_masks",
    ][::std::mem::offset_of!(
        DDS_ThreadCoreAffinityQosPolicy,
        tcp_receive_thread_repeat_use_affinity_masks
    ) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DiscoveryConfigQosPolicy {
    pub participant_liveliness_assert_period: DDS_Duration_t,
    pub participant_liveliness_lease_duration: DDS_Duration_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_DiscoveryConfigQosPolicy"]
        [::std::mem::size_of::<DDS_DiscoveryConfigQosPolicy>() - 16usize];
    ["Alignment of DDS_DiscoveryConfigQosPolicy"]
        [::std::mem::align_of::<DDS_DiscoveryConfigQosPolicy>() - 4usize];
    ["Offset of field: DDS_DiscoveryConfigQosPolicy::participant_liveliness_assert_period"][::std::mem::offset_of!(
        DDS_DiscoveryConfigQosPolicy,
        participant_liveliness_assert_period
    )
        - 0usize];
    ["Offset of field: DDS_DiscoveryConfigQosPolicy::participant_liveliness_lease_duration"][::std::mem::offset_of!(
        DDS_DiscoveryConfigQosPolicy,
        participant_liveliness_lease_duration
    )
        - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_MsgStatisticsInfoQosPolicy {
    pub enable: DDS_Boolean,
    pub send_period: DDS_Duration_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_MsgStatisticsInfoQosPolicy"]
        [::std::mem::size_of::<DDS_MsgStatisticsInfoQosPolicy>() - 12usize];
    ["Alignment of DDS_MsgStatisticsInfoQosPolicy"]
        [::std::mem::align_of::<DDS_MsgStatisticsInfoQosPolicy>() - 4usize];
    ["Offset of field: DDS_MsgStatisticsInfoQosPolicy::enable"]
        [::std::mem::offset_of!(DDS_MsgStatisticsInfoQosPolicy, enable) - 0usize];
    ["Offset of field: DDS_MsgStatisticsInfoQosPolicy::send_period"]
        [::std::mem::offset_of!(DDS_MsgStatisticsInfoQosPolicy, send_period) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DomainParticipantQos {
    pub user_data: DDS_UserDataQosPolicy,
    pub entity_factory: DDS_EntityFactoryQosPolicy,
    pub receiver_thread_config: DDS_ReceiverThreadConfigQosPolicy,
    pub domain_destination_addresses: DDS_TransportConfigQosPolicy,
    pub domain_receive_addresses: DDS_TransportConfigQosPolicy,
    pub pdp_send_addresses: DDS_TransportConfigQosPolicy,
    pub pdp_destination_addresses: DDS_TransportConfigQosPolicy,
    pub pdp_receive_addresses: DDS_TransportConfigQosPolicy,
    pub metatraffic_receive_addresses: DDS_TransportConfigQosPolicy,
    pub usertraffic_receive_addresses: DDS_TransportConfigQosPolicy,
    pub thread_core_affinity: DDS_ThreadCoreAffinityQosPolicy,
    pub discovery_config: DDS_DiscoveryConfigQosPolicy,
    pub message_staticstics_info_config: DDS_MsgStatisticsInfoQosPolicy,
    pub rtps_message_little_endian: DDS_Boolean,
    pub property: DDS_PropertyQosPolicy,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_DomainParticipantQos"]
        [::std::mem::size_of::<DDS_DomainParticipantQos>() - 872usize];
    ["Alignment of DDS_DomainParticipantQos"]
        [::std::mem::align_of::<DDS_DomainParticipantQos>() - 8usize];
    ["Offset of field: DDS_DomainParticipantQos::user_data"]
        [::std::mem::offset_of!(DDS_DomainParticipantQos, user_data) - 0usize];
    ["Offset of field: DDS_DomainParticipantQos::entity_factory"]
        [::std::mem::offset_of!(DDS_DomainParticipantQos, entity_factory) - 72usize];
    ["Offset of field: DDS_DomainParticipantQos::receiver_thread_config"]
        [::std::mem::offset_of!(DDS_DomainParticipantQos, receiver_thread_config) - 76usize];
    ["Offset of field: DDS_DomainParticipantQos::domain_destination_addresses"]
        [::std::mem::offset_of!(DDS_DomainParticipantQos, domain_destination_addresses) - 88usize];
    ["Offset of field: DDS_DomainParticipantQos::domain_receive_addresses"]
        [::std::mem::offset_of!(DDS_DomainParticipantQos, domain_receive_addresses) - 160usize];
    ["Offset of field: DDS_DomainParticipantQos::pdp_send_addresses"]
        [::std::mem::offset_of!(DDS_DomainParticipantQos, pdp_send_addresses) - 232usize];
    ["Offset of field: DDS_DomainParticipantQos::pdp_destination_addresses"]
        [::std::mem::offset_of!(DDS_DomainParticipantQos, pdp_destination_addresses) - 304usize];
    ["Offset of field: DDS_DomainParticipantQos::pdp_receive_addresses"]
        [::std::mem::offset_of!(DDS_DomainParticipantQos, pdp_receive_addresses) - 376usize];
    ["Offset of field: DDS_DomainParticipantQos::metatraffic_receive_addresses"][::std::mem::offset_of!(
        DDS_DomainParticipantQos,
        metatraffic_receive_addresses
    ) - 448usize];
    ["Offset of field: DDS_DomainParticipantQos::usertraffic_receive_addresses"][::std::mem::offset_of!(
        DDS_DomainParticipantQos,
        usertraffic_receive_addresses
    ) - 520usize];
    ["Offset of field: DDS_DomainParticipantQos::thread_core_affinity"]
        [::std::mem::offset_of!(DDS_DomainParticipantQos, thread_core_affinity) - 592usize];
    ["Offset of field: DDS_DomainParticipantQos::discovery_config"]
        [::std::mem::offset_of!(DDS_DomainParticipantQos, discovery_config) - 696usize];
    ["Offset of field: DDS_DomainParticipantQos::message_staticstics_info_config"][::std::mem::offset_of!(
        DDS_DomainParticipantQos,
        message_staticstics_info_config
    ) - 712usize];
    ["Offset of field: DDS_DomainParticipantQos::rtps_message_little_endian"]
        [::std::mem::offset_of!(DDS_DomainParticipantQos, rtps_message_little_endian) - 724usize];
    ["Offset of field: DDS_DomainParticipantQos::property"]
        [::std::mem::offset_of!(DDS_DomainParticipantQos, property) - 728usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_AsynchronousPublisherQosPolicy {
    pub disable_asynchronous_write: DDS_Boolean,
    pub disable_asynchronous_batch: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_AsynchronousPublisherQosPolicy"]
        [::std::mem::size_of::<DDS_AsynchronousPublisherQosPolicy>() - 2usize];
    ["Alignment of DDS_AsynchronousPublisherQosPolicy"]
        [::std::mem::align_of::<DDS_AsynchronousPublisherQosPolicy>() - 1usize];
    ["Offset of field: DDS_AsynchronousPublisherQosPolicy::disable_asynchronous_write"][::std::mem::offset_of!(
        DDS_AsynchronousPublisherQosPolicy,
        disable_asynchronous_write
    ) - 0usize];
    ["Offset of field: DDS_AsynchronousPublisherQosPolicy::disable_asynchronous_batch"][::std::mem::offset_of!(
        DDS_AsynchronousPublisherQosPolicy,
        disable_asynchronous_batch
    ) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_PublisherQos {
    pub presentation: DDS_PresentationQosPolicy,
    pub partition: DDS_PartitionQosPolicy,
    pub group_data: DDS_GroupDataQosPolicy,
    pub entity_factory: DDS_EntityFactoryQosPolicy,
    pub asynchronous_publisher: DDS_AsynchronousPublisherQosPolicy,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_PublisherQos"][::std::mem::size_of::<DDS_PublisherQos>() - 160usize];
    ["Alignment of DDS_PublisherQos"][::std::mem::align_of::<DDS_PublisherQos>() - 8usize];
    ["Offset of field: DDS_PublisherQos::presentation"]
        [::std::mem::offset_of!(DDS_PublisherQos, presentation) - 0usize];
    ["Offset of field: DDS_PublisherQos::partition"]
        [::std::mem::offset_of!(DDS_PublisherQos, partition) - 8usize];
    ["Offset of field: DDS_PublisherQos::group_data"]
        [::std::mem::offset_of!(DDS_PublisherQos, group_data) - 80usize];
    ["Offset of field: DDS_PublisherQos::entity_factory"]
        [::std::mem::offset_of!(DDS_PublisherQos, entity_factory) - 152usize];
    ["Offset of field: DDS_PublisherQos::asynchronous_publisher"]
        [::std::mem::offset_of!(DDS_PublisherQos, asynchronous_publisher) - 153usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_SubscriberQos {
    pub presentation: DDS_PresentationQosPolicy,
    pub partition: DDS_PartitionQosPolicy,
    pub group_data: DDS_GroupDataQosPolicy,
    pub entity_factory: DDS_EntityFactoryQosPolicy,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_SubscriberQos"][::std::mem::size_of::<DDS_SubscriberQos>() - 160usize];
    ["Alignment of DDS_SubscriberQos"][::std::mem::align_of::<DDS_SubscriberQos>() - 8usize];
    ["Offset of field: DDS_SubscriberQos::presentation"]
        [::std::mem::offset_of!(DDS_SubscriberQos, presentation) - 0usize];
    ["Offset of field: DDS_SubscriberQos::partition"]
        [::std::mem::offset_of!(DDS_SubscriberQos, partition) - 8usize];
    ["Offset of field: DDS_SubscriberQos::group_data"]
        [::std::mem::offset_of!(DDS_SubscriberQos, group_data) - 80usize];
    ["Offset of field: DDS_SubscriberQos::entity_factory"]
        [::std::mem::offset_of!(DDS_SubscriberQos, entity_factory) - 152usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_PublisherListener {
    pub datawriter_listener: DDS_DataWriterListener,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_PublisherListener"][::std::mem::size_of::<DDS_PublisherListener>() - 40usize];
    ["Alignment of DDS_PublisherListener"]
        [::std::mem::align_of::<DDS_PublisherListener>() - 8usize];
    ["Offset of field: DDS_PublisherListener::datawriter_listener"]
        [::std::mem::offset_of!(DDS_PublisherListener, datawriter_listener) - 0usize];
};
pub type SubscriberListenerDataOnReadersCallback =
    ::std::option::Option<unsafe extern "C" fn(sub: *mut DDS_Subscriber)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_SubscriberListener {
    pub datareader_listener: DDS_DataReaderListener,
    pub on_data_on_readers: SubscriberListenerDataOnReadersCallback,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_SubscriberListener"][::std::mem::size_of::<DDS_SubscriberListener>() - 80usize];
    ["Alignment of DDS_SubscriberListener"]
        [::std::mem::align_of::<DDS_SubscriberListener>() - 8usize];
    ["Offset of field: DDS_SubscriberListener::datareader_listener"]
        [::std::mem::offset_of!(DDS_SubscriberListener, datareader_listener) - 0usize];
    ["Offset of field: DDS_SubscriberListener::on_data_on_readers"]
        [::std::mem::offset_of!(DDS_SubscriberListener, on_data_on_readers) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DomainParticipantListener {
    pub topiclistener: DDS_TopicListener,
    pub publisherlistener: DDS_PublisherListener,
    pub subscriberlistener: DDS_SubscriberListener,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_DomainParticipantListener"]
        [::std::mem::size_of::<DDS_DomainParticipantListener>() - 136usize];
    ["Alignment of DDS_DomainParticipantListener"]
        [::std::mem::align_of::<DDS_DomainParticipantListener>() - 8usize];
    ["Offset of field: DDS_DomainParticipantListener::topiclistener"]
        [::std::mem::offset_of!(DDS_DomainParticipantListener, topiclistener) - 0usize];
    ["Offset of field: DDS_DomainParticipantListener::publisherlistener"]
        [::std::mem::offset_of!(DDS_DomainParticipantListener, publisherlistener) - 16usize];
    ["Offset of field: DDS_DomainParticipantListener::subscriberlistener"]
        [::std::mem::offset_of!(DDS_DomainParticipantListener, subscriberlistener) - 56usize];
};
pub type TypePluginCreateSampleFunction = ::std::option::Option<
    unsafe extern "C" fn(
        pool: *mut ZRMemPool,
        allocMutable: ZR_BOOLEAN,
        typeSupport: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type TypePluginDestroySampleFunction = ::std::option::Option<
    unsafe extern "C" fn(
        mempool: *mut ZRMemPool,
        sample: *mut ::std::os::raw::c_void,
        typeSupport: *const ::std::os::raw::c_void,
    ),
>;
pub type TypePluginCopySampleFunction = ::std::option::Option<
    unsafe extern "C" fn(
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        pool: *mut ZRMemPool,
        typeSupport: *const ::std::os::raw::c_void,
    ) -> ZR_BOOLEAN,
>;
pub type TypePluginGetMaxSizeFunction = ::std::option::Option<
    unsafe extern "C" fn(typeSupport: *const ::std::os::raw::c_void) -> ZR_UINT32,
>;
pub type TypePluginGetSizeFunction = ::std::option::Option<
    unsafe extern "C" fn(
        sample: *const ::std::os::raw::c_void,
        currentAlignment: ZR_UINT32,
        typeSupport: *const ::std::os::raw::c_void,
    ) -> ZR_UINT32,
>;
pub type TypePluginSerializeFunction = ::std::option::Option<
    unsafe extern "C" fn(
        sample: *const ::std::os::raw::c_void,
        cdr: *mut CDRSerializer,
        typeSupport: *const ::std::os::raw::c_void,
    ) -> ZR_INT32,
>;
pub type TypePluginDeserializeFunction = ::std::option::Option<
    unsafe extern "C" fn(
        sample: *mut ::std::os::raw::c_void,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
        typeSupport: *const ::std::os::raw::c_void,
    ) -> ZR_INT32,
>;
pub type TypePluginGetMaxKeySizeFunction = ::std::option::Option<
    unsafe extern "C" fn(typeSupport: *const ::std::os::raw::c_void) -> ZR_UINT32,
>;
pub type TypePluginGetKeySizeFunction = ::std::option::Option<
    unsafe extern "C" fn(
        sample: *const ::std::os::raw::c_void,
        currentAlignment: ZR_UINT32,
        typeSupport: *const ::std::os::raw::c_void,
    ) -> ZR_UINT32,
>;
pub type TypePluginSerializeKeyFunction = ::std::option::Option<
    unsafe extern "C" fn(
        sample: *const ::std::os::raw::c_void,
        cdr: *mut CDRSerializer,
        typeSupport: *const ::std::os::raw::c_void,
    ) -> ZR_INT32,
>;
pub type TypePluginDeserializeKeyFunction = ::std::option::Option<
    unsafe extern "C" fn(
        sample: *mut ::std::os::raw::c_void,
        cdr: *mut CDRDeserializer,
        pool: *mut ZRMemPool,
        typeSupport: *const ::std::os::raw::c_void,
    ) -> ZR_INT32,
>;
pub type TypePluginGetKeyHashFunction = ::std::option::Option<
    unsafe extern "C" fn(
        sample: *const ::std::os::raw::c_void,
        cdr: *mut CDRSerializer,
        result: *mut DDS_KeyHash_t,
        typeSupport: *const ::std::os::raw::c_void,
    ) -> ZR_INT32,
>;
pub type TypePluginHasKeyFunction = ::std::option::Option<
    unsafe extern "C" fn(typeSupport: *const ::std::os::raw::c_void) -> ZR_BOOLEAN,
>;
pub type TypePluginCreateDataReaderFunction = ::std::option::Option<
    unsafe extern "C" fn(
        impl_: *mut ::std::os::raw::c_void,
        typeSupport: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type TypePluginDestroyDataReaderFunction = ::std::option::Option<
    unsafe extern "C" fn(
        reader: *mut ::std::os::raw::c_void,
        typeSupport: *const ::std::os::raw::c_void,
    ) -> ZR_INT32,
>;
pub type TypePluginCreateDataWriterFunction = ::std::option::Option<
    unsafe extern "C" fn(
        impl_: *mut ::std::os::raw::c_void,
        typeSupport: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type TypePluginDestroyDataWriterFunction = ::std::option::Option<
    unsafe extern "C" fn(
        writer: *mut ::std::os::raw::c_void,
        typeSupport: *const ::std::os::raw::c_void,
    ) -> ZR_INT32,
>;
pub type TypePluginGetTypeCodeFunction = ::std::option::Option<
    unsafe extern "C" fn(typeSupport: *const ::std::os::raw::c_void) -> *mut TypeCodeHeader,
>;
pub type TypePluginNoSerializingSupportedFunction = ::std::option::Option<
    unsafe extern "C" fn(typeSupport: *const ::std::os::raw::c_void) -> ZR_BOOLEAN,
>;
pub type TypePluginFixedHeaderLengthFunction = ::std::option::Option<
    unsafe extern "C" fn(typeSupport: *const ::std::os::raw::c_void) -> ZR_UINT32,
>;
pub type TypePluginOnSiteDeserializeFunction = ::std::option::Option<
    unsafe extern "C" fn(
        cdr: *mut CDRDeserializer,
        sample: *mut ::std::os::raw::c_void,
        offset: ZR_UINT32,
        totalSize: ZR_UINT32,
        payload: *mut ZR_INT8,
        payloadLen: ZR_UINT32,
        fixedHeaderLen: ZR_UINT32,
    ) -> ZR_INT32,
>;
pub type TypePluginLoanContiguousDeserializeFunction = ::std::option::Option<
    unsafe extern "C" fn(
        cdr: *mut CDRDeserializer,
        sample: *mut ::std::os::raw::c_void,
    ) -> ZR_INT32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZRDDSTypePlugin {
    pub m_createSampleFunc: TypePluginCreateSampleFunction,
    pub m_destroySampleFunc: TypePluginDestroySampleFunction,
    pub m_copySampleFunc: TypePluginCopySampleFunction,
    pub m_getMaxSizeFunc: TypePluginGetMaxSizeFunction,
    pub m_getSizeFunc: TypePluginGetSizeFunction,
    pub m_serializeFunc: TypePluginSerializeFunction,
    pub m_deserializeFunc: TypePluginDeserializeFunction,
    pub m_getMaxKeySizeFunc: TypePluginGetMaxKeySizeFunction,
    pub m_getKeySizeFunc: TypePluginGetKeySizeFunction,
    pub m_serializeKeyFunc: TypePluginSerializeKeyFunction,
    pub m_deserializeKeyFunc: TypePluginDeserializeKeyFunction,
    pub m_getKeyHashFunc: TypePluginGetKeyHashFunction,
    pub m_hasKeyFunc: TypePluginHasKeyFunction,
    pub m_createDataReaderFunc: TypePluginCreateDataReaderFunction,
    pub m_destroyDataReaderFunc: TypePluginDestroyDataReaderFunction,
    pub m_createDataWriterFunc: TypePluginCreateDataWriterFunction,
    pub m_destroyDataWriterFunc: TypePluginDestroyDataWriterFunction,
    pub m_typecodeFunc: TypePluginGetTypeCodeFunction,
    pub m_onSiteDeserializeFunc: TypePluginOnSiteDeserializeFunction,
    pub m_fixedHeaderLengthFunc: TypePluginFixedHeaderLengthFunction,
    pub m_noSerializingSupportedFunc: TypePluginNoSerializingSupportedFunction,
    pub m_loanCongitiousDeserializeFunc: TypePluginLoanContiguousDeserializeFunction,
    pub m_typeSupport: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZRDDSTypePlugin"][::std::mem::size_of::<ZRDDSTypePlugin>() - 184usize];
    ["Alignment of ZRDDSTypePlugin"][::std::mem::align_of::<ZRDDSTypePlugin>() - 8usize];
    ["Offset of field: ZRDDSTypePlugin::m_createSampleFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_createSampleFunc) - 0usize];
    ["Offset of field: ZRDDSTypePlugin::m_destroySampleFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_destroySampleFunc) - 8usize];
    ["Offset of field: ZRDDSTypePlugin::m_copySampleFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_copySampleFunc) - 16usize];
    ["Offset of field: ZRDDSTypePlugin::m_getMaxSizeFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_getMaxSizeFunc) - 24usize];
    ["Offset of field: ZRDDSTypePlugin::m_getSizeFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_getSizeFunc) - 32usize];
    ["Offset of field: ZRDDSTypePlugin::m_serializeFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_serializeFunc) - 40usize];
    ["Offset of field: ZRDDSTypePlugin::m_deserializeFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_deserializeFunc) - 48usize];
    ["Offset of field: ZRDDSTypePlugin::m_getMaxKeySizeFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_getMaxKeySizeFunc) - 56usize];
    ["Offset of field: ZRDDSTypePlugin::m_getKeySizeFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_getKeySizeFunc) - 64usize];
    ["Offset of field: ZRDDSTypePlugin::m_serializeKeyFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_serializeKeyFunc) - 72usize];
    ["Offset of field: ZRDDSTypePlugin::m_deserializeKeyFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_deserializeKeyFunc) - 80usize];
    ["Offset of field: ZRDDSTypePlugin::m_getKeyHashFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_getKeyHashFunc) - 88usize];
    ["Offset of field: ZRDDSTypePlugin::m_hasKeyFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_hasKeyFunc) - 96usize];
    ["Offset of field: ZRDDSTypePlugin::m_createDataReaderFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_createDataReaderFunc) - 104usize];
    ["Offset of field: ZRDDSTypePlugin::m_destroyDataReaderFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_destroyDataReaderFunc) - 112usize];
    ["Offset of field: ZRDDSTypePlugin::m_createDataWriterFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_createDataWriterFunc) - 120usize];
    ["Offset of field: ZRDDSTypePlugin::m_destroyDataWriterFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_destroyDataWriterFunc) - 128usize];
    ["Offset of field: ZRDDSTypePlugin::m_typecodeFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_typecodeFunc) - 136usize];
    ["Offset of field: ZRDDSTypePlugin::m_onSiteDeserializeFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_onSiteDeserializeFunc) - 144usize];
    ["Offset of field: ZRDDSTypePlugin::m_fixedHeaderLengthFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_fixedHeaderLengthFunc) - 152usize];
    ["Offset of field: ZRDDSTypePlugin::m_noSerializingSupportedFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_noSerializingSupportedFunc) - 160usize];
    ["Offset of field: ZRDDSTypePlugin::m_loanCongitiousDeserializeFunc"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_loanCongitiousDeserializeFunc) - 168usize];
    ["Offset of field: ZRDDSTypePlugin::m_typeSupport"]
        [::std::mem::offset_of!(ZRDDSTypePlugin, m_typeSupport) - 176usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DomainParticipantRegisterType(
        self_: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
        typePlugin: *mut ZRDDSTypePlugin,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DomainParticipantUnRegisterType(
        self_: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
pub type ZRDDSTypeSupportRegisterTypeFunc = ::std::option::Option<
    unsafe extern "C" fn(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t,
>;
pub type ZRDDSTypeSupportUnRegisterTypeFunc = ::std::option::Option<
    unsafe extern "C" fn(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t,
>;
pub type ZRDDSTypeSupportGetTypeNameFunc =
    ::std::option::Option<unsafe extern "C" fn() -> *const DDS_Char>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_TypeSupport {
    pub register_type_func: ZRDDSTypeSupportRegisterTypeFunc,
    pub unregister_type_func: ZRDDSTypeSupportUnRegisterTypeFunc,
    pub get_typename_func: ZRDDSTypeSupportGetTypeNameFunc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_TypeSupport"][::std::mem::size_of::<DDS_TypeSupport>() - 24usize];
    ["Alignment of DDS_TypeSupport"][::std::mem::align_of::<DDS_TypeSupport>() - 8usize];
    ["Offset of field: DDS_TypeSupport::register_type_func"]
        [::std::mem::offset_of!(DDS_TypeSupport, register_type_func) - 0usize];
    ["Offset of field: DDS_TypeSupport::unregister_type_func"]
        [::std::mem::offset_of!(DDS_TypeSupport, unregister_type_func) - 8usize];
    ["Offset of field: DDS_TypeSupport::get_typename_func"]
        [::std::mem::offset_of!(DDS_TypeSupport, get_typename_func) - 16usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_create_datawriter(
        publisher: *mut DDS_Publisher,
        topic: *mut DDS_Topic,
        writerQos: *const DDS_DataWriterQos,
        writerListener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> *mut DDS_DataWriter;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_delete_datawriter(
        publisher: *mut DDS_Publisher,
        writer: *mut DDS_DataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_lookup_datawriter(
        publisher: *mut DDS_Publisher,
        topicName: *const DDS_Char,
    ) -> *mut DDS_DataWriter;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_suspend_publications(publisher: *mut DDS_Publisher) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_resume_publications(publisher: *mut DDS_Publisher) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_begin_coherent_changes(publisher: *mut DDS_Publisher) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_end_coherent_changes(publisher: *mut DDS_Publisher) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_wait_for_acknowledgments(
        publisher: *mut DDS_Publisher,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_get_participant(
        publisher: *mut DDS_Publisher,
    ) -> *mut DDS_DomainParticipant;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_delete_contained_entities(
        publisher: *mut DDS_Publisher,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_set_default_datawriter_qos(
        publisher: *mut DDS_Publisher,
        writerQos: *const DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_get_default_datawriter_qos(
        publisher: *mut DDS_Publisher,
        writerQos: *mut DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_copy_from_topic_qos(
        writerQos: *mut DDS_DataWriterQos,
        topicQos: *const DDS_TopicQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_set_qos(
        publisher: *mut DDS_Publisher,
        publisherQos: *const DDS_PublisherQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_get_qos(
        publisher: *mut DDS_Publisher,
        publisherQos: *mut DDS_PublisherQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_set_listener(
        publisher: *mut DDS_Publisher,
        publisherListener: *mut DDS_PublisherListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_get_listener(publisher: *mut DDS_Publisher) -> *mut DDS_PublisherListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_enable(publisher: *mut DDS_Publisher) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_as_entity(publisher: *mut DDS_Publisher) -> *mut DDS_Entity;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_PublisherSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut *mut DDS_Publisher,
    pub _discontiguousBuffer: *mut *mut *mut DDS_Publisher,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_PublisherSeq"][::std::mem::size_of::<DDS_PublisherSeq>() - 72usize];
    ["Alignment of DDS_PublisherSeq"][::std::mem::align_of::<DDS_PublisherSeq>() - 8usize];
    ["Offset of field: DDS_PublisherSeq::_owned"]
        [::std::mem::offset_of!(DDS_PublisherSeq, _owned) - 0usize];
    ["Offset of field: DDS_PublisherSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_PublisherSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_PublisherSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_PublisherSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_PublisherSeq::_maximum"]
        [::std::mem::offset_of!(DDS_PublisherSeq, _maximum) - 24usize];
    ["Offset of field: DDS_PublisherSeq::_length"]
        [::std::mem::offset_of!(DDS_PublisherSeq, _length) - 28usize];
    ["Offset of field: DDS_PublisherSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_PublisherSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_PublisherSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_PublisherSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_PublisherSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_PublisherSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_PublisherSeq::_mempool"]
        [::std::mem::offset_of!(DDS_PublisherSeq, _mempool) - 56usize];
    ["Offset of field: DDS_PublisherSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_PublisherSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_is_initialized(self_: *const DDS_PublisherSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_set(
        self_: *mut DDS_PublisherSeq,
        index: DDS_ULong,
        newValue: *mut *const DDS_Publisher,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_initialize(self_: *mut DDS_PublisherSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_new(newMax: DDS_ULong) -> *mut DDS_PublisherSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_get_maximum(self_: *const DDS_PublisherSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_set_maximum(
        self_: *mut DDS_PublisherSeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_get_length(self_: *const DDS_PublisherSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_set_length(
        self_: *mut DDS_PublisherSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_ensure_length(
        self_: *mut DDS_PublisherSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_get_reference(
        self_: *const DDS_PublisherSeq,
        index: DDS_ULong,
    ) -> *mut *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_append(
        self_: *mut DDS_PublisherSeq,
        newValue: *mut *const DDS_Publisher,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_append_autosize(
        self_: *mut DDS_PublisherSeq,
        newValue: *mut *const DDS_Publisher,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_copy_no_alloc(
        self_: *mut DDS_PublisherSeq,
        src: *const DDS_PublisherSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_copy(
        self_: *mut DDS_PublisherSeq,
        src: *const DDS_PublisherSeq,
    ) -> *mut DDS_PublisherSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_compare(
        self_: *const DDS_PublisherSeq,
        src: *const DDS_PublisherSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_from_array(
        self_: *mut DDS_PublisherSeq,
        srcArray: *mut *const DDS_Publisher,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_to_array(
        self_: *const DDS_PublisherSeq,
        dstArray: *mut *mut DDS_Publisher,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_loan_contiguous(
        self_: *mut DDS_PublisherSeq,
        buffer: *mut *mut DDS_Publisher,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_loan_discontiguous(
        self_: *mut DDS_PublisherSeq,
        buffer: *mut *mut *mut DDS_Publisher,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_unloan(self_: *mut DDS_PublisherSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_get_contiguous_buffer(
        self_: *const DDS_PublisherSeq,
    ) -> *mut *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_get_discontiguous_buffer(
        self_: *const DDS_PublisherSeq,
    ) -> *mut *mut *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_get_reader_and_data_ptr(
        self_: *const DDS_PublisherSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_set_reader_and_data_ptr(
        self_: *mut DDS_PublisherSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_has_ownership(self_: *const DDS_PublisherSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_clear(self_: *mut DDS_PublisherSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_finalize(self_: *mut DDS_PublisherSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_shallow_copy(
        self_: *mut DDS_PublisherSeq,
        other: *mut DDS_PublisherSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherSeq_initialize_ex(
        self_: *mut DDS_PublisherSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_create_datawriter_with_topic_and_qos_profile(
        self_: *mut DDS_Publisher,
        topicName: *const DDS_Char,
        typeSupport: *mut DDS_TypeSupport,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
        dwListener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> *mut DDS_DataWriter;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_create_datawriter_with_qos_profile(
        self_: *mut DDS_Publisher,
        topic: *mut DDS_Topic,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
        dw_listener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> *mut DDS_DataWriter;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_set_default_datawriter_qos_with_profile(
        self_: *mut DDS_Publisher,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Publisher_set_qos_with_profile(
        self_: *mut DDS_Publisher,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_get_qos(
        self_: *mut DDS_Subscriber,
        qoslist: *mut DDS_SubscriberQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_set_qos(
        self_: *mut DDS_Subscriber,
        qoslist: *const DDS_SubscriberQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_get_listener(self_: *mut DDS_Subscriber) -> *mut DDS_SubscriberListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_set_listener(
        self_: *mut DDS_Subscriber,
        listener: *mut DDS_SubscriberListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_enable(self_: *mut DDS_Subscriber) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_create_datareader(
        self_: *mut DDS_Subscriber,
        topic: *mut DDS_TopicDescription,
        qos: *const DDS_DataReaderQos,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> *mut DDS_DataReader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_delete_datareader(
        self_: *mut DDS_Subscriber,
        reader: *mut DDS_DataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_lookup_datareader(
        self_: *mut DDS_Subscriber,
        topicName: *const DDS_Char,
    ) -> *mut DDS_DataReader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_begin_access(self_: *mut DDS_Subscriber) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_end_access(self_: *mut DDS_Subscriber) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_get_datareaders(
        self_: *mut DDS_Subscriber,
        readers: *mut DDS_DataReaderSeq,
        sampleStates: DDS_SampleStateMask,
        viewStates: DDS_ViewStateMask,
        instanceStates: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_notify_datareaders(self_: *mut DDS_Subscriber) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_get_participant(self_: *mut DDS_Subscriber)
    -> *mut DDS_DomainParticipant;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_set_default_datareader_qos(
        self_: *mut DDS_Subscriber,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_get_default_datareader_qos(
        self_: *mut DDS_Subscriber,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_copy_from_topic_qos(
        datareaderQos: *mut DDS_DataReaderQos,
        topicQos: *const DDS_TopicQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_delete_contained_entities(self_: *mut DDS_Subscriber)
    -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_as_entity(self_: *mut DDS_Subscriber) -> *mut DDS_Entity;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_SubscriberSeq {
    pub _owned: DDS_Boolean,
    pub _contiguousBuffer: *mut *mut DDS_Subscriber,
    pub _discontiguousBuffer: *mut *mut *mut DDS_Subscriber,
    pub _maximum: DDS_ULong,
    pub _length: DDS_ULong,
    pub _sequenceInit: DDS_Long,
    pub _readerPtr: *mut ::std::os::raw::c_void,
    pub _dataPtr: *mut ::std::os::raw::c_void,
    pub _mempool: *mut ZRMemPool,
    pub _allocMemory: DDS_Boolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_SubscriberSeq"][::std::mem::size_of::<DDS_SubscriberSeq>() - 72usize];
    ["Alignment of DDS_SubscriberSeq"][::std::mem::align_of::<DDS_SubscriberSeq>() - 8usize];
    ["Offset of field: DDS_SubscriberSeq::_owned"]
        [::std::mem::offset_of!(DDS_SubscriberSeq, _owned) - 0usize];
    ["Offset of field: DDS_SubscriberSeq::_contiguousBuffer"]
        [::std::mem::offset_of!(DDS_SubscriberSeq, _contiguousBuffer) - 8usize];
    ["Offset of field: DDS_SubscriberSeq::_discontiguousBuffer"]
        [::std::mem::offset_of!(DDS_SubscriberSeq, _discontiguousBuffer) - 16usize];
    ["Offset of field: DDS_SubscriberSeq::_maximum"]
        [::std::mem::offset_of!(DDS_SubscriberSeq, _maximum) - 24usize];
    ["Offset of field: DDS_SubscriberSeq::_length"]
        [::std::mem::offset_of!(DDS_SubscriberSeq, _length) - 28usize];
    ["Offset of field: DDS_SubscriberSeq::_sequenceInit"]
        [::std::mem::offset_of!(DDS_SubscriberSeq, _sequenceInit) - 32usize];
    ["Offset of field: DDS_SubscriberSeq::_readerPtr"]
        [::std::mem::offset_of!(DDS_SubscriberSeq, _readerPtr) - 40usize];
    ["Offset of field: DDS_SubscriberSeq::_dataPtr"]
        [::std::mem::offset_of!(DDS_SubscriberSeq, _dataPtr) - 48usize];
    ["Offset of field: DDS_SubscriberSeq::_mempool"]
        [::std::mem::offset_of!(DDS_SubscriberSeq, _mempool) - 56usize];
    ["Offset of field: DDS_SubscriberSeq::_allocMemory"]
        [::std::mem::offset_of!(DDS_SubscriberSeq, _allocMemory) - 64usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_is_initialized(self_: *const DDS_SubscriberSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_set(
        self_: *mut DDS_SubscriberSeq,
        index: DDS_ULong,
        newValue: *mut *const DDS_Subscriber,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_initialize(self_: *mut DDS_SubscriberSeq);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_new(newMax: DDS_ULong) -> *mut DDS_SubscriberSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_get_maximum(self_: *const DDS_SubscriberSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_set_maximum(
        self_: *mut DDS_SubscriberSeq,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_get_length(self_: *const DDS_SubscriberSeq) -> DDS_ULong;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_set_length(
        self_: *mut DDS_SubscriberSeq,
        newLength: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_ensure_length(
        self_: *mut DDS_SubscriberSeq,
        length: DDS_ULong,
        max: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_get_reference(
        self_: *const DDS_SubscriberSeq,
        index: DDS_ULong,
    ) -> *mut *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_append(
        self_: *mut DDS_SubscriberSeq,
        newValue: *mut *const DDS_Subscriber,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_append_autosize(
        self_: *mut DDS_SubscriberSeq,
        newValue: *mut *const DDS_Subscriber,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_copy_no_alloc(
        self_: *mut DDS_SubscriberSeq,
        src: *const DDS_SubscriberSeq,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_copy(
        self_: *mut DDS_SubscriberSeq,
        src: *const DDS_SubscriberSeq,
    ) -> *mut DDS_SubscriberSeq;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_compare(
        self_: *const DDS_SubscriberSeq,
        src: *const DDS_SubscriberSeq,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_from_array(
        self_: *mut DDS_SubscriberSeq,
        srcArray: *mut *const DDS_Subscriber,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_to_array(
        self_: *const DDS_SubscriberSeq,
        dstArray: *mut *mut DDS_Subscriber,
        length: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_loan_contiguous(
        self_: *mut DDS_SubscriberSeq,
        buffer: *mut *mut DDS_Subscriber,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_loan_discontiguous(
        self_: *mut DDS_SubscriberSeq,
        buffer: *mut *mut *mut DDS_Subscriber,
        newLength: DDS_ULong,
        newMax: DDS_ULong,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_unloan(self_: *mut DDS_SubscriberSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_get_contiguous_buffer(
        self_: *const DDS_SubscriberSeq,
    ) -> *mut *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_get_discontiguous_buffer(
        self_: *const DDS_SubscriberSeq,
    ) -> *mut *mut *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_get_reader_and_data_ptr(
        self_: *const DDS_SubscriberSeq,
        readerPtr: *mut *mut ::std::os::raw::c_void,
        dataPtr: *mut *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_set_reader_and_data_ptr(
        self_: *mut DDS_SubscriberSeq,
        readerPtr: *mut ::std::os::raw::c_void,
        dataPtr: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_has_ownership(self_: *const DDS_SubscriberSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_clear(self_: *mut DDS_SubscriberSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_finalize(self_: *mut DDS_SubscriberSeq) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_shallow_copy(
        self_: *mut DDS_SubscriberSeq,
        other: *mut DDS_SubscriberSeq,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberSeq_initialize_ex(
        self_: *mut DDS_SubscriberSeq,
        mempool: *mut ZRMemPool,
        allocateMemory: DDS_Boolean,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_create_datareader_with_topic_and_qos_profile(
        self_: *mut DDS_Subscriber,
        topicName: *const DDS_Char,
        typeSupport: *mut DDS_TypeSupport,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
        drListener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> *mut DDS_DataReader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_create_datareader_with_qos_profile(
        self_: *mut DDS_Subscriber,
        topic: *mut DDS_TopicDescription,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
        dr_listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> *mut DDS_DataReader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_set_default_datareader_qos_with_profile(
        self_: *mut DDS_Subscriber,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Subscriber_set_qos_with_profile(
        self_: *mut DDS_Subscriber,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_get_qos(
        self_: *mut DDS_DomainParticipant,
        qoslist: *mut DDS_DomainParticipantQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_set_qos(
        self_: *mut DDS_DomainParticipant,
        qoslist: *const DDS_DomainParticipantQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_get_listener(
        self_: *mut DDS_DomainParticipant,
    ) -> *mut DDS_DomainParticipantListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_set_listener(
        self_: *mut DDS_DomainParticipant,
        listener: *mut DDS_DomainParticipantListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_enable(self_: *mut DDS_DomainParticipant) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_create_publisher(
        self_: *mut DDS_DomainParticipant,
        qoslist: *const DDS_PublisherQos,
        listener: *mut DDS_PublisherListener,
        mask: DDS_StatusKindMask,
    ) -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_get_publishers(
        self_: *mut DDS_DomainParticipant,
        publishers: *mut DDS_PublisherSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_delete_publisher(
        self_: *mut DDS_DomainParticipant,
        publisher: *mut DDS_Publisher,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_create_subscriber(
        self_: *mut DDS_DomainParticipant,
        qoslist: *const DDS_SubscriberQos,
        listener: *mut DDS_SubscriberListener,
        mask: DDS_StatusKindMask,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_get_subscribers(
        self_: *mut DDS_DomainParticipant,
        subscribers: *mut DDS_SubscriberSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_delete_subscriber(
        self_: *mut DDS_DomainParticipant,
        subscriber: *mut DDS_Subscriber,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_create_topic(
        self_: *mut DDS_DomainParticipant,
        topicName: *const DDS_Char,
        typeName: *const DDS_Char,
        qoslist: *const DDS_TopicQos,
        listener: *mut DDS_TopicListener,
        mask: DDS_StatusKindMask,
    ) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_create_topic_w_type_support(
        self_: *mut DDS_DomainParticipant,
        topicName: *const DDS_Char,
        typesupport: *mut DDS_TypeSupport,
        qoslist: *mut DDS_TopicQos,
        listener: *mut DDS_TopicListener,
        mask: DDS_StatusKindMask,
    ) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_delete_topic(
        self_: *mut DDS_DomainParticipant,
        topic: *mut DDS_Topic,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_create_contentfilteredtopic(
        self_: *mut DDS_DomainParticipant,
        name: *const DDS_Char,
        relatedTopic: *mut DDS_Topic,
        filterExp: *const DDS_Char,
        filterPara: *const DDS_StringSeq,
    ) -> *mut DDS_ContentFilteredTopic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_delete_contentfilteredtopic(
        self_: *mut DDS_DomainParticipant,
        topic: *mut DDS_ContentFilteredTopic,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_find_topic(
        self_: *mut DDS_DomainParticipant,
        topicName: *const DDS_Char,
        timeout: *const DDS_Duration_t,
    ) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_lookup_topicdescription(
        self_: *mut DDS_DomainParticipant,
        topicName: *const DDS_Char,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_get_builtin_subscriber(
        self_: *mut DDS_DomainParticipant,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_get_auto_created_publisher(
        self_: *mut DDS_DomainParticipant,
    ) -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_get_auto_created_subscriber(
        self_: *mut DDS_DomainParticipant,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_create_datawriter_with_topic_and_qos_profile(
        self_: *mut DDS_DomainParticipant,
        topicName: *const DDS_Char,
        typeSupport: *mut DDS_TypeSupport,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
        dwListener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> *mut DDS_DataWriter;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_create_datareader_with_topic_and_qos_profile(
        self_: *mut DDS_DomainParticipant,
        topicName: *const DDS_Char,
        typeSupport: *mut DDS_TypeSupport,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
        drListener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> *mut DDS_DataReader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_ignore_participant(
        self_: *mut DDS_DomainParticipant,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_ignore_topic(
        self_: *mut DDS_DomainParticipant,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_ignore_publication(
        self_: *mut DDS_DomainParticipant,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_ignore_subscription(
        self_: *mut DDS_DomainParticipant,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_delete_contained_entities(
        self_: *mut DDS_DomainParticipant,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_assert_liveliness(
        self_: *mut DDS_DomainParticipant,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_set_default_publisher_qos(
        self_: *mut DDS_DomainParticipant,
        qoslist: *const DDS_PublisherQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_get_default_publisher_qos(
        self_: *mut DDS_DomainParticipant,
        qoslist: *mut DDS_PublisherQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_set_default_subscriber_qos(
        self_: *mut DDS_DomainParticipant,
        qoslist: *const DDS_SubscriberQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_get_default_subscriber_qos(
        self_: *mut DDS_DomainParticipant,
        qoslist: *mut DDS_SubscriberQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_set_default_topic_qos(
        self_: *mut DDS_DomainParticipant,
        qoslist: *const DDS_TopicQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_get_default_topic_qos(
        self_: *mut DDS_DomainParticipant,
        qoslist: *mut DDS_TopicQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_get_domain_id(self_: *mut DDS_DomainParticipant)
    -> DDS_DomainId_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_get_discovered_participants(
        self_: *mut DDS_DomainParticipant,
        handles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_get_discovered_participant_data(
        self_: *mut DDS_DomainParticipant,
        data: *mut DDS_ParticipantBuiltinTopicData,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_get_discovered_topics(
        self_: *mut DDS_DomainParticipant,
        handles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_get_discovered_topic_data(
        self_: *mut DDS_DomainParticipant,
        data: *mut DDS_TopicBuiltinTopicData,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_contains_entity(
        self_: *mut DDS_DomainParticipant,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_get_current_time(
        self_: *mut DDS_DomainParticipant,
        currentTime: *mut DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_as_entity(self_: *mut DDS_DomainParticipant) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_create_publisher_with_qos_profile(
        self_: *mut DDS_DomainParticipant,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
        listener: *mut DDS_PublisherListener,
        mask: DDS_StatusKindMask,
    ) -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_create_subscriber_with_qos_profile(
        self_: *mut DDS_DomainParticipant,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
        listener: *mut DDS_SubscriberListener,
        mask: DDS_StatusKindMask,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_create_topic_with_qos_profile(
        self_: *mut DDS_DomainParticipant,
        topic_name: *const DDS_Char,
        type_name: *const DDS_Char,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
        listener: *mut DDS_TopicListener,
        mask: DDS_StatusKindMask,
    ) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_set_default_publisher_qos_with_profile(
        self_: *mut DDS_DomainParticipant,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_set_default_subscriber_qos_with_profile(
        self_: *mut DDS_DomainParticipant,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_set_default_topic_qos_with_profile(
        self_: *mut DDS_DomainParticipant,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipant_set_qos_with_profile(
        self_: *mut DDS_DomainParticipant,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
pub const DDS_LogBackupKind_DDS_LOG_BACKUP_NOTUSED_QOS: DDS_LogBackupKind = 0;
pub const DDS_LogBackupKind_DDS_LOG_BACKUP_EXIST_FILE: DDS_LogBackupKind = 1;
pub const DDS_LogBackupKind_DDS_LOG_BACKUP_FILE_SIZE_QOS: DDS_LogBackupKind = 2;
pub const DDS_LogBackupKind_DDS_LOG_BACKUP_TIME_INTERVAL_QOS: DDS_LogBackupKind = 3;
pub type DDS_LogBackupKind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_LogQosPolicy {
    pub console_mask: DDS_ULong,
    pub file_mask: DDS_ULong,
    pub local_level_mask: DDS_ULong,
    pub enable_distributed_log: DDS_Boolean,
    pub enable_distributed_log_finished: DDS_Boolean,
    pub distributed_log_writer_domain_id: DDS_Long,
    pub distributed_log_level_mask: DDS_Long,
    pub file_dir: DDS_CharSeq,
    pub file_name: DDS_CharSeq,
    pub file_backup_kind: DDS_LogBackupKind,
    pub file_backup_param: DDS_Long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_LogQosPolicy"][::std::mem::size_of::<DDS_LogQosPolicy>() - 176usize];
    ["Alignment of DDS_LogQosPolicy"][::std::mem::align_of::<DDS_LogQosPolicy>() - 8usize];
    ["Offset of field: DDS_LogQosPolicy::console_mask"]
        [::std::mem::offset_of!(DDS_LogQosPolicy, console_mask) - 0usize];
    ["Offset of field: DDS_LogQosPolicy::file_mask"]
        [::std::mem::offset_of!(DDS_LogQosPolicy, file_mask) - 4usize];
    ["Offset of field: DDS_LogQosPolicy::local_level_mask"]
        [::std::mem::offset_of!(DDS_LogQosPolicy, local_level_mask) - 8usize];
    ["Offset of field: DDS_LogQosPolicy::enable_distributed_log"]
        [::std::mem::offset_of!(DDS_LogQosPolicy, enable_distributed_log) - 12usize];
    ["Offset of field: DDS_LogQosPolicy::enable_distributed_log_finished"]
        [::std::mem::offset_of!(DDS_LogQosPolicy, enable_distributed_log_finished) - 13usize];
    ["Offset of field: DDS_LogQosPolicy::distributed_log_writer_domain_id"]
        [::std::mem::offset_of!(DDS_LogQosPolicy, distributed_log_writer_domain_id) - 16usize];
    ["Offset of field: DDS_LogQosPolicy::distributed_log_level_mask"]
        [::std::mem::offset_of!(DDS_LogQosPolicy, distributed_log_level_mask) - 20usize];
    ["Offset of field: DDS_LogQosPolicy::file_dir"]
        [::std::mem::offset_of!(DDS_LogQosPolicy, file_dir) - 24usize];
    ["Offset of field: DDS_LogQosPolicy::file_name"]
        [::std::mem::offset_of!(DDS_LogQosPolicy, file_name) - 96usize];
    ["Offset of field: DDS_LogQosPolicy::file_backup_kind"]
        [::std::mem::offset_of!(DDS_LogQosPolicy, file_backup_kind) - 168usize];
    ["Offset of field: DDS_LogQosPolicy::file_backup_param"]
        [::std::mem::offset_of!(DDS_LogQosPolicy, file_backup_param) - 172usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_QosProfileQosPolicy {
    pub profile_paths: DDS_StringSeq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_QosProfileQosPolicy"][::std::mem::size_of::<DDS_QosProfileQosPolicy>() - 72usize];
    ["Alignment of DDS_QosProfileQosPolicy"]
        [::std::mem::align_of::<DDS_QosProfileQosPolicy>() - 8usize];
    ["Offset of field: DDS_QosProfileQosPolicy::profile_paths"]
        [::std::mem::offset_of!(DDS_QosProfileQosPolicy, profile_paths) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DomainParticipantFactoryQos {
    pub entity_factory: DDS_EntityFactoryQosPolicy,
    pub dds_log: DDS_LogQosPolicy,
    pub min_dma_copy_size: DDS_ULong,
    pub qos_profile: DDS_QosProfileQosPolicy,
    pub property: DDS_PropertyQosPolicy,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_DomainParticipantFactoryQos"]
        [::std::mem::size_of::<DDS_DomainParticipantFactoryQos>() - 408usize];
    ["Alignment of DDS_DomainParticipantFactoryQos"]
        [::std::mem::align_of::<DDS_DomainParticipantFactoryQos>() - 8usize];
    ["Offset of field: DDS_DomainParticipantFactoryQos::entity_factory"]
        [::std::mem::offset_of!(DDS_DomainParticipantFactoryQos, entity_factory) - 0usize];
    ["Offset of field: DDS_DomainParticipantFactoryQos::dds_log"]
        [::std::mem::offset_of!(DDS_DomainParticipantFactoryQos, dds_log) - 8usize];
    ["Offset of field: DDS_DomainParticipantFactoryQos::min_dma_copy_size"]
        [::std::mem::offset_of!(DDS_DomainParticipantFactoryQos, min_dma_copy_size) - 184usize];
    ["Offset of field: DDS_DomainParticipantFactoryQos::qos_profile"]
        [::std::mem::offset_of!(DDS_DomainParticipantFactoryQos, qos_profile) - 192usize];
    ["Offset of field: DDS_DomainParticipantFactoryQos::property"]
        [::std::mem::offset_of!(DDS_DomainParticipantFactoryQos, property) - 264usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_get_instance() -> *mut DDS_DomainParticipantFactory;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_get_instance_w_qos(
        qoslist: *const DDS_DomainParticipantFactoryQos,
    ) -> *mut DDS_DomainParticipantFactory;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_finalize_instance() -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_create_participant(
        self_: *mut DDS_DomainParticipantFactory,
        domainId: DDS_DomainId_t,
        qoslist: *const DDS_DomainParticipantQos,
        listener: *mut DDS_DomainParticipantListener,
        mask: DDS_StatusKindMask,
    ) -> *mut DDS_DomainParticipant;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_delete_participant(
        self_: *mut DDS_DomainParticipantFactory,
        dp: *mut DDS_DomainParticipant,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_delete_contained_entities(
        self_: *mut DDS_DomainParticipantFactory,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_lookup_participant(
        self_: *mut DDS_DomainParticipantFactory,
        domainId: DDS_DomainId_t,
    ) -> *mut DDS_DomainParticipant;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_set_default_participant_qos(
        self_: *mut DDS_DomainParticipantFactory,
        qoslist: *const DDS_DomainParticipantQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_get_default_participant_qos(
        self_: *mut DDS_DomainParticipantFactory,
        qoslist: *mut DDS_DomainParticipantQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_set_qos(
        self_: *mut DDS_DomainParticipantFactory,
        qoslist: *const DDS_DomainParticipantFactoryQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_get_qos(
        self_: *mut DDS_DomainParticipantFactory,
        qoslist: *mut DDS_DomainParticipantFactoryQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_add_qos_library(
        self_: *mut DDS_DomainParticipantFactory,
        xml_representation: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_qos_library_to_xml(
        self_: *mut DDS_DomainParticipantFactory,
        qos_library_name: *const DDS_Char,
        result: *mut *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_lookup_qos_libraries(
        self_: *mut DDS_DomainParticipantFactory,
        pattern: *const DDS_Char,
        qos_library_names: *mut DDS_StringSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_remove_qos_library(
        self_: *mut DDS_DomainParticipantFactory,
        qos_library_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_add_qos_profile(
        self_: *mut DDS_DomainParticipantFactory,
        qos_library_name: *const DDS_Char,
        xml_representation: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_reload_qos_profiles(
        self_: *mut DDS_DomainParticipantFactory,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_lookup_qos_profiles(
        self_: *mut DDS_DomainParticipantFactory,
        qos_library_name: *const DDS_Char,
        pattern: *const DDS_Char,
        qos_profile_names: *mut DDS_StringSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_qos_profile_to_xml(
        self_: *mut DDS_DomainParticipantFactory,
        qos_library_name: *const DDS_Char,
        qos_profile_name: *const DDS_Char,
        result: *mut *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_remove_qos_profile(
        self_: *mut DDS_DomainParticipantFactory,
        qos_library_name: *const DDS_Char,
        qos_profile_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_unload_qos_profiles(
        self_: *mut DDS_DomainParticipantFactory,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_set_default_participant_qos_with_profile(
        self_: *mut DDS_DomainParticipantFactory,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_get_datareader_qos_from_profile(
        self_: *mut DDS_DomainParticipantFactory,
        qos: *mut DDS_DataReaderQos,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_get_datawriter_qos_from_profile(
        self_: *mut DDS_DomainParticipantFactory,
        qos: *mut DDS_DataWriterQos,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_get_participant_factory_qos_from_profile(
        self_: *mut DDS_DomainParticipantFactory,
        qos: *mut DDS_DomainParticipantFactoryQos,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_get_participant_qos_from_profile(
        self_: *mut DDS_DomainParticipantFactory,
        qos: *mut DDS_DomainParticipantQos,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_get_publisher_qos_from_profile(
        self_: *mut DDS_DomainParticipantFactory,
        qos: *mut DDS_PublisherQos,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_get_subscriber_qos_from_profile(
        self_: *mut DDS_DomainParticipantFactory,
        qos: *mut DDS_SubscriberQos,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_get_topic_qos_from_profile(
        self_: *mut DDS_DomainParticipantFactory,
        qos: *mut DDS_TopicQos,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_set_qos_with_profile(
        self_: *mut DDS_DomainParticipantFactory,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_create_participant_with_qos_profile(
        self_: *mut DDS_DomainParticipantFactory,
        domainId: DDS_DomainId_t,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
        listener: *mut DDS_DomainParticipantListener,
        mask: DDS_StatusKindMask,
    ) -> *mut DDS_DomainParticipant;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactory_get_instance_w_profile(
        qosFilePath: *const DDS_Char,
        libName: *const DDS_Char,
        profileName: *const DDS_Char,
        qosName: *const DDS_Char,
    ) -> *mut DDS_DomainParticipantFactory;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_read(
        self_: *mut ZRDynamicDataDataReader,
        dataValues: *mut ZRDynamicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_take(
        self_: *mut ZRDynamicDataDataReader,
        dataValues: *mut ZRDynamicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_read_next_sample(
        self_: *mut ZRDynamicDataDataReader,
        dataValue: *mut ZRDynamicData,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_take_next_sample(
        self_: *mut ZRDynamicDataDataReader,
        dataValue: *mut ZRDynamicData,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_read_instance(
        self_: *mut ZRDynamicDataDataReader,
        dataValues: *mut ZRDynamicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_take_instance(
        self_: *mut ZRDynamicDataDataReader,
        dataValues: *mut ZRDynamicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_read_next_instance(
        self_: *mut ZRDynamicDataDataReader,
        dataValues: *mut ZRDynamicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_take_next_instance(
        self_: *mut ZRDynamicDataDataReader,
        dataValues: *mut ZRDynamicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_return_loan(
        self_: *mut ZRDynamicDataDataReader,
        dataValues: *mut ZRDynamicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_return_recv_buffer(
        self_: *mut ZRDynamicDataDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_loan_recv_buffer(
        self_: *mut ZRDynamicDataDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_get_key_value(
        self_: *mut ZRDynamicDataDataReader,
        keyHolder: *mut ZRDynamicData,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_lookup_instance(
        self_: *mut ZRDynamicDataDataReader,
        instance: *const ZRDynamicData,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_get_data_instance(
        self_: *mut ZRDynamicDataDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_read_next_instance_w_condition(
        self_: *mut ZRDynamicDataDataReader,
        dataValues: *mut ZRDynamicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_take_next_instance_w_condition(
        self_: *mut ZRDynamicDataDataReader,
        dataValues: *mut ZRDynamicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_read_w_condition(
        self_: *mut ZRDynamicDataDataReader,
        dataValues: *mut ZRDynamicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_take_w_condition(
        self_: *mut ZRDynamicDataDataReader,
        dataValues: *mut ZRDynamicDataSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_create_readcondition(
        self_: *mut ZRDynamicDataDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_delete_readcondition(
        self_: *mut ZRDynamicDataDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_delete_contained_entities(
        self_: *mut ZRDynamicDataDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_create_querycondition(
        self_: *mut ZRDynamicDataDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_set_qos(
        self_: *mut ZRDynamicDataDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_get_qos(
        self_: *mut ZRDynamicDataDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_set_listener(
        self_: *mut ZRDynamicDataDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_enable(self_: *mut ZRDynamicDataDataReader) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_as_entity(
        self_: *mut ZRDynamicDataDataReader,
    ) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_get_listener(
        self_: *mut ZRDynamicDataDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_get_liveliness_changed_status(
        self_: *mut ZRDynamicDataDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_get_requested_deadline_missed_status(
        self_: *mut ZRDynamicDataDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_get_subscription_matched_status(
        self_: *mut ZRDynamicDataDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_get_matched_publication_data(
        self_: *mut ZRDynamicDataDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_get_matched_publications(
        self_: *mut ZRDynamicDataDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_get_sample_lost_status(
        self_: *mut ZRDynamicDataDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_get_sample_rejected_status(
        self_: *mut ZRDynamicDataDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_get_subscriber(
        self_: *mut ZRDynamicDataDataReader,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_get_topicdescription(
        self_: *mut ZRDynamicDataDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_get_requested_incompatible_qos_status(
        self_: *mut ZRDynamicDataDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_wait_for_historical_data(
        self_: *mut ZRDynamicDataDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_set_qos_with_profile(
        self_: *mut ZRDynamicDataDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_create_named_readcondition(
        self_: *mut ZRDynamicDataDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_delete_named_readcondition(
        self_: *mut ZRDynamicDataDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_get_named_readcondition(
        self_: *mut ZRDynamicDataDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataReader_record_data(
        self_: *mut ZRDynamicDataDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataTypeSupportInitialize(
        self_: *mut ZRDynamicDataTypeSupport,
        type_: *mut TypeCode,
        props: *const ZRDynamicDataProperty_t,
    ) -> DDS_Boolean;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataTypeSupportNew(
        type_: *mut TypeCode,
        props: *const ZRDynamicDataProperty_t,
    ) -> *mut ZRDynamicDataTypeSupport;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataTypeSupportFinalize(self_: *mut ZRDynamicDataTypeSupport);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataTypeSupportDelete(self_: *mut ZRDynamicDataTypeSupport);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataTypeSupportRegisterType(
        self_: *mut ZRDynamicDataTypeSupport,
        participant: *mut DDS_DomainParticipant,
        typeName: *const ::std::os::raw::c_char,
        createDwFunc: TypePluginCreateDataWriterFunction,
        destroyDwFunc: TypePluginDestroyDataWriterFunction,
        createDrFunc: TypePluginCreateDataReaderFunction,
        destroyDrFunc: TypePluginDestroyDataReaderFunction,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataTypeSupportUnregisterType(
        self_: *mut ZRDynamicDataTypeSupport,
        participant: *mut DDS_DomainParticipant,
        typeName: *const ::std::os::raw::c_char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataTypeSupportGetTypeName(
        self_: *const ZRDynamicDataTypeSupport,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataTypeSupportGetDataType(
        self_: *const ZRDynamicDataTypeSupport,
    ) -> *const TypeCode;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataTypeSupportCreateData(
        self_: *const ZRDynamicDataTypeSupport,
    ) -> *mut ZRDynamicData;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataTypeSupportDeleteData(
        self_: *mut ZRDynamicDataTypeSupport,
        data: *mut ZRDynamicData,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataTypeSupportPrintData(
        self_: *const ZRDynamicDataTypeSupport,
        data: *const ZRDynamicData,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataTypeSupportCopyData(
        self_: *const ZRDynamicDataTypeSupport,
        dest: *mut ZRDynamicData,
        source: *const ZRDynamicData,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataTypeSupportInitializeData(
        self_: *const ZRDynamicDataTypeSupport,
        data: *mut ZRDynamicData,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataTypeSupportFinalizeData(
        self_: *const ZRDynamicDataTypeSupport,
        data: *mut ZRDynamicData,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataTypeSupportGetTypeCode(
        self_: *mut ZRDynamicDataTypeSupport,
    ) -> *mut TypeCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZRDynamicDataDataWriter {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_write(
        self_: *mut ZRDynamicDataDataWriter,
        sample: *const ZRDynamicData,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_write_w_timestamp(
        self_: *mut ZRDynamicDataDataWriter,
        sample: *const ZRDynamicData,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_write_w_dst(
        self_: *mut ZRDynamicDataDataWriter,
        sample: *const ZRDynamicData,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_register_instance(
        self_: *mut ZRDynamicDataDataWriter,
        instance: *mut ZRDynamicData,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_register_instance_w_timestamp(
        self_: *mut ZRDynamicDataDataWriter,
        instance: *const ZRDynamicData,
        timestamp: *const DDS_Time_t,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_unregister_instance(
        self_: *mut ZRDynamicDataDataWriter,
        instance: *const ZRDynamicData,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_unregister_instance_w_timestamp(
        self_: *mut ZRDynamicDataDataWriter,
        instance: *const ZRDynamicData,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_dispose(
        self_: *mut ZRDynamicDataDataWriter,
        instance: *const ZRDynamicData,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_dispose_w_timestamp(
        self_: *mut ZRDynamicDataDataWriter,
        instance: *const ZRDynamicData,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_get_key_value(
        self_: *mut ZRDynamicDataDataWriter,
        keyHolder: *mut ZRDynamicData,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_lookup_instance(
        self_: *mut ZRDynamicDataDataWriter,
        instance: *const ZRDynamicData,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_assert_liveliness(
        self_: *mut ZRDynamicDataDataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_get_liveliness_lost_status(
        self_: *mut ZRDynamicDataDataWriter,
        status: *mut DDS_LivelinessLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_get_offered_deadline_missed_status(
        self_: *mut ZRDynamicDataDataWriter,
        status: *mut DDS_OfferedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_get_publication_matched_status(
        self_: *mut ZRDynamicDataDataWriter,
        status: *mut DDS_PublicationMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_get_matched_subscription_data(
        self_: *mut ZRDynamicDataDataWriter,
        subscriptionData: *mut DDS_SubscriptionBuiltinTopicData,
        subscriptionHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_get_matched_subscriptions(
        self_: *mut ZRDynamicDataDataWriter,
        subscriptionHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_set_qos(
        self_: *mut ZRDynamicDataDataWriter,
        qoslist: *const DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_get_qos(
        self_: *mut ZRDynamicDataDataWriter,
        qoslist: *mut DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_set_listener(
        self_: *mut ZRDynamicDataDataWriter,
        listener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_enable(self_: *mut ZRDynamicDataDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_flush(self_: *mut ZRDynamicDataDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_as_entity(
        self_: *mut ZRDynamicDataDataWriter,
    ) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_get_listener(
        self_: *mut ZRDynamicDataDataWriter,
    ) -> *mut DDS_DataWriterListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_get_topic(self_: *mut ZRDynamicDataDataWriter)
    -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_get_publisher(
        self_: *mut ZRDynamicDataDataWriter,
    ) -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_get_offered_incompatible_qos_status(
        self_: *mut ZRDynamicDataDataWriter,
        status: *mut DDS_OfferedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_wait_for_acknowledgments(
        self_: *mut ZRDynamicDataDataWriter,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_set_qos_with_profile(
        dw: *mut ZRDynamicDataDataWriter,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_get_send_status(
        self_: *mut ZRDynamicDataDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_print_send_status(
        self_: *mut ZRDynamicDataDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRDynamicDataDataWriter_get_send_status_w_handle(
        self_: *mut ZRDynamicDataDataWriter,
        status: *mut DDS_PublicationSendStatus,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeGetKind(self_: *const TypeCode) -> TCTypeKind;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeCompare(typeCode1: *const TypeCode, typeCode2: *const TypeCode) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeGetName(self_: *const TypeCode) -> *const ZR_INT8;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeGetMemberCount(self_: *const TypeCode) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeGetMemberName(self_: *const TypeCode, index: ZR_UINT32) -> *const ZR_INT8;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeGetBaseType(self_: *const TypeCodeHeader) -> *const TypeCodeHeader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeGetElementType(self_: *const TypeCode) -> *mut TypeCode;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeGetIndexByName(self_: *const TypeCode, name: *const ZR_INT8) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeGetMemberType(self_: *const TypeCode, index: ZR_UINT32) -> *mut TypeCode;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeGetLabelCount(self_: *const TypeCode, index: ZR_UINT32) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeGetLabel(
        self_: *const TypeCode,
        memberIdx: ZR_UINT32,
        labelIdx: ZR_UINT32,
        expCode: *mut TypeCodeExceptionCode,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeGetDefaultIndex(self_: *const TypeCode) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeGetEnumVal(
        self_: *const TypeCode,
        memberIdx: ZR_UINT32,
        expCode: *mut TypeCodeExceptionCode,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeGetEnumString(
        self_: *const TypeCode,
        enumVal: ZR_UINT32,
        expCode: *mut TypeCodeExceptionCode,
    ) -> *const ZR_INT8;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeIsMemberKey(
        self_: *const TypeCode,
        index: ZR_UINT32,
        expCode: *mut TypeCodeExceptionCode,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeGetArrayDimensionCount(self_: *const TypeCode) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeGetArrayDimension(self_: *const TypeCode, index: ZR_UINT32) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeGetMaxLength(self_: *const TypeCodeHeader) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeGetArrayElementCount(self_: *const TypeCode) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeAddMemberToEnum(
        self_: *mut TypeCode,
        index: ZR_UINT32,
        name: *const ZR_INT8,
        value: ZR_UINT32,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeAddMemberToUnion(
        self_: *mut TypeCode,
        index: ZR_UINT32,
        name: *const ZR_INT8,
        labelCount: ZR_UINT32,
        labels: *mut ZR_UINT32,
        tc: *const TypeCode,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeAddMemberToStruct(
        self_: *mut TypeCode,
        index: ZR_UINT32,
        memberId: ZR_UINT32,
        name: *const ZR_INT8,
        tc: *const TypeCode,
        isKey: ZR_BOOLEAN,
        isOption: ZR_BOOLEAN,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeAddMemberToValueType(
        self_: *mut TypeCode,
        index: ZR_UINT32,
        memberId: ZR_UINT32,
        name: *const ZR_INT8,
        tc: *const TypeCode,
        isKey: ZR_BOOLEAN,
        isOption: ZR_BOOLEAN,
    ) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeGetTypePrintableString(self_: *const TypeCodeHeader) -> *mut ZR_INT8;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeReleasePrintableString(buffer: *mut ZR_INT8);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodePrintIDL(self_: *const TypeCode) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeFactoryGetInstance() -> *mut TypeCodeFactory;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeFactoryFinalize() -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeFactoryGetPrimitiveTC(
        self_: *mut TypeCodeFactory,
        kind: TCTypeKind,
    ) -> *mut TypeCode;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeFactoryCreateStructTC(
        self_: *mut TypeCodeFactory,
        name: *const ZR_INT8,
        kind: ExtensibilityKind,
    ) -> *mut TypeCode;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeFactoryCreateValueTypeTC(
        self_: *mut TypeCodeFactory,
        name: *const ZR_INT8,
        modifierKind: TypeCodeModifierKind,
        kind: ExtensibilityKind,
        baseTC: *const TypeCode,
    ) -> *mut TypeCode;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeFactoryCreateEnumTC(
        self_: *mut TypeCodeFactory,
        name: *const ZR_INT8,
        bitBound: ZR_UINT32,
        kind: ExtensibilityKind,
    ) -> *mut TypeCode;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeFactoryCreateUnionTC(
        self_: *mut TypeCodeFactory,
        name: *const ZR_INT8,
        switchTC: *const TypeCode,
        defaultIdx: ZR_UINT32,
    ) -> *mut TypeCode;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeFactoryCreateStringTC(
        self_: *mut TypeCodeFactory,
        length: ZR_UINT32,
    ) -> *mut TypeCode;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeFactoryCreateSequenceTC(
        self_: *mut TypeCodeFactory,
        maxLength: ZR_UINT32,
        tc: *const TypeCode,
    ) -> *mut TypeCode;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeFactoryCreateArrayTC(
        self_: *mut TypeCodeFactory,
        dimensionCount: ZR_UINT32,
        dimensions: *const ZR_UINT32,
        tc: *const TypeCode,
    ) -> *mut TypeCode;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeFactoryCloneTC(
        self_: *mut TypeCodeFactory,
        tc: *const TypeCode,
    ) -> *mut TypeCode;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TypeCodeFactoryDeleteTC(self_: *mut TypeCodeFactory, tc: *mut TypeCode) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_WaitSet_new() -> *mut DDS_WaitSet;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_WaitSet_delete(waitset: *mut DDS_WaitSet);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_WaitSet_attach_condition(
        self_: *mut DDS_WaitSet,
        condition: *mut DDS_Condition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_WaitSet_detach_condition(
        self_: *mut DDS_WaitSet,
        condition: *mut DDS_Condition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_WaitSet_wait(
        self_: *mut DDS_WaitSet,
        activeConditions: *mut DDS_ConditionSeq,
        timeout: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_WaitSet_get_conditions(
        self_: *mut DDS_WaitSet,
        attachedConditions: *mut DDS_ConditionSeq,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_BooleanDataReader {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_read(
        self_: *mut DDS_BooleanDataReader,
        dataValues: *mut DDS_BooleanSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_take(
        self_: *mut DDS_BooleanDataReader,
        dataValues: *mut DDS_BooleanSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_read_next_sample(
        self_: *mut DDS_BooleanDataReader,
        dataValue: *mut DDS_Boolean,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_take_next_sample(
        self_: *mut DDS_BooleanDataReader,
        dataValue: *mut DDS_Boolean,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_read_instance(
        self_: *mut DDS_BooleanDataReader,
        dataValues: *mut DDS_BooleanSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_take_instance(
        self_: *mut DDS_BooleanDataReader,
        dataValues: *mut DDS_BooleanSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_read_next_instance(
        self_: *mut DDS_BooleanDataReader,
        dataValues: *mut DDS_BooleanSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_take_next_instance(
        self_: *mut DDS_BooleanDataReader,
        dataValues: *mut DDS_BooleanSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_return_loan(
        self_: *mut DDS_BooleanDataReader,
        dataValues: *mut DDS_BooleanSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_return_recv_buffer(
        self_: *mut DDS_BooleanDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_loan_recv_buffer(
        self_: *mut DDS_BooleanDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_get_key_value(
        self_: *mut DDS_BooleanDataReader,
        keyHolder: *mut DDS_Boolean,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_lookup_instance(
        self_: *mut DDS_BooleanDataReader,
        instance: *const DDS_Boolean,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_get_data_instance(
        self_: *mut DDS_BooleanDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_read_next_instance_w_condition(
        self_: *mut DDS_BooleanDataReader,
        dataValues: *mut DDS_BooleanSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_take_next_instance_w_condition(
        self_: *mut DDS_BooleanDataReader,
        dataValues: *mut DDS_BooleanSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_read_w_condition(
        self_: *mut DDS_BooleanDataReader,
        dataValues: *mut DDS_BooleanSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_take_w_condition(
        self_: *mut DDS_BooleanDataReader,
        dataValues: *mut DDS_BooleanSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_create_readcondition(
        self_: *mut DDS_BooleanDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_delete_readcondition(
        self_: *mut DDS_BooleanDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_delete_contained_entities(
        self_: *mut DDS_BooleanDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_create_querycondition(
        self_: *mut DDS_BooleanDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_set_qos(
        self_: *mut DDS_BooleanDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_get_qos(
        self_: *mut DDS_BooleanDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_set_listener(
        self_: *mut DDS_BooleanDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_enable(self_: *mut DDS_BooleanDataReader) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_as_entity(self_: *mut DDS_BooleanDataReader) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_get_listener(
        self_: *mut DDS_BooleanDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_get_liveliness_changed_status(
        self_: *mut DDS_BooleanDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_get_requested_deadline_missed_status(
        self_: *mut DDS_BooleanDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_get_subscription_matched_status(
        self_: *mut DDS_BooleanDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_get_matched_publication_data(
        self_: *mut DDS_BooleanDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_get_matched_publications(
        self_: *mut DDS_BooleanDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_get_sample_lost_status(
        self_: *mut DDS_BooleanDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_get_sample_rejected_status(
        self_: *mut DDS_BooleanDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_get_subscriber(
        self_: *mut DDS_BooleanDataReader,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_get_topicdescription(
        self_: *mut DDS_BooleanDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_get_requested_incompatible_qos_status(
        self_: *mut DDS_BooleanDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_wait_for_historical_data(
        self_: *mut DDS_BooleanDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_set_qos_with_profile(
        self_: *mut DDS_BooleanDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_create_named_readcondition(
        self_: *mut DDS_BooleanDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_delete_named_readcondition(
        self_: *mut DDS_BooleanDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_get_named_readcondition(
        self_: *mut DDS_BooleanDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataReader_record_data(
        self_: *mut DDS_BooleanDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_OctetDataReader {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_read(
        self_: *mut DDS_OctetDataReader,
        dataValues: *mut DDS_OctetSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_take(
        self_: *mut DDS_OctetDataReader,
        dataValues: *mut DDS_OctetSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_read_next_sample(
        self_: *mut DDS_OctetDataReader,
        dataValue: *mut DDS_Octet,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_take_next_sample(
        self_: *mut DDS_OctetDataReader,
        dataValue: *mut DDS_Octet,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_read_instance(
        self_: *mut DDS_OctetDataReader,
        dataValues: *mut DDS_OctetSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_take_instance(
        self_: *mut DDS_OctetDataReader,
        dataValues: *mut DDS_OctetSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_read_next_instance(
        self_: *mut DDS_OctetDataReader,
        dataValues: *mut DDS_OctetSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_take_next_instance(
        self_: *mut DDS_OctetDataReader,
        dataValues: *mut DDS_OctetSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_return_loan(
        self_: *mut DDS_OctetDataReader,
        dataValues: *mut DDS_OctetSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_return_recv_buffer(
        self_: *mut DDS_OctetDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_loan_recv_buffer(
        self_: *mut DDS_OctetDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_get_key_value(
        self_: *mut DDS_OctetDataReader,
        keyHolder: *mut DDS_Octet,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_lookup_instance(
        self_: *mut DDS_OctetDataReader,
        instance: *const DDS_Octet,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_get_data_instance(
        self_: *mut DDS_OctetDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_read_next_instance_w_condition(
        self_: *mut DDS_OctetDataReader,
        dataValues: *mut DDS_OctetSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_take_next_instance_w_condition(
        self_: *mut DDS_OctetDataReader,
        dataValues: *mut DDS_OctetSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_read_w_condition(
        self_: *mut DDS_OctetDataReader,
        dataValues: *mut DDS_OctetSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_take_w_condition(
        self_: *mut DDS_OctetDataReader,
        dataValues: *mut DDS_OctetSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_create_readcondition(
        self_: *mut DDS_OctetDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_delete_readcondition(
        self_: *mut DDS_OctetDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_delete_contained_entities(
        self_: *mut DDS_OctetDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_create_querycondition(
        self_: *mut DDS_OctetDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_set_qos(
        self_: *mut DDS_OctetDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_get_qos(
        self_: *mut DDS_OctetDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_set_listener(
        self_: *mut DDS_OctetDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_enable(self_: *mut DDS_OctetDataReader) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_as_entity(self_: *mut DDS_OctetDataReader) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_get_listener(
        self_: *mut DDS_OctetDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_get_liveliness_changed_status(
        self_: *mut DDS_OctetDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_get_requested_deadline_missed_status(
        self_: *mut DDS_OctetDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_get_subscription_matched_status(
        self_: *mut DDS_OctetDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_get_matched_publication_data(
        self_: *mut DDS_OctetDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_get_matched_publications(
        self_: *mut DDS_OctetDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_get_sample_lost_status(
        self_: *mut DDS_OctetDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_get_sample_rejected_status(
        self_: *mut DDS_OctetDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_get_subscriber(
        self_: *mut DDS_OctetDataReader,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_get_topicdescription(
        self_: *mut DDS_OctetDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_get_requested_incompatible_qos_status(
        self_: *mut DDS_OctetDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_wait_for_historical_data(
        self_: *mut DDS_OctetDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_set_qos_with_profile(
        self_: *mut DDS_OctetDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_create_named_readcondition(
        self_: *mut DDS_OctetDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_delete_named_readcondition(
        self_: *mut DDS_OctetDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_get_named_readcondition(
        self_: *mut DDS_OctetDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataReader_record_data(
        self_: *mut DDS_OctetDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_CharDataReader {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_read(
        self_: *mut DDS_CharDataReader,
        dataValues: *mut DDS_CharSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_take(
        self_: *mut DDS_CharDataReader,
        dataValues: *mut DDS_CharSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_read_next_sample(
        self_: *mut DDS_CharDataReader,
        dataValue: *mut DDS_Char,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_take_next_sample(
        self_: *mut DDS_CharDataReader,
        dataValue: *mut DDS_Char,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_read_instance(
        self_: *mut DDS_CharDataReader,
        dataValues: *mut DDS_CharSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_take_instance(
        self_: *mut DDS_CharDataReader,
        dataValues: *mut DDS_CharSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_read_next_instance(
        self_: *mut DDS_CharDataReader,
        dataValues: *mut DDS_CharSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_take_next_instance(
        self_: *mut DDS_CharDataReader,
        dataValues: *mut DDS_CharSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_return_loan(
        self_: *mut DDS_CharDataReader,
        dataValues: *mut DDS_CharSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_return_recv_buffer(
        self_: *mut DDS_CharDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_loan_recv_buffer(
        self_: *mut DDS_CharDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_get_key_value(
        self_: *mut DDS_CharDataReader,
        keyHolder: *mut DDS_Char,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_lookup_instance(
        self_: *mut DDS_CharDataReader,
        instance: *const DDS_Char,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_get_data_instance(
        self_: *mut DDS_CharDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_read_next_instance_w_condition(
        self_: *mut DDS_CharDataReader,
        dataValues: *mut DDS_CharSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_take_next_instance_w_condition(
        self_: *mut DDS_CharDataReader,
        dataValues: *mut DDS_CharSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_read_w_condition(
        self_: *mut DDS_CharDataReader,
        dataValues: *mut DDS_CharSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_take_w_condition(
        self_: *mut DDS_CharDataReader,
        dataValues: *mut DDS_CharSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_create_readcondition(
        self_: *mut DDS_CharDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_delete_readcondition(
        self_: *mut DDS_CharDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_delete_contained_entities(
        self_: *mut DDS_CharDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_create_querycondition(
        self_: *mut DDS_CharDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_set_qos(
        self_: *mut DDS_CharDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_get_qos(
        self_: *mut DDS_CharDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_set_listener(
        self_: *mut DDS_CharDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_enable(self_: *mut DDS_CharDataReader) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_as_entity(self_: *mut DDS_CharDataReader) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_get_listener(
        self_: *mut DDS_CharDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_get_liveliness_changed_status(
        self_: *mut DDS_CharDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_get_requested_deadline_missed_status(
        self_: *mut DDS_CharDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_get_subscription_matched_status(
        self_: *mut DDS_CharDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_get_matched_publication_data(
        self_: *mut DDS_CharDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_get_matched_publications(
        self_: *mut DDS_CharDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_get_sample_lost_status(
        self_: *mut DDS_CharDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_get_sample_rejected_status(
        self_: *mut DDS_CharDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_get_subscriber(self_: *mut DDS_CharDataReader)
    -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_get_topicdescription(
        self_: *mut DDS_CharDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_get_requested_incompatible_qos_status(
        self_: *mut DDS_CharDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_wait_for_historical_data(
        self_: *mut DDS_CharDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_set_qos_with_profile(
        self_: *mut DDS_CharDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_create_named_readcondition(
        self_: *mut DDS_CharDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_delete_named_readcondition(
        self_: *mut DDS_CharDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_get_named_readcondition(
        self_: *mut DDS_CharDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataReader_record_data(
        self_: *mut DDS_CharDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ShortDataReader {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_read(
        self_: *mut DDS_ShortDataReader,
        dataValues: *mut DDS_ShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_take(
        self_: *mut DDS_ShortDataReader,
        dataValues: *mut DDS_ShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_read_next_sample(
        self_: *mut DDS_ShortDataReader,
        dataValue: *mut DDS_Short,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_take_next_sample(
        self_: *mut DDS_ShortDataReader,
        dataValue: *mut DDS_Short,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_read_instance(
        self_: *mut DDS_ShortDataReader,
        dataValues: *mut DDS_ShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_take_instance(
        self_: *mut DDS_ShortDataReader,
        dataValues: *mut DDS_ShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_read_next_instance(
        self_: *mut DDS_ShortDataReader,
        dataValues: *mut DDS_ShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_take_next_instance(
        self_: *mut DDS_ShortDataReader,
        dataValues: *mut DDS_ShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_return_loan(
        self_: *mut DDS_ShortDataReader,
        dataValues: *mut DDS_ShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_return_recv_buffer(
        self_: *mut DDS_ShortDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_loan_recv_buffer(
        self_: *mut DDS_ShortDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_get_key_value(
        self_: *mut DDS_ShortDataReader,
        keyHolder: *mut DDS_Short,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_lookup_instance(
        self_: *mut DDS_ShortDataReader,
        instance: *const DDS_Short,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_get_data_instance(
        self_: *mut DDS_ShortDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_read_next_instance_w_condition(
        self_: *mut DDS_ShortDataReader,
        dataValues: *mut DDS_ShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_take_next_instance_w_condition(
        self_: *mut DDS_ShortDataReader,
        dataValues: *mut DDS_ShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_read_w_condition(
        self_: *mut DDS_ShortDataReader,
        dataValues: *mut DDS_ShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_take_w_condition(
        self_: *mut DDS_ShortDataReader,
        dataValues: *mut DDS_ShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_create_readcondition(
        self_: *mut DDS_ShortDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_delete_readcondition(
        self_: *mut DDS_ShortDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_delete_contained_entities(
        self_: *mut DDS_ShortDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_create_querycondition(
        self_: *mut DDS_ShortDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_set_qos(
        self_: *mut DDS_ShortDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_get_qos(
        self_: *mut DDS_ShortDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_set_listener(
        self_: *mut DDS_ShortDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_enable(self_: *mut DDS_ShortDataReader) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_as_entity(self_: *mut DDS_ShortDataReader) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_get_listener(
        self_: *mut DDS_ShortDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_get_liveliness_changed_status(
        self_: *mut DDS_ShortDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_get_requested_deadline_missed_status(
        self_: *mut DDS_ShortDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_get_subscription_matched_status(
        self_: *mut DDS_ShortDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_get_matched_publication_data(
        self_: *mut DDS_ShortDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_get_matched_publications(
        self_: *mut DDS_ShortDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_get_sample_lost_status(
        self_: *mut DDS_ShortDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_get_sample_rejected_status(
        self_: *mut DDS_ShortDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_get_subscriber(
        self_: *mut DDS_ShortDataReader,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_get_topicdescription(
        self_: *mut DDS_ShortDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_get_requested_incompatible_qos_status(
        self_: *mut DDS_ShortDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_wait_for_historical_data(
        self_: *mut DDS_ShortDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_set_qos_with_profile(
        self_: *mut DDS_ShortDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_create_named_readcondition(
        self_: *mut DDS_ShortDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_delete_named_readcondition(
        self_: *mut DDS_ShortDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_get_named_readcondition(
        self_: *mut DDS_ShortDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataReader_record_data(
        self_: *mut DDS_ShortDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_UShortDataReader {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_read(
        self_: *mut DDS_UShortDataReader,
        dataValues: *mut DDS_UShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_take(
        self_: *mut DDS_UShortDataReader,
        dataValues: *mut DDS_UShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_read_next_sample(
        self_: *mut DDS_UShortDataReader,
        dataValue: *mut DDS_UShort,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_take_next_sample(
        self_: *mut DDS_UShortDataReader,
        dataValue: *mut DDS_UShort,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_read_instance(
        self_: *mut DDS_UShortDataReader,
        dataValues: *mut DDS_UShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_take_instance(
        self_: *mut DDS_UShortDataReader,
        dataValues: *mut DDS_UShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_read_next_instance(
        self_: *mut DDS_UShortDataReader,
        dataValues: *mut DDS_UShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_take_next_instance(
        self_: *mut DDS_UShortDataReader,
        dataValues: *mut DDS_UShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_return_loan(
        self_: *mut DDS_UShortDataReader,
        dataValues: *mut DDS_UShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_return_recv_buffer(
        self_: *mut DDS_UShortDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_loan_recv_buffer(
        self_: *mut DDS_UShortDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_get_key_value(
        self_: *mut DDS_UShortDataReader,
        keyHolder: *mut DDS_UShort,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_lookup_instance(
        self_: *mut DDS_UShortDataReader,
        instance: *const DDS_UShort,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_get_data_instance(
        self_: *mut DDS_UShortDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_read_next_instance_w_condition(
        self_: *mut DDS_UShortDataReader,
        dataValues: *mut DDS_UShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_take_next_instance_w_condition(
        self_: *mut DDS_UShortDataReader,
        dataValues: *mut DDS_UShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_read_w_condition(
        self_: *mut DDS_UShortDataReader,
        dataValues: *mut DDS_UShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_take_w_condition(
        self_: *mut DDS_UShortDataReader,
        dataValues: *mut DDS_UShortSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_create_readcondition(
        self_: *mut DDS_UShortDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_delete_readcondition(
        self_: *mut DDS_UShortDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_delete_contained_entities(
        self_: *mut DDS_UShortDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_create_querycondition(
        self_: *mut DDS_UShortDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_set_qos(
        self_: *mut DDS_UShortDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_get_qos(
        self_: *mut DDS_UShortDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_set_listener(
        self_: *mut DDS_UShortDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_enable(self_: *mut DDS_UShortDataReader) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_as_entity(self_: *mut DDS_UShortDataReader) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_get_listener(
        self_: *mut DDS_UShortDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_get_liveliness_changed_status(
        self_: *mut DDS_UShortDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_get_requested_deadline_missed_status(
        self_: *mut DDS_UShortDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_get_subscription_matched_status(
        self_: *mut DDS_UShortDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_get_matched_publication_data(
        self_: *mut DDS_UShortDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_get_matched_publications(
        self_: *mut DDS_UShortDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_get_sample_lost_status(
        self_: *mut DDS_UShortDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_get_sample_rejected_status(
        self_: *mut DDS_UShortDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_get_subscriber(
        self_: *mut DDS_UShortDataReader,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_get_topicdescription(
        self_: *mut DDS_UShortDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_get_requested_incompatible_qos_status(
        self_: *mut DDS_UShortDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_wait_for_historical_data(
        self_: *mut DDS_UShortDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_set_qos_with_profile(
        self_: *mut DDS_UShortDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_create_named_readcondition(
        self_: *mut DDS_UShortDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_delete_named_readcondition(
        self_: *mut DDS_UShortDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_get_named_readcondition(
        self_: *mut DDS_UShortDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataReader_record_data(
        self_: *mut DDS_UShortDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_LongDataReader {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_read(
        self_: *mut DDS_LongDataReader,
        dataValues: *mut DDS_LongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_take(
        self_: *mut DDS_LongDataReader,
        dataValues: *mut DDS_LongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_read_next_sample(
        self_: *mut DDS_LongDataReader,
        dataValue: *mut DDS_Long,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_take_next_sample(
        self_: *mut DDS_LongDataReader,
        dataValue: *mut DDS_Long,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_read_instance(
        self_: *mut DDS_LongDataReader,
        dataValues: *mut DDS_LongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_take_instance(
        self_: *mut DDS_LongDataReader,
        dataValues: *mut DDS_LongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_read_next_instance(
        self_: *mut DDS_LongDataReader,
        dataValues: *mut DDS_LongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_take_next_instance(
        self_: *mut DDS_LongDataReader,
        dataValues: *mut DDS_LongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_return_loan(
        self_: *mut DDS_LongDataReader,
        dataValues: *mut DDS_LongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_return_recv_buffer(
        self_: *mut DDS_LongDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_loan_recv_buffer(
        self_: *mut DDS_LongDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_get_key_value(
        self_: *mut DDS_LongDataReader,
        keyHolder: *mut DDS_Long,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_lookup_instance(
        self_: *mut DDS_LongDataReader,
        instance: *const DDS_Long,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_get_data_instance(
        self_: *mut DDS_LongDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_read_next_instance_w_condition(
        self_: *mut DDS_LongDataReader,
        dataValues: *mut DDS_LongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_take_next_instance_w_condition(
        self_: *mut DDS_LongDataReader,
        dataValues: *mut DDS_LongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_read_w_condition(
        self_: *mut DDS_LongDataReader,
        dataValues: *mut DDS_LongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_take_w_condition(
        self_: *mut DDS_LongDataReader,
        dataValues: *mut DDS_LongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_create_readcondition(
        self_: *mut DDS_LongDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_delete_readcondition(
        self_: *mut DDS_LongDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_delete_contained_entities(
        self_: *mut DDS_LongDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_create_querycondition(
        self_: *mut DDS_LongDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_set_qos(
        self_: *mut DDS_LongDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_get_qos(
        self_: *mut DDS_LongDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_set_listener(
        self_: *mut DDS_LongDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_enable(self_: *mut DDS_LongDataReader) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_as_entity(self_: *mut DDS_LongDataReader) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_get_listener(
        self_: *mut DDS_LongDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_get_liveliness_changed_status(
        self_: *mut DDS_LongDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_get_requested_deadline_missed_status(
        self_: *mut DDS_LongDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_get_subscription_matched_status(
        self_: *mut DDS_LongDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_get_matched_publication_data(
        self_: *mut DDS_LongDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_get_matched_publications(
        self_: *mut DDS_LongDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_get_sample_lost_status(
        self_: *mut DDS_LongDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_get_sample_rejected_status(
        self_: *mut DDS_LongDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_get_subscriber(self_: *mut DDS_LongDataReader)
    -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_get_topicdescription(
        self_: *mut DDS_LongDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_get_requested_incompatible_qos_status(
        self_: *mut DDS_LongDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_wait_for_historical_data(
        self_: *mut DDS_LongDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_set_qos_with_profile(
        self_: *mut DDS_LongDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_create_named_readcondition(
        self_: *mut DDS_LongDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_delete_named_readcondition(
        self_: *mut DDS_LongDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_get_named_readcondition(
        self_: *mut DDS_LongDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataReader_record_data(
        self_: *mut DDS_LongDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ULongDataReader {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_read(
        self_: *mut DDS_ULongDataReader,
        dataValues: *mut DDS_ULongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_take(
        self_: *mut DDS_ULongDataReader,
        dataValues: *mut DDS_ULongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_read_next_sample(
        self_: *mut DDS_ULongDataReader,
        dataValue: *mut DDS_ULong,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_take_next_sample(
        self_: *mut DDS_ULongDataReader,
        dataValue: *mut DDS_ULong,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_read_instance(
        self_: *mut DDS_ULongDataReader,
        dataValues: *mut DDS_ULongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_take_instance(
        self_: *mut DDS_ULongDataReader,
        dataValues: *mut DDS_ULongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_read_next_instance(
        self_: *mut DDS_ULongDataReader,
        dataValues: *mut DDS_ULongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_take_next_instance(
        self_: *mut DDS_ULongDataReader,
        dataValues: *mut DDS_ULongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_return_loan(
        self_: *mut DDS_ULongDataReader,
        dataValues: *mut DDS_ULongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_return_recv_buffer(
        self_: *mut DDS_ULongDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_loan_recv_buffer(
        self_: *mut DDS_ULongDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_get_key_value(
        self_: *mut DDS_ULongDataReader,
        keyHolder: *mut DDS_ULong,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_lookup_instance(
        self_: *mut DDS_ULongDataReader,
        instance: *const DDS_ULong,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_get_data_instance(
        self_: *mut DDS_ULongDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_read_next_instance_w_condition(
        self_: *mut DDS_ULongDataReader,
        dataValues: *mut DDS_ULongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_take_next_instance_w_condition(
        self_: *mut DDS_ULongDataReader,
        dataValues: *mut DDS_ULongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_read_w_condition(
        self_: *mut DDS_ULongDataReader,
        dataValues: *mut DDS_ULongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_take_w_condition(
        self_: *mut DDS_ULongDataReader,
        dataValues: *mut DDS_ULongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_create_readcondition(
        self_: *mut DDS_ULongDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_delete_readcondition(
        self_: *mut DDS_ULongDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_delete_contained_entities(
        self_: *mut DDS_ULongDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_create_querycondition(
        self_: *mut DDS_ULongDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_set_qos(
        self_: *mut DDS_ULongDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_get_qos(
        self_: *mut DDS_ULongDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_set_listener(
        self_: *mut DDS_ULongDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_enable(self_: *mut DDS_ULongDataReader) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_as_entity(self_: *mut DDS_ULongDataReader) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_get_listener(
        self_: *mut DDS_ULongDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_get_liveliness_changed_status(
        self_: *mut DDS_ULongDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_get_requested_deadline_missed_status(
        self_: *mut DDS_ULongDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_get_subscription_matched_status(
        self_: *mut DDS_ULongDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_get_matched_publication_data(
        self_: *mut DDS_ULongDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_get_matched_publications(
        self_: *mut DDS_ULongDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_get_sample_lost_status(
        self_: *mut DDS_ULongDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_get_sample_rejected_status(
        self_: *mut DDS_ULongDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_get_subscriber(
        self_: *mut DDS_ULongDataReader,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_get_topicdescription(
        self_: *mut DDS_ULongDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_get_requested_incompatible_qos_status(
        self_: *mut DDS_ULongDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_wait_for_historical_data(
        self_: *mut DDS_ULongDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_set_qos_with_profile(
        self_: *mut DDS_ULongDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_create_named_readcondition(
        self_: *mut DDS_ULongDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_delete_named_readcondition(
        self_: *mut DDS_ULongDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_get_named_readcondition(
        self_: *mut DDS_ULongDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataReader_record_data(
        self_: *mut DDS_ULongDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_LongLongDataReader {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_read(
        self_: *mut DDS_LongLongDataReader,
        dataValues: *mut DDS_LongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_take(
        self_: *mut DDS_LongLongDataReader,
        dataValues: *mut DDS_LongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_read_next_sample(
        self_: *mut DDS_LongLongDataReader,
        dataValue: *mut DDS_LongLong,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_take_next_sample(
        self_: *mut DDS_LongLongDataReader,
        dataValue: *mut DDS_LongLong,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_read_instance(
        self_: *mut DDS_LongLongDataReader,
        dataValues: *mut DDS_LongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_take_instance(
        self_: *mut DDS_LongLongDataReader,
        dataValues: *mut DDS_LongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_read_next_instance(
        self_: *mut DDS_LongLongDataReader,
        dataValues: *mut DDS_LongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_take_next_instance(
        self_: *mut DDS_LongLongDataReader,
        dataValues: *mut DDS_LongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_return_loan(
        self_: *mut DDS_LongLongDataReader,
        dataValues: *mut DDS_LongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_return_recv_buffer(
        self_: *mut DDS_LongLongDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_loan_recv_buffer(
        self_: *mut DDS_LongLongDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_get_key_value(
        self_: *mut DDS_LongLongDataReader,
        keyHolder: *mut DDS_LongLong,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_lookup_instance(
        self_: *mut DDS_LongLongDataReader,
        instance: *const DDS_LongLong,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_get_data_instance(
        self_: *mut DDS_LongLongDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_read_next_instance_w_condition(
        self_: *mut DDS_LongLongDataReader,
        dataValues: *mut DDS_LongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_take_next_instance_w_condition(
        self_: *mut DDS_LongLongDataReader,
        dataValues: *mut DDS_LongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_read_w_condition(
        self_: *mut DDS_LongLongDataReader,
        dataValues: *mut DDS_LongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_take_w_condition(
        self_: *mut DDS_LongLongDataReader,
        dataValues: *mut DDS_LongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_create_readcondition(
        self_: *mut DDS_LongLongDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_delete_readcondition(
        self_: *mut DDS_LongLongDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_delete_contained_entities(
        self_: *mut DDS_LongLongDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_create_querycondition(
        self_: *mut DDS_LongLongDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_set_qos(
        self_: *mut DDS_LongLongDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_get_qos(
        self_: *mut DDS_LongLongDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_set_listener(
        self_: *mut DDS_LongLongDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_enable(self_: *mut DDS_LongLongDataReader) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_as_entity(self_: *mut DDS_LongLongDataReader) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_get_listener(
        self_: *mut DDS_LongLongDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_get_liveliness_changed_status(
        self_: *mut DDS_LongLongDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_get_requested_deadline_missed_status(
        self_: *mut DDS_LongLongDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_get_subscription_matched_status(
        self_: *mut DDS_LongLongDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_get_matched_publication_data(
        self_: *mut DDS_LongLongDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_get_matched_publications(
        self_: *mut DDS_LongLongDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_get_sample_lost_status(
        self_: *mut DDS_LongLongDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_get_sample_rejected_status(
        self_: *mut DDS_LongLongDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_get_subscriber(
        self_: *mut DDS_LongLongDataReader,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_get_topicdescription(
        self_: *mut DDS_LongLongDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_get_requested_incompatible_qos_status(
        self_: *mut DDS_LongLongDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_wait_for_historical_data(
        self_: *mut DDS_LongLongDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_set_qos_with_profile(
        self_: *mut DDS_LongLongDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_create_named_readcondition(
        self_: *mut DDS_LongLongDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_delete_named_readcondition(
        self_: *mut DDS_LongLongDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_get_named_readcondition(
        self_: *mut DDS_LongLongDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataReader_record_data(
        self_: *mut DDS_LongLongDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ULongLongDataReader {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_read(
        self_: *mut DDS_ULongLongDataReader,
        dataValues: *mut DDS_ULongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_take(
        self_: *mut DDS_ULongLongDataReader,
        dataValues: *mut DDS_ULongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_read_next_sample(
        self_: *mut DDS_ULongLongDataReader,
        dataValue: *mut DDS_ULongLong,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_take_next_sample(
        self_: *mut DDS_ULongLongDataReader,
        dataValue: *mut DDS_ULongLong,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_read_instance(
        self_: *mut DDS_ULongLongDataReader,
        dataValues: *mut DDS_ULongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_take_instance(
        self_: *mut DDS_ULongLongDataReader,
        dataValues: *mut DDS_ULongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_read_next_instance(
        self_: *mut DDS_ULongLongDataReader,
        dataValues: *mut DDS_ULongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_take_next_instance(
        self_: *mut DDS_ULongLongDataReader,
        dataValues: *mut DDS_ULongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_return_loan(
        self_: *mut DDS_ULongLongDataReader,
        dataValues: *mut DDS_ULongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_return_recv_buffer(
        self_: *mut DDS_ULongLongDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_loan_recv_buffer(
        self_: *mut DDS_ULongLongDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_get_key_value(
        self_: *mut DDS_ULongLongDataReader,
        keyHolder: *mut DDS_ULongLong,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_lookup_instance(
        self_: *mut DDS_ULongLongDataReader,
        instance: *const DDS_ULongLong,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_get_data_instance(
        self_: *mut DDS_ULongLongDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_read_next_instance_w_condition(
        self_: *mut DDS_ULongLongDataReader,
        dataValues: *mut DDS_ULongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_take_next_instance_w_condition(
        self_: *mut DDS_ULongLongDataReader,
        dataValues: *mut DDS_ULongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_read_w_condition(
        self_: *mut DDS_ULongLongDataReader,
        dataValues: *mut DDS_ULongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_take_w_condition(
        self_: *mut DDS_ULongLongDataReader,
        dataValues: *mut DDS_ULongLongSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_create_readcondition(
        self_: *mut DDS_ULongLongDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_delete_readcondition(
        self_: *mut DDS_ULongLongDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_delete_contained_entities(
        self_: *mut DDS_ULongLongDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_create_querycondition(
        self_: *mut DDS_ULongLongDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_set_qos(
        self_: *mut DDS_ULongLongDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_get_qos(
        self_: *mut DDS_ULongLongDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_set_listener(
        self_: *mut DDS_ULongLongDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_enable(self_: *mut DDS_ULongLongDataReader) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_as_entity(
        self_: *mut DDS_ULongLongDataReader,
    ) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_get_listener(
        self_: *mut DDS_ULongLongDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_get_liveliness_changed_status(
        self_: *mut DDS_ULongLongDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_get_requested_deadline_missed_status(
        self_: *mut DDS_ULongLongDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_get_subscription_matched_status(
        self_: *mut DDS_ULongLongDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_get_matched_publication_data(
        self_: *mut DDS_ULongLongDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_get_matched_publications(
        self_: *mut DDS_ULongLongDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_get_sample_lost_status(
        self_: *mut DDS_ULongLongDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_get_sample_rejected_status(
        self_: *mut DDS_ULongLongDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_get_subscriber(
        self_: *mut DDS_ULongLongDataReader,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_get_topicdescription(
        self_: *mut DDS_ULongLongDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_get_requested_incompatible_qos_status(
        self_: *mut DDS_ULongLongDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_wait_for_historical_data(
        self_: *mut DDS_ULongLongDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_set_qos_with_profile(
        self_: *mut DDS_ULongLongDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_create_named_readcondition(
        self_: *mut DDS_ULongLongDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_delete_named_readcondition(
        self_: *mut DDS_ULongLongDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_get_named_readcondition(
        self_: *mut DDS_ULongLongDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataReader_record_data(
        self_: *mut DDS_ULongLongDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_FloatDataReader {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_read(
        self_: *mut DDS_FloatDataReader,
        dataValues: *mut DDS_FloatSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_take(
        self_: *mut DDS_FloatDataReader,
        dataValues: *mut DDS_FloatSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_read_next_sample(
        self_: *mut DDS_FloatDataReader,
        dataValue: *mut DDS_Float,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_take_next_sample(
        self_: *mut DDS_FloatDataReader,
        dataValue: *mut DDS_Float,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_read_instance(
        self_: *mut DDS_FloatDataReader,
        dataValues: *mut DDS_FloatSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_take_instance(
        self_: *mut DDS_FloatDataReader,
        dataValues: *mut DDS_FloatSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_read_next_instance(
        self_: *mut DDS_FloatDataReader,
        dataValues: *mut DDS_FloatSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_take_next_instance(
        self_: *mut DDS_FloatDataReader,
        dataValues: *mut DDS_FloatSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_return_loan(
        self_: *mut DDS_FloatDataReader,
        dataValues: *mut DDS_FloatSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_return_recv_buffer(
        self_: *mut DDS_FloatDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_loan_recv_buffer(
        self_: *mut DDS_FloatDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_get_key_value(
        self_: *mut DDS_FloatDataReader,
        keyHolder: *mut DDS_Float,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_lookup_instance(
        self_: *mut DDS_FloatDataReader,
        instance: *const DDS_Float,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_get_data_instance(
        self_: *mut DDS_FloatDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_read_next_instance_w_condition(
        self_: *mut DDS_FloatDataReader,
        dataValues: *mut DDS_FloatSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_take_next_instance_w_condition(
        self_: *mut DDS_FloatDataReader,
        dataValues: *mut DDS_FloatSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_read_w_condition(
        self_: *mut DDS_FloatDataReader,
        dataValues: *mut DDS_FloatSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_take_w_condition(
        self_: *mut DDS_FloatDataReader,
        dataValues: *mut DDS_FloatSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_create_readcondition(
        self_: *mut DDS_FloatDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_delete_readcondition(
        self_: *mut DDS_FloatDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_delete_contained_entities(
        self_: *mut DDS_FloatDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_create_querycondition(
        self_: *mut DDS_FloatDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_set_qos(
        self_: *mut DDS_FloatDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_get_qos(
        self_: *mut DDS_FloatDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_set_listener(
        self_: *mut DDS_FloatDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_enable(self_: *mut DDS_FloatDataReader) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_as_entity(self_: *mut DDS_FloatDataReader) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_get_listener(
        self_: *mut DDS_FloatDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_get_liveliness_changed_status(
        self_: *mut DDS_FloatDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_get_requested_deadline_missed_status(
        self_: *mut DDS_FloatDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_get_subscription_matched_status(
        self_: *mut DDS_FloatDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_get_matched_publication_data(
        self_: *mut DDS_FloatDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_get_matched_publications(
        self_: *mut DDS_FloatDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_get_sample_lost_status(
        self_: *mut DDS_FloatDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_get_sample_rejected_status(
        self_: *mut DDS_FloatDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_get_subscriber(
        self_: *mut DDS_FloatDataReader,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_get_topicdescription(
        self_: *mut DDS_FloatDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_get_requested_incompatible_qos_status(
        self_: *mut DDS_FloatDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_wait_for_historical_data(
        self_: *mut DDS_FloatDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_set_qos_with_profile(
        self_: *mut DDS_FloatDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_create_named_readcondition(
        self_: *mut DDS_FloatDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_delete_named_readcondition(
        self_: *mut DDS_FloatDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_get_named_readcondition(
        self_: *mut DDS_FloatDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataReader_record_data(
        self_: *mut DDS_FloatDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DoubleDataReader {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_read(
        self_: *mut DDS_DoubleDataReader,
        dataValues: *mut DDS_DoubleSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_take(
        self_: *mut DDS_DoubleDataReader,
        dataValues: *mut DDS_DoubleSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_read_next_sample(
        self_: *mut DDS_DoubleDataReader,
        dataValue: *mut DDS_Double,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_take_next_sample(
        self_: *mut DDS_DoubleDataReader,
        dataValue: *mut DDS_Double,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_read_instance(
        self_: *mut DDS_DoubleDataReader,
        dataValues: *mut DDS_DoubleSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_take_instance(
        self_: *mut DDS_DoubleDataReader,
        dataValues: *mut DDS_DoubleSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_read_next_instance(
        self_: *mut DDS_DoubleDataReader,
        dataValues: *mut DDS_DoubleSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_take_next_instance(
        self_: *mut DDS_DoubleDataReader,
        dataValues: *mut DDS_DoubleSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_return_loan(
        self_: *mut DDS_DoubleDataReader,
        dataValues: *mut DDS_DoubleSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_return_recv_buffer(
        self_: *mut DDS_DoubleDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_loan_recv_buffer(
        self_: *mut DDS_DoubleDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_get_key_value(
        self_: *mut DDS_DoubleDataReader,
        keyHolder: *mut DDS_Double,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_lookup_instance(
        self_: *mut DDS_DoubleDataReader,
        instance: *const DDS_Double,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_get_data_instance(
        self_: *mut DDS_DoubleDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_read_next_instance_w_condition(
        self_: *mut DDS_DoubleDataReader,
        dataValues: *mut DDS_DoubleSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_take_next_instance_w_condition(
        self_: *mut DDS_DoubleDataReader,
        dataValues: *mut DDS_DoubleSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_read_w_condition(
        self_: *mut DDS_DoubleDataReader,
        dataValues: *mut DDS_DoubleSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_take_w_condition(
        self_: *mut DDS_DoubleDataReader,
        dataValues: *mut DDS_DoubleSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_create_readcondition(
        self_: *mut DDS_DoubleDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_delete_readcondition(
        self_: *mut DDS_DoubleDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_delete_contained_entities(
        self_: *mut DDS_DoubleDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_create_querycondition(
        self_: *mut DDS_DoubleDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_set_qos(
        self_: *mut DDS_DoubleDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_get_qos(
        self_: *mut DDS_DoubleDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_set_listener(
        self_: *mut DDS_DoubleDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_enable(self_: *mut DDS_DoubleDataReader) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_as_entity(self_: *mut DDS_DoubleDataReader) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_get_listener(
        self_: *mut DDS_DoubleDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_get_liveliness_changed_status(
        self_: *mut DDS_DoubleDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_get_requested_deadline_missed_status(
        self_: *mut DDS_DoubleDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_get_subscription_matched_status(
        self_: *mut DDS_DoubleDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_get_matched_publication_data(
        self_: *mut DDS_DoubleDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_get_matched_publications(
        self_: *mut DDS_DoubleDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_get_sample_lost_status(
        self_: *mut DDS_DoubleDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_get_sample_rejected_status(
        self_: *mut DDS_DoubleDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_get_subscriber(
        self_: *mut DDS_DoubleDataReader,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_get_topicdescription(
        self_: *mut DDS_DoubleDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_get_requested_incompatible_qos_status(
        self_: *mut DDS_DoubleDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_wait_for_historical_data(
        self_: *mut DDS_DoubleDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_set_qos_with_profile(
        self_: *mut DDS_DoubleDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_create_named_readcondition(
        self_: *mut DDS_DoubleDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_delete_named_readcondition(
        self_: *mut DDS_DoubleDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_get_named_readcondition(
        self_: *mut DDS_DoubleDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataReader_record_data(
        self_: *mut DDS_DoubleDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_StringDataReader {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_read(
        self_: *mut DDS_StringDataReader,
        dataValues: *mut DDS_StringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_take(
        self_: *mut DDS_StringDataReader,
        dataValues: *mut DDS_StringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_read_next_sample(
        self_: *mut DDS_StringDataReader,
        dataValue: *mut DDS_String,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_take_next_sample(
        self_: *mut DDS_StringDataReader,
        dataValue: *mut DDS_String,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_read_instance(
        self_: *mut DDS_StringDataReader,
        dataValues: *mut DDS_StringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_take_instance(
        self_: *mut DDS_StringDataReader,
        dataValues: *mut DDS_StringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_read_next_instance(
        self_: *mut DDS_StringDataReader,
        dataValues: *mut DDS_StringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_take_next_instance(
        self_: *mut DDS_StringDataReader,
        dataValues: *mut DDS_StringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_return_loan(
        self_: *mut DDS_StringDataReader,
        dataValues: *mut DDS_StringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_return_recv_buffer(
        self_: *mut DDS_StringDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_loan_recv_buffer(
        self_: *mut DDS_StringDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_get_key_value(
        self_: *mut DDS_StringDataReader,
        keyHolder: *mut DDS_String,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_lookup_instance(
        self_: *mut DDS_StringDataReader,
        instance: *const DDS_String,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_get_data_instance(
        self_: *mut DDS_StringDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_read_next_instance_w_condition(
        self_: *mut DDS_StringDataReader,
        dataValues: *mut DDS_StringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_take_next_instance_w_condition(
        self_: *mut DDS_StringDataReader,
        dataValues: *mut DDS_StringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_read_w_condition(
        self_: *mut DDS_StringDataReader,
        dataValues: *mut DDS_StringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_take_w_condition(
        self_: *mut DDS_StringDataReader,
        dataValues: *mut DDS_StringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_create_readcondition(
        self_: *mut DDS_StringDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_delete_readcondition(
        self_: *mut DDS_StringDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_delete_contained_entities(
        self_: *mut DDS_StringDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_create_querycondition(
        self_: *mut DDS_StringDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_set_qos(
        self_: *mut DDS_StringDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_get_qos(
        self_: *mut DDS_StringDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_set_listener(
        self_: *mut DDS_StringDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_enable(self_: *mut DDS_StringDataReader) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_as_entity(self_: *mut DDS_StringDataReader) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_get_listener(
        self_: *mut DDS_StringDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_get_liveliness_changed_status(
        self_: *mut DDS_StringDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_get_requested_deadline_missed_status(
        self_: *mut DDS_StringDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_get_subscription_matched_status(
        self_: *mut DDS_StringDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_get_matched_publication_data(
        self_: *mut DDS_StringDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_get_matched_publications(
        self_: *mut DDS_StringDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_get_sample_lost_status(
        self_: *mut DDS_StringDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_get_sample_rejected_status(
        self_: *mut DDS_StringDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_get_subscriber(
        self_: *mut DDS_StringDataReader,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_get_topicdescription(
        self_: *mut DDS_StringDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_get_requested_incompatible_qos_status(
        self_: *mut DDS_StringDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_wait_for_historical_data(
        self_: *mut DDS_StringDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_set_qos_with_profile(
        self_: *mut DDS_StringDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_create_named_readcondition(
        self_: *mut DDS_StringDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_delete_named_readcondition(
        self_: *mut DDS_StringDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_get_named_readcondition(
        self_: *mut DDS_StringDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataReader_record_data(
        self_: *mut DDS_StringDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_KeyedStringDataReader {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_read(
        self_: *mut DDS_KeyedStringDataReader,
        dataValues: *mut DDS_KeyedStringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_take(
        self_: *mut DDS_KeyedStringDataReader,
        dataValues: *mut DDS_KeyedStringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_read_next_sample(
        self_: *mut DDS_KeyedStringDataReader,
        dataValue: *mut DDS_KeyedString,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_take_next_sample(
        self_: *mut DDS_KeyedStringDataReader,
        dataValue: *mut DDS_KeyedString,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_read_instance(
        self_: *mut DDS_KeyedStringDataReader,
        dataValues: *mut DDS_KeyedStringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_take_instance(
        self_: *mut DDS_KeyedStringDataReader,
        dataValues: *mut DDS_KeyedStringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_read_next_instance(
        self_: *mut DDS_KeyedStringDataReader,
        dataValues: *mut DDS_KeyedStringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_take_next_instance(
        self_: *mut DDS_KeyedStringDataReader,
        dataValues: *mut DDS_KeyedStringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_return_loan(
        self_: *mut DDS_KeyedStringDataReader,
        dataValues: *mut DDS_KeyedStringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_return_recv_buffer(
        self_: *mut DDS_KeyedStringDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_loan_recv_buffer(
        self_: *mut DDS_KeyedStringDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_get_key_value(
        self_: *mut DDS_KeyedStringDataReader,
        keyHolder: *mut DDS_KeyedString,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_lookup_instance(
        self_: *mut DDS_KeyedStringDataReader,
        instance: *const DDS_KeyedString,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_get_data_instance(
        self_: *mut DDS_KeyedStringDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_read_next_instance_w_condition(
        self_: *mut DDS_KeyedStringDataReader,
        dataValues: *mut DDS_KeyedStringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_take_next_instance_w_condition(
        self_: *mut DDS_KeyedStringDataReader,
        dataValues: *mut DDS_KeyedStringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_read_w_condition(
        self_: *mut DDS_KeyedStringDataReader,
        dataValues: *mut DDS_KeyedStringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_take_w_condition(
        self_: *mut DDS_KeyedStringDataReader,
        dataValues: *mut DDS_KeyedStringSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_create_readcondition(
        self_: *mut DDS_KeyedStringDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_delete_readcondition(
        self_: *mut DDS_KeyedStringDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_delete_contained_entities(
        self_: *mut DDS_KeyedStringDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_create_querycondition(
        self_: *mut DDS_KeyedStringDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_set_qos(
        self_: *mut DDS_KeyedStringDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_get_qos(
        self_: *mut DDS_KeyedStringDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_set_listener(
        self_: *mut DDS_KeyedStringDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_enable(
        self_: *mut DDS_KeyedStringDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_as_entity(
        self_: *mut DDS_KeyedStringDataReader,
    ) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_get_listener(
        self_: *mut DDS_KeyedStringDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_get_liveliness_changed_status(
        self_: *mut DDS_KeyedStringDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_get_requested_deadline_missed_status(
        self_: *mut DDS_KeyedStringDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_get_subscription_matched_status(
        self_: *mut DDS_KeyedStringDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_get_matched_publication_data(
        self_: *mut DDS_KeyedStringDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_get_matched_publications(
        self_: *mut DDS_KeyedStringDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_get_sample_lost_status(
        self_: *mut DDS_KeyedStringDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_get_sample_rejected_status(
        self_: *mut DDS_KeyedStringDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_get_subscriber(
        self_: *mut DDS_KeyedStringDataReader,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_get_topicdescription(
        self_: *mut DDS_KeyedStringDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_get_requested_incompatible_qos_status(
        self_: *mut DDS_KeyedStringDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_wait_for_historical_data(
        self_: *mut DDS_KeyedStringDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_set_qos_with_profile(
        self_: *mut DDS_KeyedStringDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_create_named_readcondition(
        self_: *mut DDS_KeyedStringDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_delete_named_readcondition(
        self_: *mut DDS_KeyedStringDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_get_named_readcondition(
        self_: *mut DDS_KeyedStringDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataReader_record_data(
        self_: *mut DDS_KeyedStringDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_BytesDataReader {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_read(
        self_: *mut DDS_BytesDataReader,
        dataValues: *mut DDS_BytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_take(
        self_: *mut DDS_BytesDataReader,
        dataValues: *mut DDS_BytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_read_next_sample(
        self_: *mut DDS_BytesDataReader,
        dataValue: *mut DDS_Bytes,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_take_next_sample(
        self_: *mut DDS_BytesDataReader,
        dataValue: *mut DDS_Bytes,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_read_instance(
        self_: *mut DDS_BytesDataReader,
        dataValues: *mut DDS_BytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_take_instance(
        self_: *mut DDS_BytesDataReader,
        dataValues: *mut DDS_BytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_read_next_instance(
        self_: *mut DDS_BytesDataReader,
        dataValues: *mut DDS_BytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_take_next_instance(
        self_: *mut DDS_BytesDataReader,
        dataValues: *mut DDS_BytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_return_loan(
        self_: *mut DDS_BytesDataReader,
        dataValues: *mut DDS_BytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_return_recv_buffer(
        self_: *mut DDS_BytesDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_loan_recv_buffer(
        self_: *mut DDS_BytesDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_get_key_value(
        self_: *mut DDS_BytesDataReader,
        keyHolder: *mut DDS_Bytes,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_lookup_instance(
        self_: *mut DDS_BytesDataReader,
        instance: *const DDS_Bytes,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_get_data_instance(
        self_: *mut DDS_BytesDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_read_next_instance_w_condition(
        self_: *mut DDS_BytesDataReader,
        dataValues: *mut DDS_BytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_take_next_instance_w_condition(
        self_: *mut DDS_BytesDataReader,
        dataValues: *mut DDS_BytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_read_w_condition(
        self_: *mut DDS_BytesDataReader,
        dataValues: *mut DDS_BytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_take_w_condition(
        self_: *mut DDS_BytesDataReader,
        dataValues: *mut DDS_BytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_create_readcondition(
        self_: *mut DDS_BytesDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_delete_readcondition(
        self_: *mut DDS_BytesDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_delete_contained_entities(
        self_: *mut DDS_BytesDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_create_querycondition(
        self_: *mut DDS_BytesDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_set_qos(
        self_: *mut DDS_BytesDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_get_qos(
        self_: *mut DDS_BytesDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_set_listener(
        self_: *mut DDS_BytesDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_enable(self_: *mut DDS_BytesDataReader) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_as_entity(self_: *mut DDS_BytesDataReader) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_get_listener(
        self_: *mut DDS_BytesDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_get_liveliness_changed_status(
        self_: *mut DDS_BytesDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_get_requested_deadline_missed_status(
        self_: *mut DDS_BytesDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_get_subscription_matched_status(
        self_: *mut DDS_BytesDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_get_matched_publication_data(
        self_: *mut DDS_BytesDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_get_matched_publications(
        self_: *mut DDS_BytesDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_get_sample_lost_status(
        self_: *mut DDS_BytesDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_get_sample_rejected_status(
        self_: *mut DDS_BytesDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_get_subscriber(
        self_: *mut DDS_BytesDataReader,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_get_topicdescription(
        self_: *mut DDS_BytesDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_get_requested_incompatible_qos_status(
        self_: *mut DDS_BytesDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_wait_for_historical_data(
        self_: *mut DDS_BytesDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_set_qos_with_profile(
        self_: *mut DDS_BytesDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_create_named_readcondition(
        self_: *mut DDS_BytesDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_delete_named_readcondition(
        self_: *mut DDS_BytesDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_get_named_readcondition(
        self_: *mut DDS_BytesDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataReader_record_data(
        self_: *mut DDS_BytesDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_KeyedBytesDataReader {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_read(
        self_: *mut DDS_KeyedBytesDataReader,
        dataValues: *mut DDS_KeyedBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_take(
        self_: *mut DDS_KeyedBytesDataReader,
        dataValues: *mut DDS_KeyedBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_read_next_sample(
        self_: *mut DDS_KeyedBytesDataReader,
        dataValue: *mut DDS_KeyedBytes,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_take_next_sample(
        self_: *mut DDS_KeyedBytesDataReader,
        dataValue: *mut DDS_KeyedBytes,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_read_instance(
        self_: *mut DDS_KeyedBytesDataReader,
        dataValues: *mut DDS_KeyedBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_take_instance(
        self_: *mut DDS_KeyedBytesDataReader,
        dataValues: *mut DDS_KeyedBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_read_next_instance(
        self_: *mut DDS_KeyedBytesDataReader,
        dataValues: *mut DDS_KeyedBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_take_next_instance(
        self_: *mut DDS_KeyedBytesDataReader,
        dataValues: *mut DDS_KeyedBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_return_loan(
        self_: *mut DDS_KeyedBytesDataReader,
        dataValues: *mut DDS_KeyedBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_return_recv_buffer(
        self_: *mut DDS_KeyedBytesDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_loan_recv_buffer(
        self_: *mut DDS_KeyedBytesDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_get_key_value(
        self_: *mut DDS_KeyedBytesDataReader,
        keyHolder: *mut DDS_KeyedBytes,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_lookup_instance(
        self_: *mut DDS_KeyedBytesDataReader,
        instance: *const DDS_KeyedBytes,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_get_data_instance(
        self_: *mut DDS_KeyedBytesDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_read_next_instance_w_condition(
        self_: *mut DDS_KeyedBytesDataReader,
        dataValues: *mut DDS_KeyedBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_take_next_instance_w_condition(
        self_: *mut DDS_KeyedBytesDataReader,
        dataValues: *mut DDS_KeyedBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_read_w_condition(
        self_: *mut DDS_KeyedBytesDataReader,
        dataValues: *mut DDS_KeyedBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_take_w_condition(
        self_: *mut DDS_KeyedBytesDataReader,
        dataValues: *mut DDS_KeyedBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_create_readcondition(
        self_: *mut DDS_KeyedBytesDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_delete_readcondition(
        self_: *mut DDS_KeyedBytesDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_delete_contained_entities(
        self_: *mut DDS_KeyedBytesDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_create_querycondition(
        self_: *mut DDS_KeyedBytesDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_set_qos(
        self_: *mut DDS_KeyedBytesDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_get_qos(
        self_: *mut DDS_KeyedBytesDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_set_listener(
        self_: *mut DDS_KeyedBytesDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_enable(
        self_: *mut DDS_KeyedBytesDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_as_entity(
        self_: *mut DDS_KeyedBytesDataReader,
    ) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_get_listener(
        self_: *mut DDS_KeyedBytesDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_get_liveliness_changed_status(
        self_: *mut DDS_KeyedBytesDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_get_requested_deadline_missed_status(
        self_: *mut DDS_KeyedBytesDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_get_subscription_matched_status(
        self_: *mut DDS_KeyedBytesDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_get_matched_publication_data(
        self_: *mut DDS_KeyedBytesDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_get_matched_publications(
        self_: *mut DDS_KeyedBytesDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_get_sample_lost_status(
        self_: *mut DDS_KeyedBytesDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_get_sample_rejected_status(
        self_: *mut DDS_KeyedBytesDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_get_subscriber(
        self_: *mut DDS_KeyedBytesDataReader,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_get_topicdescription(
        self_: *mut DDS_KeyedBytesDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_get_requested_incompatible_qos_status(
        self_: *mut DDS_KeyedBytesDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_wait_for_historical_data(
        self_: *mut DDS_KeyedBytesDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_set_qos_with_profile(
        self_: *mut DDS_KeyedBytesDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_create_named_readcondition(
        self_: *mut DDS_KeyedBytesDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_delete_named_readcondition(
        self_: *mut DDS_KeyedBytesDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_get_named_readcondition(
        self_: *mut DDS_KeyedBytesDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataReader_record_data(
        self_: *mut DDS_KeyedBytesDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ZeroCopyBytesDataReader {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_read(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        dataValues: *mut DDS_ZeroCopyBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_take(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        dataValues: *mut DDS_ZeroCopyBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_read_next_sample(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        dataValue: *mut DDS_ZeroCopyBytes,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_take_next_sample(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        dataValue: *mut DDS_ZeroCopyBytes,
        sampleInfo: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_read_instance(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        dataValues: *mut DDS_ZeroCopyBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_take_instance(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        dataValues: *mut DDS_ZeroCopyBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_read_next_instance(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        dataValues: *mut DDS_ZeroCopyBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_take_next_instance(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        dataValues: *mut DDS_ZeroCopyBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_return_loan(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        dataValues: *mut DDS_ZeroCopyBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_return_recv_buffer(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_loan_recv_buffer(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        sample_info: *mut DDS_SampleInfo,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_get_key_value(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        keyHolder: *mut DDS_ZeroCopyBytes,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_lookup_instance(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        instance: *const DDS_ZeroCopyBytes,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_get_data_instance(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        dataHandles: *mut DDS_InstanceHandleSeq,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_read_next_instance_w_condition(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        dataValues: *mut DDS_ZeroCopyBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_take_next_instance_w_condition(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        dataValues: *mut DDS_ZeroCopyBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        previousHandle: *const DDS_InstanceHandle_t,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_read_w_condition(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        dataValues: *mut DDS_ZeroCopyBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_take_w_condition(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        dataValues: *mut DDS_ZeroCopyBytesSeq,
        sampleInfos: *mut DDS_SampleInfoSeq,
        maxSamples: DDS_Long,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_create_readcondition(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_delete_readcondition(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        condition: *mut DDS_ReadCondition,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_delete_contained_entities(
        self_: *mut DDS_ZeroCopyBytesDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_create_querycondition(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
        queryExpression: *const DDS_Char,
        queryParameters: *const DDS_StringSeq,
    ) -> *mut DDS_QueryCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_set_qos(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        qoslist: *const DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_get_qos(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        qoslist: *mut DDS_DataReaderQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_set_listener(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        listener: *mut DDS_DataReaderListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_enable(
        self_: *mut DDS_ZeroCopyBytesDataReader,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_as_entity(
        self_: *mut DDS_ZeroCopyBytesDataReader,
    ) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_get_listener(
        self_: *mut DDS_ZeroCopyBytesDataReader,
    ) -> *mut DDS_DataReaderListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_get_liveliness_changed_status(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        status: *mut DDS_LivelinessChangedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_get_requested_deadline_missed_status(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        status: *mut DDS_RequestedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_get_subscription_matched_status(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        status: *mut DDS_SubscriptionMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_get_matched_publication_data(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        publicationData: *mut DDS_PublicationBuiltinTopicData,
        publicationHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_get_matched_publications(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        publicationHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_get_sample_lost_status(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        status: *mut DDS_SampleLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_get_sample_rejected_status(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        status: *mut DDS_SampleRejectedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_get_subscriber(
        self_: *mut DDS_ZeroCopyBytesDataReader,
    ) -> *mut DDS_Subscriber;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_get_topicdescription(
        self_: *mut DDS_ZeroCopyBytesDataReader,
    ) -> *mut DDS_TopicDescription;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_get_requested_incompatible_qos_status(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        status: *mut DDS_RequestedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_wait_for_historical_data(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_set_qos_with_profile(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_create_named_readcondition(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        name: *const DDS_Char,
        sampleMask: DDS_SampleStateMask,
        viewMask: DDS_ViewStateMask,
        instanceMask: DDS_InstanceStateMask,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_delete_named_readcondition(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_get_named_readcondition(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        name: *const DDS_Char,
    ) -> *mut DDS_ReadCondition;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataReader_record_data(
        self_: *mut DDS_ZeroCopyBytesDataReader,
        sampleInfos: *mut DDS_SampleInfoSeq,
        finish: ZR_BOOLEAN,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_BooleanDataWriter {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_write(
        self_: *mut DDS_BooleanDataWriter,
        sample: *const DDS_Boolean,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_write_w_timestamp(
        self_: *mut DDS_BooleanDataWriter,
        sample: *const DDS_Boolean,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_write_w_dst(
        self_: *mut DDS_BooleanDataWriter,
        sample: *const DDS_Boolean,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_register_instance(
        self_: *mut DDS_BooleanDataWriter,
        instance: *mut DDS_Boolean,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_register_instance_w_timestamp(
        self_: *mut DDS_BooleanDataWriter,
        instance: *const DDS_Boolean,
        timestamp: *const DDS_Time_t,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_unregister_instance(
        self_: *mut DDS_BooleanDataWriter,
        instance: *const DDS_Boolean,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_unregister_instance_w_timestamp(
        self_: *mut DDS_BooleanDataWriter,
        instance: *const DDS_Boolean,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_dispose(
        self_: *mut DDS_BooleanDataWriter,
        instance: *const DDS_Boolean,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_dispose_w_timestamp(
        self_: *mut DDS_BooleanDataWriter,
        instance: *const DDS_Boolean,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_get_key_value(
        self_: *mut DDS_BooleanDataWriter,
        keyHolder: *mut DDS_Boolean,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_lookup_instance(
        self_: *mut DDS_BooleanDataWriter,
        instance: *const DDS_Boolean,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_assert_liveliness(
        self_: *mut DDS_BooleanDataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_get_liveliness_lost_status(
        self_: *mut DDS_BooleanDataWriter,
        status: *mut DDS_LivelinessLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_get_offered_deadline_missed_status(
        self_: *mut DDS_BooleanDataWriter,
        status: *mut DDS_OfferedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_get_publication_matched_status(
        self_: *mut DDS_BooleanDataWriter,
        status: *mut DDS_PublicationMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_get_matched_subscription_data(
        self_: *mut DDS_BooleanDataWriter,
        subscriptionData: *mut DDS_SubscriptionBuiltinTopicData,
        subscriptionHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_get_matched_subscriptions(
        self_: *mut DDS_BooleanDataWriter,
        subscriptionHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_set_qos(
        self_: *mut DDS_BooleanDataWriter,
        qoslist: *const DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_get_qos(
        self_: *mut DDS_BooleanDataWriter,
        qoslist: *mut DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_set_listener(
        self_: *mut DDS_BooleanDataWriter,
        listener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_enable(self_: *mut DDS_BooleanDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_flush(self_: *mut DDS_BooleanDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_as_entity(self_: *mut DDS_BooleanDataWriter) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_get_listener(
        self_: *mut DDS_BooleanDataWriter,
    ) -> *mut DDS_DataWriterListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_get_topic(self_: *mut DDS_BooleanDataWriter) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_get_publisher(
        self_: *mut DDS_BooleanDataWriter,
    ) -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_get_offered_incompatible_qos_status(
        self_: *mut DDS_BooleanDataWriter,
        status: *mut DDS_OfferedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_wait_for_acknowledgments(
        self_: *mut DDS_BooleanDataWriter,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_set_qos_with_profile(
        dw: *mut DDS_BooleanDataWriter,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_get_send_status(
        self_: *mut DDS_BooleanDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_print_send_status(
        self_: *mut DDS_BooleanDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanDataWriter_get_send_status_w_handle(
        self_: *mut DDS_BooleanDataWriter,
        status: *mut DDS_PublicationSendStatus,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_OctetDataWriter {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_write(
        self_: *mut DDS_OctetDataWriter,
        sample: *const DDS_Octet,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_write_w_timestamp(
        self_: *mut DDS_OctetDataWriter,
        sample: *const DDS_Octet,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_write_w_dst(
        self_: *mut DDS_OctetDataWriter,
        sample: *const DDS_Octet,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_register_instance(
        self_: *mut DDS_OctetDataWriter,
        instance: *mut DDS_Octet,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_register_instance_w_timestamp(
        self_: *mut DDS_OctetDataWriter,
        instance: *const DDS_Octet,
        timestamp: *const DDS_Time_t,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_unregister_instance(
        self_: *mut DDS_OctetDataWriter,
        instance: *const DDS_Octet,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_unregister_instance_w_timestamp(
        self_: *mut DDS_OctetDataWriter,
        instance: *const DDS_Octet,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_dispose(
        self_: *mut DDS_OctetDataWriter,
        instance: *const DDS_Octet,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_dispose_w_timestamp(
        self_: *mut DDS_OctetDataWriter,
        instance: *const DDS_Octet,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_get_key_value(
        self_: *mut DDS_OctetDataWriter,
        keyHolder: *mut DDS_Octet,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_lookup_instance(
        self_: *mut DDS_OctetDataWriter,
        instance: *const DDS_Octet,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_assert_liveliness(
        self_: *mut DDS_OctetDataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_get_liveliness_lost_status(
        self_: *mut DDS_OctetDataWriter,
        status: *mut DDS_LivelinessLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_get_offered_deadline_missed_status(
        self_: *mut DDS_OctetDataWriter,
        status: *mut DDS_OfferedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_get_publication_matched_status(
        self_: *mut DDS_OctetDataWriter,
        status: *mut DDS_PublicationMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_get_matched_subscription_data(
        self_: *mut DDS_OctetDataWriter,
        subscriptionData: *mut DDS_SubscriptionBuiltinTopicData,
        subscriptionHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_get_matched_subscriptions(
        self_: *mut DDS_OctetDataWriter,
        subscriptionHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_set_qos(
        self_: *mut DDS_OctetDataWriter,
        qoslist: *const DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_get_qos(
        self_: *mut DDS_OctetDataWriter,
        qoslist: *mut DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_set_listener(
        self_: *mut DDS_OctetDataWriter,
        listener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_enable(self_: *mut DDS_OctetDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_flush(self_: *mut DDS_OctetDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_as_entity(self_: *mut DDS_OctetDataWriter) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_get_listener(
        self_: *mut DDS_OctetDataWriter,
    ) -> *mut DDS_DataWriterListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_get_topic(self_: *mut DDS_OctetDataWriter) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_get_publisher(self_: *mut DDS_OctetDataWriter)
    -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_get_offered_incompatible_qos_status(
        self_: *mut DDS_OctetDataWriter,
        status: *mut DDS_OfferedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_wait_for_acknowledgments(
        self_: *mut DDS_OctetDataWriter,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_set_qos_with_profile(
        dw: *mut DDS_OctetDataWriter,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_get_send_status(
        self_: *mut DDS_OctetDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_print_send_status(
        self_: *mut DDS_OctetDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetDataWriter_get_send_status_w_handle(
        self_: *mut DDS_OctetDataWriter,
        status: *mut DDS_PublicationSendStatus,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_CharDataWriter {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_write(
        self_: *mut DDS_CharDataWriter,
        sample: *const DDS_Char,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_write_w_timestamp(
        self_: *mut DDS_CharDataWriter,
        sample: *const DDS_Char,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_write_w_dst(
        self_: *mut DDS_CharDataWriter,
        sample: *const DDS_Char,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_register_instance(
        self_: *mut DDS_CharDataWriter,
        instance: *mut DDS_Char,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_register_instance_w_timestamp(
        self_: *mut DDS_CharDataWriter,
        instance: *const DDS_Char,
        timestamp: *const DDS_Time_t,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_unregister_instance(
        self_: *mut DDS_CharDataWriter,
        instance: *const DDS_Char,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_unregister_instance_w_timestamp(
        self_: *mut DDS_CharDataWriter,
        instance: *const DDS_Char,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_dispose(
        self_: *mut DDS_CharDataWriter,
        instance: *const DDS_Char,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_dispose_w_timestamp(
        self_: *mut DDS_CharDataWriter,
        instance: *const DDS_Char,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_get_key_value(
        self_: *mut DDS_CharDataWriter,
        keyHolder: *mut DDS_Char,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_lookup_instance(
        self_: *mut DDS_CharDataWriter,
        instance: *const DDS_Char,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_assert_liveliness(self_: *mut DDS_CharDataWriter)
    -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_get_liveliness_lost_status(
        self_: *mut DDS_CharDataWriter,
        status: *mut DDS_LivelinessLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_get_offered_deadline_missed_status(
        self_: *mut DDS_CharDataWriter,
        status: *mut DDS_OfferedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_get_publication_matched_status(
        self_: *mut DDS_CharDataWriter,
        status: *mut DDS_PublicationMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_get_matched_subscription_data(
        self_: *mut DDS_CharDataWriter,
        subscriptionData: *mut DDS_SubscriptionBuiltinTopicData,
        subscriptionHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_get_matched_subscriptions(
        self_: *mut DDS_CharDataWriter,
        subscriptionHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_set_qos(
        self_: *mut DDS_CharDataWriter,
        qoslist: *const DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_get_qos(
        self_: *mut DDS_CharDataWriter,
        qoslist: *mut DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_set_listener(
        self_: *mut DDS_CharDataWriter,
        listener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_enable(self_: *mut DDS_CharDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_flush(self_: *mut DDS_CharDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_as_entity(self_: *mut DDS_CharDataWriter) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_get_listener(
        self_: *mut DDS_CharDataWriter,
    ) -> *mut DDS_DataWriterListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_get_topic(self_: *mut DDS_CharDataWriter) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_get_publisher(self_: *mut DDS_CharDataWriter) -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_get_offered_incompatible_qos_status(
        self_: *mut DDS_CharDataWriter,
        status: *mut DDS_OfferedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_wait_for_acknowledgments(
        self_: *mut DDS_CharDataWriter,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_set_qos_with_profile(
        dw: *mut DDS_CharDataWriter,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_get_send_status(
        self_: *mut DDS_CharDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_print_send_status(
        self_: *mut DDS_CharDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharDataWriter_get_send_status_w_handle(
        self_: *mut DDS_CharDataWriter,
        status: *mut DDS_PublicationSendStatus,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ShortDataWriter {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_write(
        self_: *mut DDS_ShortDataWriter,
        sample: *const DDS_Short,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_write_w_timestamp(
        self_: *mut DDS_ShortDataWriter,
        sample: *const DDS_Short,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_write_w_dst(
        self_: *mut DDS_ShortDataWriter,
        sample: *const DDS_Short,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_register_instance(
        self_: *mut DDS_ShortDataWriter,
        instance: *mut DDS_Short,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_register_instance_w_timestamp(
        self_: *mut DDS_ShortDataWriter,
        instance: *const DDS_Short,
        timestamp: *const DDS_Time_t,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_unregister_instance(
        self_: *mut DDS_ShortDataWriter,
        instance: *const DDS_Short,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_unregister_instance_w_timestamp(
        self_: *mut DDS_ShortDataWriter,
        instance: *const DDS_Short,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_dispose(
        self_: *mut DDS_ShortDataWriter,
        instance: *const DDS_Short,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_dispose_w_timestamp(
        self_: *mut DDS_ShortDataWriter,
        instance: *const DDS_Short,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_get_key_value(
        self_: *mut DDS_ShortDataWriter,
        keyHolder: *mut DDS_Short,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_lookup_instance(
        self_: *mut DDS_ShortDataWriter,
        instance: *const DDS_Short,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_assert_liveliness(
        self_: *mut DDS_ShortDataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_get_liveliness_lost_status(
        self_: *mut DDS_ShortDataWriter,
        status: *mut DDS_LivelinessLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_get_offered_deadline_missed_status(
        self_: *mut DDS_ShortDataWriter,
        status: *mut DDS_OfferedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_get_publication_matched_status(
        self_: *mut DDS_ShortDataWriter,
        status: *mut DDS_PublicationMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_get_matched_subscription_data(
        self_: *mut DDS_ShortDataWriter,
        subscriptionData: *mut DDS_SubscriptionBuiltinTopicData,
        subscriptionHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_get_matched_subscriptions(
        self_: *mut DDS_ShortDataWriter,
        subscriptionHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_set_qos(
        self_: *mut DDS_ShortDataWriter,
        qoslist: *const DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_get_qos(
        self_: *mut DDS_ShortDataWriter,
        qoslist: *mut DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_set_listener(
        self_: *mut DDS_ShortDataWriter,
        listener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_enable(self_: *mut DDS_ShortDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_flush(self_: *mut DDS_ShortDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_as_entity(self_: *mut DDS_ShortDataWriter) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_get_listener(
        self_: *mut DDS_ShortDataWriter,
    ) -> *mut DDS_DataWriterListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_get_topic(self_: *mut DDS_ShortDataWriter) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_get_publisher(self_: *mut DDS_ShortDataWriter)
    -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_get_offered_incompatible_qos_status(
        self_: *mut DDS_ShortDataWriter,
        status: *mut DDS_OfferedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_wait_for_acknowledgments(
        self_: *mut DDS_ShortDataWriter,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_set_qos_with_profile(
        dw: *mut DDS_ShortDataWriter,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_get_send_status(
        self_: *mut DDS_ShortDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_print_send_status(
        self_: *mut DDS_ShortDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortDataWriter_get_send_status_w_handle(
        self_: *mut DDS_ShortDataWriter,
        status: *mut DDS_PublicationSendStatus,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_UShortDataWriter {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_write(
        self_: *mut DDS_UShortDataWriter,
        sample: *const DDS_UShort,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_write_w_timestamp(
        self_: *mut DDS_UShortDataWriter,
        sample: *const DDS_UShort,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_write_w_dst(
        self_: *mut DDS_UShortDataWriter,
        sample: *const DDS_UShort,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_register_instance(
        self_: *mut DDS_UShortDataWriter,
        instance: *mut DDS_UShort,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_register_instance_w_timestamp(
        self_: *mut DDS_UShortDataWriter,
        instance: *const DDS_UShort,
        timestamp: *const DDS_Time_t,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_unregister_instance(
        self_: *mut DDS_UShortDataWriter,
        instance: *const DDS_UShort,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_unregister_instance_w_timestamp(
        self_: *mut DDS_UShortDataWriter,
        instance: *const DDS_UShort,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_dispose(
        self_: *mut DDS_UShortDataWriter,
        instance: *const DDS_UShort,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_dispose_w_timestamp(
        self_: *mut DDS_UShortDataWriter,
        instance: *const DDS_UShort,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_get_key_value(
        self_: *mut DDS_UShortDataWriter,
        keyHolder: *mut DDS_UShort,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_lookup_instance(
        self_: *mut DDS_UShortDataWriter,
        instance: *const DDS_UShort,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_assert_liveliness(
        self_: *mut DDS_UShortDataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_get_liveliness_lost_status(
        self_: *mut DDS_UShortDataWriter,
        status: *mut DDS_LivelinessLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_get_offered_deadline_missed_status(
        self_: *mut DDS_UShortDataWriter,
        status: *mut DDS_OfferedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_get_publication_matched_status(
        self_: *mut DDS_UShortDataWriter,
        status: *mut DDS_PublicationMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_get_matched_subscription_data(
        self_: *mut DDS_UShortDataWriter,
        subscriptionData: *mut DDS_SubscriptionBuiltinTopicData,
        subscriptionHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_get_matched_subscriptions(
        self_: *mut DDS_UShortDataWriter,
        subscriptionHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_set_qos(
        self_: *mut DDS_UShortDataWriter,
        qoslist: *const DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_get_qos(
        self_: *mut DDS_UShortDataWriter,
        qoslist: *mut DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_set_listener(
        self_: *mut DDS_UShortDataWriter,
        listener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_enable(self_: *mut DDS_UShortDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_flush(self_: *mut DDS_UShortDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_as_entity(self_: *mut DDS_UShortDataWriter) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_get_listener(
        self_: *mut DDS_UShortDataWriter,
    ) -> *mut DDS_DataWriterListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_get_topic(self_: *mut DDS_UShortDataWriter) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_get_publisher(
        self_: *mut DDS_UShortDataWriter,
    ) -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_get_offered_incompatible_qos_status(
        self_: *mut DDS_UShortDataWriter,
        status: *mut DDS_OfferedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_wait_for_acknowledgments(
        self_: *mut DDS_UShortDataWriter,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_set_qos_with_profile(
        dw: *mut DDS_UShortDataWriter,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_get_send_status(
        self_: *mut DDS_UShortDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_print_send_status(
        self_: *mut DDS_UShortDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortDataWriter_get_send_status_w_handle(
        self_: *mut DDS_UShortDataWriter,
        status: *mut DDS_PublicationSendStatus,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_LongDataWriter {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_write(
        self_: *mut DDS_LongDataWriter,
        sample: *const DDS_Long,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_write_w_timestamp(
        self_: *mut DDS_LongDataWriter,
        sample: *const DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_write_w_dst(
        self_: *mut DDS_LongDataWriter,
        sample: *const DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_register_instance(
        self_: *mut DDS_LongDataWriter,
        instance: *mut DDS_Long,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_register_instance_w_timestamp(
        self_: *mut DDS_LongDataWriter,
        instance: *const DDS_Long,
        timestamp: *const DDS_Time_t,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_unregister_instance(
        self_: *mut DDS_LongDataWriter,
        instance: *const DDS_Long,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_unregister_instance_w_timestamp(
        self_: *mut DDS_LongDataWriter,
        instance: *const DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_dispose(
        self_: *mut DDS_LongDataWriter,
        instance: *const DDS_Long,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_dispose_w_timestamp(
        self_: *mut DDS_LongDataWriter,
        instance: *const DDS_Long,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_get_key_value(
        self_: *mut DDS_LongDataWriter,
        keyHolder: *mut DDS_Long,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_lookup_instance(
        self_: *mut DDS_LongDataWriter,
        instance: *const DDS_Long,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_assert_liveliness(self_: *mut DDS_LongDataWriter)
    -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_get_liveliness_lost_status(
        self_: *mut DDS_LongDataWriter,
        status: *mut DDS_LivelinessLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_get_offered_deadline_missed_status(
        self_: *mut DDS_LongDataWriter,
        status: *mut DDS_OfferedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_get_publication_matched_status(
        self_: *mut DDS_LongDataWriter,
        status: *mut DDS_PublicationMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_get_matched_subscription_data(
        self_: *mut DDS_LongDataWriter,
        subscriptionData: *mut DDS_SubscriptionBuiltinTopicData,
        subscriptionHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_get_matched_subscriptions(
        self_: *mut DDS_LongDataWriter,
        subscriptionHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_set_qos(
        self_: *mut DDS_LongDataWriter,
        qoslist: *const DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_get_qos(
        self_: *mut DDS_LongDataWriter,
        qoslist: *mut DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_set_listener(
        self_: *mut DDS_LongDataWriter,
        listener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_enable(self_: *mut DDS_LongDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_flush(self_: *mut DDS_LongDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_as_entity(self_: *mut DDS_LongDataWriter) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_get_listener(
        self_: *mut DDS_LongDataWriter,
    ) -> *mut DDS_DataWriterListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_get_topic(self_: *mut DDS_LongDataWriter) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_get_publisher(self_: *mut DDS_LongDataWriter) -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_get_offered_incompatible_qos_status(
        self_: *mut DDS_LongDataWriter,
        status: *mut DDS_OfferedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_wait_for_acknowledgments(
        self_: *mut DDS_LongDataWriter,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_set_qos_with_profile(
        dw: *mut DDS_LongDataWriter,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_get_send_status(
        self_: *mut DDS_LongDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_print_send_status(
        self_: *mut DDS_LongDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongDataWriter_get_send_status_w_handle(
        self_: *mut DDS_LongDataWriter,
        status: *mut DDS_PublicationSendStatus,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ULongDataWriter {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_write(
        self_: *mut DDS_ULongDataWriter,
        sample: *const DDS_ULong,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_write_w_timestamp(
        self_: *mut DDS_ULongDataWriter,
        sample: *const DDS_ULong,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_write_w_dst(
        self_: *mut DDS_ULongDataWriter,
        sample: *const DDS_ULong,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_register_instance(
        self_: *mut DDS_ULongDataWriter,
        instance: *mut DDS_ULong,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_register_instance_w_timestamp(
        self_: *mut DDS_ULongDataWriter,
        instance: *const DDS_ULong,
        timestamp: *const DDS_Time_t,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_unregister_instance(
        self_: *mut DDS_ULongDataWriter,
        instance: *const DDS_ULong,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_unregister_instance_w_timestamp(
        self_: *mut DDS_ULongDataWriter,
        instance: *const DDS_ULong,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_dispose(
        self_: *mut DDS_ULongDataWriter,
        instance: *const DDS_ULong,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_dispose_w_timestamp(
        self_: *mut DDS_ULongDataWriter,
        instance: *const DDS_ULong,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_get_key_value(
        self_: *mut DDS_ULongDataWriter,
        keyHolder: *mut DDS_ULong,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_lookup_instance(
        self_: *mut DDS_ULongDataWriter,
        instance: *const DDS_ULong,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_assert_liveliness(
        self_: *mut DDS_ULongDataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_get_liveliness_lost_status(
        self_: *mut DDS_ULongDataWriter,
        status: *mut DDS_LivelinessLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_get_offered_deadline_missed_status(
        self_: *mut DDS_ULongDataWriter,
        status: *mut DDS_OfferedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_get_publication_matched_status(
        self_: *mut DDS_ULongDataWriter,
        status: *mut DDS_PublicationMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_get_matched_subscription_data(
        self_: *mut DDS_ULongDataWriter,
        subscriptionData: *mut DDS_SubscriptionBuiltinTopicData,
        subscriptionHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_get_matched_subscriptions(
        self_: *mut DDS_ULongDataWriter,
        subscriptionHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_set_qos(
        self_: *mut DDS_ULongDataWriter,
        qoslist: *const DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_get_qos(
        self_: *mut DDS_ULongDataWriter,
        qoslist: *mut DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_set_listener(
        self_: *mut DDS_ULongDataWriter,
        listener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_enable(self_: *mut DDS_ULongDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_flush(self_: *mut DDS_ULongDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_as_entity(self_: *mut DDS_ULongDataWriter) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_get_listener(
        self_: *mut DDS_ULongDataWriter,
    ) -> *mut DDS_DataWriterListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_get_topic(self_: *mut DDS_ULongDataWriter) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_get_publisher(self_: *mut DDS_ULongDataWriter)
    -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_get_offered_incompatible_qos_status(
        self_: *mut DDS_ULongDataWriter,
        status: *mut DDS_OfferedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_wait_for_acknowledgments(
        self_: *mut DDS_ULongDataWriter,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_set_qos_with_profile(
        dw: *mut DDS_ULongDataWriter,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_get_send_status(
        self_: *mut DDS_ULongDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_print_send_status(
        self_: *mut DDS_ULongDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongDataWriter_get_send_status_w_handle(
        self_: *mut DDS_ULongDataWriter,
        status: *mut DDS_PublicationSendStatus,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_LongLongDataWriter {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_write(
        self_: *mut DDS_LongLongDataWriter,
        sample: *const DDS_LongLong,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_write_w_timestamp(
        self_: *mut DDS_LongLongDataWriter,
        sample: *const DDS_LongLong,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_write_w_dst(
        self_: *mut DDS_LongLongDataWriter,
        sample: *const DDS_LongLong,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_register_instance(
        self_: *mut DDS_LongLongDataWriter,
        instance: *mut DDS_LongLong,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_register_instance_w_timestamp(
        self_: *mut DDS_LongLongDataWriter,
        instance: *const DDS_LongLong,
        timestamp: *const DDS_Time_t,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_unregister_instance(
        self_: *mut DDS_LongLongDataWriter,
        instance: *const DDS_LongLong,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_unregister_instance_w_timestamp(
        self_: *mut DDS_LongLongDataWriter,
        instance: *const DDS_LongLong,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_dispose(
        self_: *mut DDS_LongLongDataWriter,
        instance: *const DDS_LongLong,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_dispose_w_timestamp(
        self_: *mut DDS_LongLongDataWriter,
        instance: *const DDS_LongLong,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_get_key_value(
        self_: *mut DDS_LongLongDataWriter,
        keyHolder: *mut DDS_LongLong,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_lookup_instance(
        self_: *mut DDS_LongLongDataWriter,
        instance: *const DDS_LongLong,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_assert_liveliness(
        self_: *mut DDS_LongLongDataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_get_liveliness_lost_status(
        self_: *mut DDS_LongLongDataWriter,
        status: *mut DDS_LivelinessLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_get_offered_deadline_missed_status(
        self_: *mut DDS_LongLongDataWriter,
        status: *mut DDS_OfferedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_get_publication_matched_status(
        self_: *mut DDS_LongLongDataWriter,
        status: *mut DDS_PublicationMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_get_matched_subscription_data(
        self_: *mut DDS_LongLongDataWriter,
        subscriptionData: *mut DDS_SubscriptionBuiltinTopicData,
        subscriptionHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_get_matched_subscriptions(
        self_: *mut DDS_LongLongDataWriter,
        subscriptionHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_set_qos(
        self_: *mut DDS_LongLongDataWriter,
        qoslist: *const DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_get_qos(
        self_: *mut DDS_LongLongDataWriter,
        qoslist: *mut DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_set_listener(
        self_: *mut DDS_LongLongDataWriter,
        listener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_enable(self_: *mut DDS_LongLongDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_flush(self_: *mut DDS_LongLongDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_as_entity(self_: *mut DDS_LongLongDataWriter) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_get_listener(
        self_: *mut DDS_LongLongDataWriter,
    ) -> *mut DDS_DataWriterListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_get_topic(self_: *mut DDS_LongLongDataWriter) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_get_publisher(
        self_: *mut DDS_LongLongDataWriter,
    ) -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_get_offered_incompatible_qos_status(
        self_: *mut DDS_LongLongDataWriter,
        status: *mut DDS_OfferedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_wait_for_acknowledgments(
        self_: *mut DDS_LongLongDataWriter,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_set_qos_with_profile(
        dw: *mut DDS_LongLongDataWriter,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_get_send_status(
        self_: *mut DDS_LongLongDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_print_send_status(
        self_: *mut DDS_LongLongDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongDataWriter_get_send_status_w_handle(
        self_: *mut DDS_LongLongDataWriter,
        status: *mut DDS_PublicationSendStatus,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ULongLongDataWriter {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_write(
        self_: *mut DDS_ULongLongDataWriter,
        sample: *const DDS_ULongLong,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_write_w_timestamp(
        self_: *mut DDS_ULongLongDataWriter,
        sample: *const DDS_ULongLong,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_write_w_dst(
        self_: *mut DDS_ULongLongDataWriter,
        sample: *const DDS_ULongLong,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_register_instance(
        self_: *mut DDS_ULongLongDataWriter,
        instance: *mut DDS_ULongLong,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_register_instance_w_timestamp(
        self_: *mut DDS_ULongLongDataWriter,
        instance: *const DDS_ULongLong,
        timestamp: *const DDS_Time_t,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_unregister_instance(
        self_: *mut DDS_ULongLongDataWriter,
        instance: *const DDS_ULongLong,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_unregister_instance_w_timestamp(
        self_: *mut DDS_ULongLongDataWriter,
        instance: *const DDS_ULongLong,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_dispose(
        self_: *mut DDS_ULongLongDataWriter,
        instance: *const DDS_ULongLong,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_dispose_w_timestamp(
        self_: *mut DDS_ULongLongDataWriter,
        instance: *const DDS_ULongLong,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_get_key_value(
        self_: *mut DDS_ULongLongDataWriter,
        keyHolder: *mut DDS_ULongLong,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_lookup_instance(
        self_: *mut DDS_ULongLongDataWriter,
        instance: *const DDS_ULongLong,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_assert_liveliness(
        self_: *mut DDS_ULongLongDataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_get_liveliness_lost_status(
        self_: *mut DDS_ULongLongDataWriter,
        status: *mut DDS_LivelinessLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_get_offered_deadline_missed_status(
        self_: *mut DDS_ULongLongDataWriter,
        status: *mut DDS_OfferedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_get_publication_matched_status(
        self_: *mut DDS_ULongLongDataWriter,
        status: *mut DDS_PublicationMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_get_matched_subscription_data(
        self_: *mut DDS_ULongLongDataWriter,
        subscriptionData: *mut DDS_SubscriptionBuiltinTopicData,
        subscriptionHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_get_matched_subscriptions(
        self_: *mut DDS_ULongLongDataWriter,
        subscriptionHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_set_qos(
        self_: *mut DDS_ULongLongDataWriter,
        qoslist: *const DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_get_qos(
        self_: *mut DDS_ULongLongDataWriter,
        qoslist: *mut DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_set_listener(
        self_: *mut DDS_ULongLongDataWriter,
        listener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_enable(self_: *mut DDS_ULongLongDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_flush(self_: *mut DDS_ULongLongDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_as_entity(
        self_: *mut DDS_ULongLongDataWriter,
    ) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_get_listener(
        self_: *mut DDS_ULongLongDataWriter,
    ) -> *mut DDS_DataWriterListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_get_topic(self_: *mut DDS_ULongLongDataWriter)
    -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_get_publisher(
        self_: *mut DDS_ULongLongDataWriter,
    ) -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_get_offered_incompatible_qos_status(
        self_: *mut DDS_ULongLongDataWriter,
        status: *mut DDS_OfferedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_wait_for_acknowledgments(
        self_: *mut DDS_ULongLongDataWriter,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_set_qos_with_profile(
        dw: *mut DDS_ULongLongDataWriter,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_get_send_status(
        self_: *mut DDS_ULongLongDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_print_send_status(
        self_: *mut DDS_ULongLongDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongDataWriter_get_send_status_w_handle(
        self_: *mut DDS_ULongLongDataWriter,
        status: *mut DDS_PublicationSendStatus,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_FloatDataWriter {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_write(
        self_: *mut DDS_FloatDataWriter,
        sample: *const DDS_Float,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_write_w_timestamp(
        self_: *mut DDS_FloatDataWriter,
        sample: *const DDS_Float,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_write_w_dst(
        self_: *mut DDS_FloatDataWriter,
        sample: *const DDS_Float,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_register_instance(
        self_: *mut DDS_FloatDataWriter,
        instance: *mut DDS_Float,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_register_instance_w_timestamp(
        self_: *mut DDS_FloatDataWriter,
        instance: *const DDS_Float,
        timestamp: *const DDS_Time_t,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_unregister_instance(
        self_: *mut DDS_FloatDataWriter,
        instance: *const DDS_Float,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_unregister_instance_w_timestamp(
        self_: *mut DDS_FloatDataWriter,
        instance: *const DDS_Float,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_dispose(
        self_: *mut DDS_FloatDataWriter,
        instance: *const DDS_Float,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_dispose_w_timestamp(
        self_: *mut DDS_FloatDataWriter,
        instance: *const DDS_Float,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_get_key_value(
        self_: *mut DDS_FloatDataWriter,
        keyHolder: *mut DDS_Float,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_lookup_instance(
        self_: *mut DDS_FloatDataWriter,
        instance: *const DDS_Float,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_assert_liveliness(
        self_: *mut DDS_FloatDataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_get_liveliness_lost_status(
        self_: *mut DDS_FloatDataWriter,
        status: *mut DDS_LivelinessLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_get_offered_deadline_missed_status(
        self_: *mut DDS_FloatDataWriter,
        status: *mut DDS_OfferedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_get_publication_matched_status(
        self_: *mut DDS_FloatDataWriter,
        status: *mut DDS_PublicationMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_get_matched_subscription_data(
        self_: *mut DDS_FloatDataWriter,
        subscriptionData: *mut DDS_SubscriptionBuiltinTopicData,
        subscriptionHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_get_matched_subscriptions(
        self_: *mut DDS_FloatDataWriter,
        subscriptionHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_set_qos(
        self_: *mut DDS_FloatDataWriter,
        qoslist: *const DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_get_qos(
        self_: *mut DDS_FloatDataWriter,
        qoslist: *mut DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_set_listener(
        self_: *mut DDS_FloatDataWriter,
        listener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_enable(self_: *mut DDS_FloatDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_flush(self_: *mut DDS_FloatDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_as_entity(self_: *mut DDS_FloatDataWriter) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_get_listener(
        self_: *mut DDS_FloatDataWriter,
    ) -> *mut DDS_DataWriterListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_get_topic(self_: *mut DDS_FloatDataWriter) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_get_publisher(self_: *mut DDS_FloatDataWriter)
    -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_get_offered_incompatible_qos_status(
        self_: *mut DDS_FloatDataWriter,
        status: *mut DDS_OfferedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_wait_for_acknowledgments(
        self_: *mut DDS_FloatDataWriter,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_set_qos_with_profile(
        dw: *mut DDS_FloatDataWriter,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_get_send_status(
        self_: *mut DDS_FloatDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_print_send_status(
        self_: *mut DDS_FloatDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatDataWriter_get_send_status_w_handle(
        self_: *mut DDS_FloatDataWriter,
        status: *mut DDS_PublicationSendStatus,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DoubleDataWriter {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_write(
        self_: *mut DDS_DoubleDataWriter,
        sample: *const DDS_Double,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_write_w_timestamp(
        self_: *mut DDS_DoubleDataWriter,
        sample: *const DDS_Double,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_write_w_dst(
        self_: *mut DDS_DoubleDataWriter,
        sample: *const DDS_Double,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_register_instance(
        self_: *mut DDS_DoubleDataWriter,
        instance: *mut DDS_Double,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_register_instance_w_timestamp(
        self_: *mut DDS_DoubleDataWriter,
        instance: *const DDS_Double,
        timestamp: *const DDS_Time_t,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_unregister_instance(
        self_: *mut DDS_DoubleDataWriter,
        instance: *const DDS_Double,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_unregister_instance_w_timestamp(
        self_: *mut DDS_DoubleDataWriter,
        instance: *const DDS_Double,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_dispose(
        self_: *mut DDS_DoubleDataWriter,
        instance: *const DDS_Double,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_dispose_w_timestamp(
        self_: *mut DDS_DoubleDataWriter,
        instance: *const DDS_Double,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_get_key_value(
        self_: *mut DDS_DoubleDataWriter,
        keyHolder: *mut DDS_Double,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_lookup_instance(
        self_: *mut DDS_DoubleDataWriter,
        instance: *const DDS_Double,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_assert_liveliness(
        self_: *mut DDS_DoubleDataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_get_liveliness_lost_status(
        self_: *mut DDS_DoubleDataWriter,
        status: *mut DDS_LivelinessLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_get_offered_deadline_missed_status(
        self_: *mut DDS_DoubleDataWriter,
        status: *mut DDS_OfferedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_get_publication_matched_status(
        self_: *mut DDS_DoubleDataWriter,
        status: *mut DDS_PublicationMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_get_matched_subscription_data(
        self_: *mut DDS_DoubleDataWriter,
        subscriptionData: *mut DDS_SubscriptionBuiltinTopicData,
        subscriptionHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_get_matched_subscriptions(
        self_: *mut DDS_DoubleDataWriter,
        subscriptionHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_set_qos(
        self_: *mut DDS_DoubleDataWriter,
        qoslist: *const DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_get_qos(
        self_: *mut DDS_DoubleDataWriter,
        qoslist: *mut DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_set_listener(
        self_: *mut DDS_DoubleDataWriter,
        listener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_enable(self_: *mut DDS_DoubleDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_flush(self_: *mut DDS_DoubleDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_as_entity(self_: *mut DDS_DoubleDataWriter) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_get_listener(
        self_: *mut DDS_DoubleDataWriter,
    ) -> *mut DDS_DataWriterListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_get_topic(self_: *mut DDS_DoubleDataWriter) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_get_publisher(
        self_: *mut DDS_DoubleDataWriter,
    ) -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_get_offered_incompatible_qos_status(
        self_: *mut DDS_DoubleDataWriter,
        status: *mut DDS_OfferedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_wait_for_acknowledgments(
        self_: *mut DDS_DoubleDataWriter,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_set_qos_with_profile(
        dw: *mut DDS_DoubleDataWriter,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_get_send_status(
        self_: *mut DDS_DoubleDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_print_send_status(
        self_: *mut DDS_DoubleDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleDataWriter_get_send_status_w_handle(
        self_: *mut DDS_DoubleDataWriter,
        status: *mut DDS_PublicationSendStatus,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_StringDataWriter {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_write(
        self_: *mut DDS_StringDataWriter,
        sample: *const DDS_String,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_write_w_timestamp(
        self_: *mut DDS_StringDataWriter,
        sample: *const DDS_String,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_write_w_dst(
        self_: *mut DDS_StringDataWriter,
        sample: *const DDS_String,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_register_instance(
        self_: *mut DDS_StringDataWriter,
        instance: *mut DDS_String,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_register_instance_w_timestamp(
        self_: *mut DDS_StringDataWriter,
        instance: *const DDS_String,
        timestamp: *const DDS_Time_t,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_unregister_instance(
        self_: *mut DDS_StringDataWriter,
        instance: *const DDS_String,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_unregister_instance_w_timestamp(
        self_: *mut DDS_StringDataWriter,
        instance: *const DDS_String,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_dispose(
        self_: *mut DDS_StringDataWriter,
        instance: *const DDS_String,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_dispose_w_timestamp(
        self_: *mut DDS_StringDataWriter,
        instance: *const DDS_String,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_get_key_value(
        self_: *mut DDS_StringDataWriter,
        keyHolder: *mut DDS_String,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_lookup_instance(
        self_: *mut DDS_StringDataWriter,
        instance: *const DDS_String,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_assert_liveliness(
        self_: *mut DDS_StringDataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_get_liveliness_lost_status(
        self_: *mut DDS_StringDataWriter,
        status: *mut DDS_LivelinessLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_get_offered_deadline_missed_status(
        self_: *mut DDS_StringDataWriter,
        status: *mut DDS_OfferedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_get_publication_matched_status(
        self_: *mut DDS_StringDataWriter,
        status: *mut DDS_PublicationMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_get_matched_subscription_data(
        self_: *mut DDS_StringDataWriter,
        subscriptionData: *mut DDS_SubscriptionBuiltinTopicData,
        subscriptionHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_get_matched_subscriptions(
        self_: *mut DDS_StringDataWriter,
        subscriptionHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_set_qos(
        self_: *mut DDS_StringDataWriter,
        qoslist: *const DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_get_qos(
        self_: *mut DDS_StringDataWriter,
        qoslist: *mut DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_set_listener(
        self_: *mut DDS_StringDataWriter,
        listener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_enable(self_: *mut DDS_StringDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_flush(self_: *mut DDS_StringDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_as_entity(self_: *mut DDS_StringDataWriter) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_get_listener(
        self_: *mut DDS_StringDataWriter,
    ) -> *mut DDS_DataWriterListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_get_topic(self_: *mut DDS_StringDataWriter) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_get_publisher(
        self_: *mut DDS_StringDataWriter,
    ) -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_get_offered_incompatible_qos_status(
        self_: *mut DDS_StringDataWriter,
        status: *mut DDS_OfferedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_wait_for_acknowledgments(
        self_: *mut DDS_StringDataWriter,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_set_qos_with_profile(
        dw: *mut DDS_StringDataWriter,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_get_send_status(
        self_: *mut DDS_StringDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_print_send_status(
        self_: *mut DDS_StringDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringDataWriter_get_send_status_w_handle(
        self_: *mut DDS_StringDataWriter,
        status: *mut DDS_PublicationSendStatus,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_KeyedStringDataWriter {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_write(
        self_: *mut DDS_KeyedStringDataWriter,
        sample: *const DDS_KeyedString,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_write_w_timestamp(
        self_: *mut DDS_KeyedStringDataWriter,
        sample: *const DDS_KeyedString,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_write_w_dst(
        self_: *mut DDS_KeyedStringDataWriter,
        sample: *const DDS_KeyedString,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_register_instance(
        self_: *mut DDS_KeyedStringDataWriter,
        instance: *mut DDS_KeyedString,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_register_instance_w_timestamp(
        self_: *mut DDS_KeyedStringDataWriter,
        instance: *const DDS_KeyedString,
        timestamp: *const DDS_Time_t,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_unregister_instance(
        self_: *mut DDS_KeyedStringDataWriter,
        instance: *const DDS_KeyedString,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_unregister_instance_w_timestamp(
        self_: *mut DDS_KeyedStringDataWriter,
        instance: *const DDS_KeyedString,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_dispose(
        self_: *mut DDS_KeyedStringDataWriter,
        instance: *const DDS_KeyedString,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_dispose_w_timestamp(
        self_: *mut DDS_KeyedStringDataWriter,
        instance: *const DDS_KeyedString,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_get_key_value(
        self_: *mut DDS_KeyedStringDataWriter,
        keyHolder: *mut DDS_KeyedString,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_lookup_instance(
        self_: *mut DDS_KeyedStringDataWriter,
        instance: *const DDS_KeyedString,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_assert_liveliness(
        self_: *mut DDS_KeyedStringDataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_get_liveliness_lost_status(
        self_: *mut DDS_KeyedStringDataWriter,
        status: *mut DDS_LivelinessLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_get_offered_deadline_missed_status(
        self_: *mut DDS_KeyedStringDataWriter,
        status: *mut DDS_OfferedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_get_publication_matched_status(
        self_: *mut DDS_KeyedStringDataWriter,
        status: *mut DDS_PublicationMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_get_matched_subscription_data(
        self_: *mut DDS_KeyedStringDataWriter,
        subscriptionData: *mut DDS_SubscriptionBuiltinTopicData,
        subscriptionHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_get_matched_subscriptions(
        self_: *mut DDS_KeyedStringDataWriter,
        subscriptionHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_set_qos(
        self_: *mut DDS_KeyedStringDataWriter,
        qoslist: *const DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_get_qos(
        self_: *mut DDS_KeyedStringDataWriter,
        qoslist: *mut DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_set_listener(
        self_: *mut DDS_KeyedStringDataWriter,
        listener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_enable(
        self_: *mut DDS_KeyedStringDataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_flush(
        self_: *mut DDS_KeyedStringDataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_as_entity(
        self_: *mut DDS_KeyedStringDataWriter,
    ) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_get_listener(
        self_: *mut DDS_KeyedStringDataWriter,
    ) -> *mut DDS_DataWriterListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_get_topic(
        self_: *mut DDS_KeyedStringDataWriter,
    ) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_get_publisher(
        self_: *mut DDS_KeyedStringDataWriter,
    ) -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_get_offered_incompatible_qos_status(
        self_: *mut DDS_KeyedStringDataWriter,
        status: *mut DDS_OfferedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_wait_for_acknowledgments(
        self_: *mut DDS_KeyedStringDataWriter,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_set_qos_with_profile(
        dw: *mut DDS_KeyedStringDataWriter,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_get_send_status(
        self_: *mut DDS_KeyedStringDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_print_send_status(
        self_: *mut DDS_KeyedStringDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringDataWriter_get_send_status_w_handle(
        self_: *mut DDS_KeyedStringDataWriter,
        status: *mut DDS_PublicationSendStatus,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_BytesDataWriter {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_write(
        self_: *mut DDS_BytesDataWriter,
        sample: *const DDS_Bytes,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_write_w_timestamp(
        self_: *mut DDS_BytesDataWriter,
        sample: *const DDS_Bytes,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_write_w_dst(
        self_: *mut DDS_BytesDataWriter,
        sample: *const DDS_Bytes,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_register_instance(
        self_: *mut DDS_BytesDataWriter,
        instance: *mut DDS_Bytes,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_register_instance_w_timestamp(
        self_: *mut DDS_BytesDataWriter,
        instance: *const DDS_Bytes,
        timestamp: *const DDS_Time_t,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_unregister_instance(
        self_: *mut DDS_BytesDataWriter,
        instance: *const DDS_Bytes,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_unregister_instance_w_timestamp(
        self_: *mut DDS_BytesDataWriter,
        instance: *const DDS_Bytes,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_dispose(
        self_: *mut DDS_BytesDataWriter,
        instance: *const DDS_Bytes,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_dispose_w_timestamp(
        self_: *mut DDS_BytesDataWriter,
        instance: *const DDS_Bytes,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_get_key_value(
        self_: *mut DDS_BytesDataWriter,
        keyHolder: *mut DDS_Bytes,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_lookup_instance(
        self_: *mut DDS_BytesDataWriter,
        instance: *const DDS_Bytes,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_assert_liveliness(
        self_: *mut DDS_BytesDataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_get_liveliness_lost_status(
        self_: *mut DDS_BytesDataWriter,
        status: *mut DDS_LivelinessLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_get_offered_deadline_missed_status(
        self_: *mut DDS_BytesDataWriter,
        status: *mut DDS_OfferedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_get_publication_matched_status(
        self_: *mut DDS_BytesDataWriter,
        status: *mut DDS_PublicationMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_get_matched_subscription_data(
        self_: *mut DDS_BytesDataWriter,
        subscriptionData: *mut DDS_SubscriptionBuiltinTopicData,
        subscriptionHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_get_matched_subscriptions(
        self_: *mut DDS_BytesDataWriter,
        subscriptionHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_set_qos(
        self_: *mut DDS_BytesDataWriter,
        qoslist: *const DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_get_qos(
        self_: *mut DDS_BytesDataWriter,
        qoslist: *mut DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_set_listener(
        self_: *mut DDS_BytesDataWriter,
        listener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_enable(self_: *mut DDS_BytesDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_flush(self_: *mut DDS_BytesDataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_as_entity(self_: *mut DDS_BytesDataWriter) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_get_listener(
        self_: *mut DDS_BytesDataWriter,
    ) -> *mut DDS_DataWriterListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_get_topic(self_: *mut DDS_BytesDataWriter) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_get_publisher(self_: *mut DDS_BytesDataWriter)
    -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_get_offered_incompatible_qos_status(
        self_: *mut DDS_BytesDataWriter,
        status: *mut DDS_OfferedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_wait_for_acknowledgments(
        self_: *mut DDS_BytesDataWriter,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_set_qos_with_profile(
        dw: *mut DDS_BytesDataWriter,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_get_send_status(
        self_: *mut DDS_BytesDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_print_send_status(
        self_: *mut DDS_BytesDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesDataWriter_get_send_status_w_handle(
        self_: *mut DDS_BytesDataWriter,
        status: *mut DDS_PublicationSendStatus,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_KeyedBytesDataWriter {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_write(
        self_: *mut DDS_KeyedBytesDataWriter,
        sample: *const DDS_KeyedBytes,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_write_w_timestamp(
        self_: *mut DDS_KeyedBytesDataWriter,
        sample: *const DDS_KeyedBytes,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_write_w_dst(
        self_: *mut DDS_KeyedBytesDataWriter,
        sample: *const DDS_KeyedBytes,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_register_instance(
        self_: *mut DDS_KeyedBytesDataWriter,
        instance: *mut DDS_KeyedBytes,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_register_instance_w_timestamp(
        self_: *mut DDS_KeyedBytesDataWriter,
        instance: *const DDS_KeyedBytes,
        timestamp: *const DDS_Time_t,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_unregister_instance(
        self_: *mut DDS_KeyedBytesDataWriter,
        instance: *const DDS_KeyedBytes,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_unregister_instance_w_timestamp(
        self_: *mut DDS_KeyedBytesDataWriter,
        instance: *const DDS_KeyedBytes,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_dispose(
        self_: *mut DDS_KeyedBytesDataWriter,
        instance: *const DDS_KeyedBytes,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_dispose_w_timestamp(
        self_: *mut DDS_KeyedBytesDataWriter,
        instance: *const DDS_KeyedBytes,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_get_key_value(
        self_: *mut DDS_KeyedBytesDataWriter,
        keyHolder: *mut DDS_KeyedBytes,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_lookup_instance(
        self_: *mut DDS_KeyedBytesDataWriter,
        instance: *const DDS_KeyedBytes,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_assert_liveliness(
        self_: *mut DDS_KeyedBytesDataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_get_liveliness_lost_status(
        self_: *mut DDS_KeyedBytesDataWriter,
        status: *mut DDS_LivelinessLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_get_offered_deadline_missed_status(
        self_: *mut DDS_KeyedBytesDataWriter,
        status: *mut DDS_OfferedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_get_publication_matched_status(
        self_: *mut DDS_KeyedBytesDataWriter,
        status: *mut DDS_PublicationMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_get_matched_subscription_data(
        self_: *mut DDS_KeyedBytesDataWriter,
        subscriptionData: *mut DDS_SubscriptionBuiltinTopicData,
        subscriptionHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_get_matched_subscriptions(
        self_: *mut DDS_KeyedBytesDataWriter,
        subscriptionHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_set_qos(
        self_: *mut DDS_KeyedBytesDataWriter,
        qoslist: *const DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_get_qos(
        self_: *mut DDS_KeyedBytesDataWriter,
        qoslist: *mut DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_set_listener(
        self_: *mut DDS_KeyedBytesDataWriter,
        listener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_enable(
        self_: *mut DDS_KeyedBytesDataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_flush(self_: *mut DDS_KeyedBytesDataWriter)
    -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_as_entity(
        self_: *mut DDS_KeyedBytesDataWriter,
    ) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_get_listener(
        self_: *mut DDS_KeyedBytesDataWriter,
    ) -> *mut DDS_DataWriterListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_get_topic(
        self_: *mut DDS_KeyedBytesDataWriter,
    ) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_get_publisher(
        self_: *mut DDS_KeyedBytesDataWriter,
    ) -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_get_offered_incompatible_qos_status(
        self_: *mut DDS_KeyedBytesDataWriter,
        status: *mut DDS_OfferedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_wait_for_acknowledgments(
        self_: *mut DDS_KeyedBytesDataWriter,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_set_qos_with_profile(
        dw: *mut DDS_KeyedBytesDataWriter,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_get_send_status(
        self_: *mut DDS_KeyedBytesDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_print_send_status(
        self_: *mut DDS_KeyedBytesDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesDataWriter_get_send_status_w_handle(
        self_: *mut DDS_KeyedBytesDataWriter,
        status: *mut DDS_PublicationSendStatus,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_ZeroCopyBytesDataWriter {
    _unused: [u8; 0],
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_write(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        sample: *const DDS_ZeroCopyBytes,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_write_w_timestamp(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        sample: *const DDS_ZeroCopyBytes,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_write_w_dst(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        sample: *const DDS_ZeroCopyBytes,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_register_instance(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        instance: *mut DDS_ZeroCopyBytes,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_register_instance_w_timestamp(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        instance: *const DDS_ZeroCopyBytes,
        timestamp: *const DDS_Time_t,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_unregister_instance(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        instance: *const DDS_ZeroCopyBytes,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_unregister_instance_w_timestamp(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        instance: *const DDS_ZeroCopyBytes,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_dispose(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        instance: *const DDS_ZeroCopyBytes,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_dispose_w_timestamp(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        instance: *const DDS_ZeroCopyBytes,
        handle: *const DDS_InstanceHandle_t,
        timestamp: *const DDS_Time_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_get_key_value(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        keyHolder: *mut DDS_ZeroCopyBytes,
        handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_lookup_instance(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        instance: *const DDS_ZeroCopyBytes,
    ) -> DDS_InstanceHandle_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_assert_liveliness(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_get_liveliness_lost_status(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        status: *mut DDS_LivelinessLostStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_get_offered_deadline_missed_status(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        status: *mut DDS_OfferedDeadlineMissedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_get_publication_matched_status(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        status: *mut DDS_PublicationMatchedStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_get_matched_subscription_data(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        subscriptionData: *mut DDS_SubscriptionBuiltinTopicData,
        subscriptionHandle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_get_matched_subscriptions(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        subscriptionHandles: *mut DDS_InstanceHandleSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_set_qos(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        qoslist: *const DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_get_qos(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        qoslist: *mut DDS_DataWriterQos,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_set_listener(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        listener: *mut DDS_DataWriterListener,
        mask: DDS_StatusKindMask,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_enable(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_flush(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_as_entity(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
    ) -> *mut DDS_Entity;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_get_listener(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
    ) -> *mut DDS_DataWriterListener;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_get_topic(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
    ) -> *mut DDS_Topic;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_get_publisher(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
    ) -> *mut DDS_Publisher;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_get_offered_incompatible_qos_status(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        status: *mut DDS_OfferedIncompatibleQosStatus,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_wait_for_acknowledgments(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        maxWait: *const DDS_Duration_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_set_qos_with_profile(
        dw: *mut DDS_ZeroCopyBytesDataWriter,
        library_name: *const DDS_Char,
        profile_name: *const DDS_Char,
        qos_name: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_get_send_status(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_print_send_status(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        status: *mut DDS_PublicationSendStatusSeq,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDataWriter_get_send_status_w_handle(
        self_: *mut DDS_ZeroCopyBytesDataWriter,
        status: *mut DDS_PublicationSendStatus,
        dst_handle: *const DDS_InstanceHandle_t,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanTypeSupport_register_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanTypeSupport_unregister_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BooleanTypeSupport_get_type_name() -> *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_BooleanTypeSupport_instance: DDS_TypeSupport;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetTypeSupport_register_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetTypeSupport_unregister_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_OctetTypeSupport_get_type_name() -> *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_OctetTypeSupport_instance: DDS_TypeSupport;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharTypeSupport_register_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharTypeSupport_unregister_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CharTypeSupport_get_type_name() -> *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_CharTypeSupport_instance: DDS_TypeSupport;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortTypeSupport_register_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortTypeSupport_unregister_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ShortTypeSupport_get_type_name() -> *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_ShortTypeSupport_instance: DDS_TypeSupport;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortTypeSupport_register_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortTypeSupport_unregister_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UShortTypeSupport_get_type_name() -> *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_UShortTypeSupport_instance: DDS_TypeSupport;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongTypeSupport_register_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongTypeSupport_unregister_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongTypeSupport_get_type_name() -> *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_LongTypeSupport_instance: DDS_TypeSupport;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongTypeSupport_register_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongTypeSupport_unregister_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongTypeSupport_get_type_name() -> *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_ULongTypeSupport_instance: DDS_TypeSupport;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongTypeSupport_register_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongTypeSupport_unregister_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_LongLongTypeSupport_get_type_name() -> *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_LongLongTypeSupport_instance: DDS_TypeSupport;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongTypeSupport_register_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongTypeSupport_unregister_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ULongLongTypeSupport_get_type_name() -> *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_ULongLongTypeSupport_instance: DDS_TypeSupport;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatTypeSupport_register_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatTypeSupport_unregister_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_FloatTypeSupport_get_type_name() -> *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_FloatTypeSupport_instance: DDS_TypeSupport;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleTypeSupport_register_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleTypeSupport_unregister_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DoubleTypeSupport_get_type_name() -> *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_DoubleTypeSupport_instance: DDS_TypeSupport;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringTypeSupport_register_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringTypeSupport_unregister_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_StringTypeSupport_get_type_name() -> *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_StringTypeSupport_instance: DDS_TypeSupport;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringTypeSupport_register_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringTypeSupport_unregister_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedStringTypeSupport_get_type_name() -> *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_KeyedStringTypeSupport_instance: DDS_TypeSupport;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesTypeSupport_register_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesTypeSupport_unregister_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesTypeSupport_get_type_name() -> *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_BytesTypeSupport_instance: DDS_TypeSupport;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesTypeSupport_register_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesTypeSupport_unregister_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_KeyedBytesTypeSupport_get_type_name() -> *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_KeyedBytesTypeSupport_instance: DDS_TypeSupport;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesTypeSupport_register_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesTypeSupport_unregister_type(
        participant: *mut DDS_DomainParticipant,
        typeName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesTypeSupport_get_type_name() -> *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_ZeroCopyBytesTypeSupport_instance: DDS_TypeSupport;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRSleep(ms: DDS_ULong);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRUSleep(us: DDS_ULong);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRSyncSleep(us: DDS_ULong);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRForSleep(count: DDS_ULong);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Init(
        qosFilePath: *const DDS_Char,
        qosName: *const DDS_Char,
    ) -> *mut DDS_DomainParticipantFactory;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_CreateDP(
        domainId: DDS_DomainId_t,
        qos_name: *const DDS_Char,
    ) -> *mut DDS_DomainParticipant;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PubTopic(
        self_: *mut DDS_DomainParticipant,
        topicName: *const DDS_Char,
        typeSupport: *mut DDS_TypeSupport,
        qos_name: *const DDS_Char,
        dwListener: *mut DDS_DataWriterListener,
    ) -> *mut DDS_DataWriter;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UnPubTopic(writer: *mut DDS_DataWriter) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UnPubTopicWTopicName(
        domainId: DDS_DomainId_t,
        topicName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubTopic(
        self_: *mut DDS_DomainParticipant,
        topicName: *const DDS_Char,
        typeSupport: *mut DDS_TypeSupport,
        qos_name: *const DDS_Char,
        drListener: *mut DDS_DataReaderListener,
    ) -> *mut DDS_DataReader;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UnSubTopic(reader: *mut DDS_DataReader) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_UnSubTopicWTopicName(
        domainId: DDS_DomainId_t,
        topicName: *const DDS_Char,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_Finalize() -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesCreate(maximum: DDS_ULong) -> *mut DDS_ZeroCopyBytes;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesDestroy(sample: *mut DDS_ZeroCopyBytes);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_ZeroCopyBytesWrite(
        domainId: DDS_DomainId_t,
        topicName: *mut DDS_Char,
        sample: *mut DDS_ZeroCopyBytes,
    ) -> DDS_ReturnCode_t;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesWrapper(
        self_: *mut DDS_Bytes,
        buffer: *const DDS_Char,
        length: DDS_Long,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_BytesWrite(
        domainId: DDS_DomainId_t,
        topicName: *mut DDS_Char,
        content: *const DDS_Char,
        length: DDS_Long,
    ) -> DDS_ReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDS_DataRepresentationQosPolicy {
    pub value: DDS_ShortSeq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDS_DataRepresentationQosPolicy"]
        [::std::mem::size_of::<DDS_DataRepresentationQosPolicy>() - 72usize];
    ["Alignment of DDS_DataRepresentationQosPolicy"]
        [::std::mem::align_of::<DDS_DataRepresentationQosPolicy>() - 8usize];
    ["Offset of field: DDS_DataRepresentationQosPolicy::value"]
        [::std::mem::offset_of!(DDS_DataRepresentationQosPolicy, value) - 0usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_DOMAINPARTICIPANT_FACTORY_QOS_DEFAULT: DDS_DomainParticipantFactoryQos;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_DOMAINPARTICIPANT_QOS_DEFAULT: DDS_DomainParticipantQos;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_PUBLISHER_QOS_DEFAULT: DDS_PublisherQos;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_SUBSCRIBER_QOS_DEFAULT: DDS_SubscriberQos;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_DATAWRITER_QOS_DEFAULT: DDS_DataWriterQos;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_DATAREADER_QOS_DEFAULT: DDS_DataReaderQos;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_TOPIC_QOS_DEFAULT: DDS_TopicQos;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_DATAWRITER_QOS_USE_TOPIC_QOS: DDS_DataWriterQos;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub static mut DDS_DATAREADER_QOS_USE_TOPIC_QOS: DDS_DataReaderQos;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DefaultDomainParticipantFactoryQosInitial(
        self_: *mut DDS_DomainParticipantFactoryQos,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DefaultDomainParticipantQosInitial(self_: *mut DDS_DomainParticipantQos)
    -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DefaultPublisherQosInitial(self_: *mut DDS_PublisherQos);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DefaultSubscriberQosInitial(self_: *mut DDS_SubscriberQos);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DefaultDataWriterQosInitial(self_: *mut DDS_DataWriterQos);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DefaultDataReaderQosInitial(self_: *mut DDS_DataReaderQos);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DefaultTopicQosInitial(self_: *mut DDS_TopicQos);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantFactoryQosDestroy(self_: *mut DDS_DomainParticipantFactoryQos);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DomainParticipantQosDestroy(self_: *mut DDS_DomainParticipantQos);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_PublisherQosDestroy(self_: *mut DDS_PublisherQos);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_SubscriberQosDestroy(self_: *mut DDS_SubscriberQos);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataWriterQosDestroy(self_: *mut DDS_DataWriterQos);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_DataReaderQosDestroy(self_: *mut DDS_DataReaderQos);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DDS_TopicQosDestroy(self_: *mut DDS_TopicQos);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DomainParticipantFactoryQosAssign(
        self_: *mut DDS_DomainParticipantFactoryQos,
        right: *const DDS_DomainParticipantFactoryQos,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DomainParticipantQosAssign(
        self_: *mut DDS_DomainParticipantQos,
        right: *const DDS_DomainParticipantQos,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn PublisherQosAssign(
        self_: *mut DDS_PublisherQos,
        right: *const DDS_PublisherQos,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn SubscriberQosAssign(
        self_: *mut DDS_SubscriberQos,
        right: *const DDS_SubscriberQos,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn TopicQosAssign(self_: *mut DDS_TopicQos, right: *const DDS_TopicQos) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataWriterQosAssign(
        self_: *mut DDS_DataWriterQos,
        right: *const DDS_DataWriterQos,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn DataReaderQosAssign(
        self_: *mut DDS_DataReaderQos,
        right: *const DDS_DataReaderQos,
    ) -> ZR_BOOLEAN;
}
pub const DDS_StatusKind_DDS_INCONSISTENT_TOPIC_STATUS: DDS_StatusKind = 1;
pub const DDS_StatusKind_DDS_OFFERED_DEADLINE_MISSED_STATUS: DDS_StatusKind = 2;
pub const DDS_StatusKind_DDS_REQUESTED_DEADLINE_MISSED_STATUS: DDS_StatusKind = 4;
pub const DDS_StatusKind_DDS_OFFERED_INCOMPATIBLE_QOS_STATUS: DDS_StatusKind = 32;
pub const DDS_StatusKind_DDS_REQUESTED_INCOMPATIBLE_QOS_STATUS: DDS_StatusKind = 64;
pub const DDS_StatusKind_DDS_SAMPLE_LOST_STATUS: DDS_StatusKind = 128;
pub const DDS_StatusKind_DDS_SAMPLE_REJECTED_STATUS: DDS_StatusKind = 256;
pub const DDS_StatusKind_DDS_DATA_ON_READERS_STATUS: DDS_StatusKind = 512;
pub const DDS_StatusKind_DDS_DATA_AVAILABLE_STATUS: DDS_StatusKind = 1024;
pub const DDS_StatusKind_DDS_LIVELINESS_LOST_STATUS: DDS_StatusKind = 2048;
pub const DDS_StatusKind_DDS_LIVELINESS_CHANGED_STATUS: DDS_StatusKind = 4096;
pub const DDS_StatusKind_DDS_PUBLICATION_MATCHED_STATUS: DDS_StatusKind = 8192;
pub const DDS_StatusKind_DDS_SUBSCRIPTION_MATCHED_STATUS: DDS_StatusKind = 16384;
pub type DDS_StatusKind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZRDDSInteractiveCmdReqID {
    pub hostId: DDS_Long,
    pub appId: DDS_Long,
    pub seq: DDS_Long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZRDDSInteractiveCmdReqID"]
        [::std::mem::size_of::<ZRDDSInteractiveCmdReqID>() - 12usize];
    ["Alignment of ZRDDSInteractiveCmdReqID"]
        [::std::mem::align_of::<ZRDDSInteractiveCmdReqID>() - 4usize];
    ["Offset of field: ZRDDSInteractiveCmdReqID::hostId"]
        [::std::mem::offset_of!(ZRDDSInteractiveCmdReqID, hostId) - 0usize];
    ["Offset of field: ZRDDSInteractiveCmdReqID::appId"]
        [::std::mem::offset_of!(ZRDDSInteractiveCmdReqID, appId) - 4usize];
    ["Offset of field: ZRDDSInteractiveCmdReqID::seq"]
        [::std::mem::offset_of!(ZRDDSInteractiveCmdReqID, seq) - 8usize];
};
pub const ZRDDSInteractiveCmdKind_ZRDDS_SET_LOG_ENABLE_RANGE: ZRDDSInteractiveCmdKind = 0;
pub const ZRDDSInteractiveCmdKind_ZRDDS_SET_LOG_DISABLE_RANGE: ZRDDSInteractiveCmdKind = 1;
pub const ZRDDSInteractiveCmdKind_ZRDDS_SET_LOG_ENABLE_TOPIC: ZRDDSInteractiveCmdKind = 2;
pub const ZRDDSInteractiveCmdKind_ZRDDS_SET_LOG_DISABLE_TOPIC: ZRDDSInteractiveCmdKind = 3;
pub const ZRDDSInteractiveCmdKind_ZRDDS_SET_LOG_ENABLE_ENTITYID: ZRDDSInteractiveCmdKind = 4;
pub const ZRDDSInteractiveCmdKind_ZRDDS_SET_LOG_DISABLE_ENTITYID: ZRDDSInteractiveCmdKind = 5;
pub const ZRDDSInteractiveCmdKind_ZRDDS_SET_LOG_MASK: ZRDDSInteractiveCmdKind = 6;
pub const ZRDDSInteractiveCmdKind_ZRDDS_GET_VARIABLE_VALUE: ZRDDSInteractiveCmdKind = 7;
pub const ZRDDSInteractiveCmdKind_ZRDDS_SET_LOG_STYLE: ZRDDSInteractiveCmdKind = 8;
pub type ZRDDSInteractiveCmdKind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZRDDSInteractiveCMD {
    pub cmdId: ZRDDSInteractiveCmdReqID,
    pub cmdKind: ZRDDSInteractiveCmdKind,
    pub cmdParameter: [::std::os::raw::c_char; 1024usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZRDDSInteractiveCMD"][::std::mem::size_of::<ZRDDSInteractiveCMD>() - 1040usize];
    ["Alignment of ZRDDSInteractiveCMD"][::std::mem::align_of::<ZRDDSInteractiveCMD>() - 4usize];
    ["Offset of field: ZRDDSInteractiveCMD::cmdId"]
        [::std::mem::offset_of!(ZRDDSInteractiveCMD, cmdId) - 0usize];
    ["Offset of field: ZRDDSInteractiveCMD::cmdKind"]
        [::std::mem::offset_of!(ZRDDSInteractiveCMD, cmdKind) - 12usize];
    ["Offset of field: ZRDDSInteractiveCMD::cmdParameter"]
        [::std::mem::offset_of!(ZRDDSInteractiveCMD, cmdParameter) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZRDDSInteractiveResponse {
    pub cmdId: ZRDDSInteractiveCmdReqID,
    pub ret: ZR_UINT32,
    pub response: [DDS_Char; 1074usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZRDDSInteractiveResponse"]
        [::std::mem::size_of::<ZRDDSInteractiveResponse>() - 1092usize];
    ["Alignment of ZRDDSInteractiveResponse"]
        [::std::mem::align_of::<ZRDDSInteractiveResponse>() - 4usize];
    ["Offset of field: ZRDDSInteractiveResponse::cmdId"]
        [::std::mem::offset_of!(ZRDDSInteractiveResponse, cmdId) - 0usize];
    ["Offset of field: ZRDDSInteractiveResponse::ret"]
        [::std::mem::offset_of!(ZRDDSInteractiveResponse, ret) - 12usize];
    ["Offset of field: ZRDDSInteractiveResponse::response"]
        [::std::mem::offset_of!(ZRDDSInteractiveResponse, response) - 16usize];
};
pub type ZRPSCALLBACKFUN = ::std::option::Option<
    unsafe extern "C" fn(
        topicName: *const DDS_Char,
        topicNo: DDS_Long,
        buffer: *mut ::std::os::raw::c_void,
        len: DDS_Long,
    ),
>;
pub type ZRPSBUILTINCALLBACKFUN = ::std::option::Option<
    unsafe extern "C" fn(
        topicName: *const DDS_Char,
        entityState: DDS_Long,
        entityKind: DDS_Long,
        entityId: *const DDS_Char,
    ),
>;
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRPSInterface_GetEntityId(
        topicName: *const DDS_Char,
        entityKind: DDS_Long,
    ) -> *const DDS_Char;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRPSInterface_Init(domain_id: DDS_ULong);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRPSInterface_SetBuiltinCallBack(callback: ZRPSBUILTINCALLBACKFUN);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRPSInterface_Publish(topicName: *const DDS_Char) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRPSInterface_Publish_WConfig(
        topicName: *const DDS_Char,
        strongReliable: DDS_Boolean,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRPSInterface_UnPublish(topicNo: DDS_Long) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRPSInterface_SendData(
        buffer: *mut ::std::os::raw::c_void,
        len: DDS_Long,
        topicNo: DDS_Long,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRPSInterface_Subscribe(
        topicName: *const DDS_Char,
        callBackFun: ZRPSCALLBACKFUN,
        reliable: DDS_Boolean,
    ) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRPSInterface_UnSubscribe(topicNo: DDS_Long) -> DDS_Long;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRPSInterface_Destory();
}
pub const ZRLogDisplayStyle_GRACEFUL_STYLE: ZRLogDisplayStyle = 0;
pub const ZRLogDisplayStyle_PRACTICAL_STYLE: ZRLogDisplayStyle = 2;
pub const ZRLogDisplayStyle_META_STYLE: ZRLogDisplayStyle = 4;
pub const ZRLogDisplayStyle_DEBUG_STYLE: ZRLogDisplayStyle = 6;
pub const ZRLogDisplayStyle_UNKNOWN_STYLE: ZRLogDisplayStyle = 7;
pub type ZRLogDisplayStyle = ::std::os::raw::c_int;
pub const ZRLogBackupMode_ZRLOG_BACKUP_NOTUSED: ZRLogBackupMode = 0;
pub const ZRLogBackupMode_ZRLOG_BACKUP_EXIST_FILE: ZRLogBackupMode = 1;
pub const ZRLogBackupMode_ZRLOG_BACKUP_FILE_SIZE: ZRLogBackupMode = 2;
pub const ZRLogBackupMode_ZRLOG_BACKUP_TIME_INTERVAL: ZRLogBackupMode = 3;
pub type ZRLogBackupMode = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZRLogBackupParam {
    pub mode: ZRLogBackupMode,
    pub param: ZR_INT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZRLogBackupParam"][::std::mem::size_of::<ZRLogBackupParam>() - 8usize];
    ["Alignment of ZRLogBackupParam"][::std::mem::align_of::<ZRLogBackupParam>() - 4usize];
    ["Offset of field: ZRLogBackupParam::mode"]
        [::std::mem::offset_of!(ZRLogBackupParam, mode) - 0usize];
    ["Offset of field: ZRLogBackupParam::param"]
        [::std::mem::offset_of!(ZRLogBackupParam, param) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZRLogParam {
    pub consoleMask: ZR_UINT32,
    pub fileMask: ZR_UINT32,
    pub distMask: ZR_UINT32,
    pub style: ZRLogDisplayStyle,
    pub logFileDir: *mut ZR_INT8,
    pub logFileName: *mut ZR_INT8,
    pub backupParam: ZRLogBackupParam,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZRLogParam"][::std::mem::size_of::<ZRLogParam>() - 40usize];
    ["Alignment of ZRLogParam"][::std::mem::align_of::<ZRLogParam>() - 8usize];
    ["Offset of field: ZRLogParam::consoleMask"]
        [::std::mem::offset_of!(ZRLogParam, consoleMask) - 0usize];
    ["Offset of field: ZRLogParam::fileMask"]
        [::std::mem::offset_of!(ZRLogParam, fileMask) - 4usize];
    ["Offset of field: ZRLogParam::distMask"]
        [::std::mem::offset_of!(ZRLogParam, distMask) - 8usize];
    ["Offset of field: ZRLogParam::style"][::std::mem::offset_of!(ZRLogParam, style) - 12usize];
    ["Offset of field: ZRLogParam::logFileDir"]
        [::std::mem::offset_of!(ZRLogParam, logFileDir) - 16usize];
    ["Offset of field: ZRLogParam::logFileName"]
        [::std::mem::offset_of!(ZRLogParam, logFileName) - 24usize];
    ["Offset of field: ZRLogParam::backupParam"]
        [::std::mem::offset_of!(ZRLogParam, backupParam) - 32usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRLogParamInitial(param: *mut ZRLogParam);
}
pub const DDS_LogType_ZRLOG_ERROR: DDS_LogType = 2;
pub const DDS_LogType_ZRLOG_ADMIN_INFO: DDS_LogType = 4;
pub const DDS_LogType_ZRLOG_USER_INFO: DDS_LogType = 8;
pub const DDS_LogType_ZRLOG_WARNING: DDS_LogType = 16;
pub const DDS_LogType_LOGTYPE_UNKNOWN: DDS_LogType = 512;
pub type DDS_LogType = ::std::os::raw::c_int;
pub type ZRLogCallbackInitialize = ::std::option::Option<
    unsafe extern "C" fn(logCallbackParam: *mut ::std::os::raw::c_void) -> ZR_INT32,
>;
pub type ZRLogCallbackOutput = ::std::option::Option<
    unsafe extern "C" fn(
        type_: DDS_LogType,
        topicName: *const ZR_INT8,
        debugNo: ::std::os::raw::c_uint,
        time: *const ZR_INT8,
        file: *const ZR_INT8,
        func: *const ZR_INT8,
        line: ZR_UINT32,
        content: *const ZR_INT8,
        logCallbackParam: *mut ::std::os::raw::c_void,
    ) -> ZR_INT32,
>;
pub type ZRLogCallbackFinalize = ::std::option::Option<
    unsafe extern "C" fn(logCallbackParam: *mut ::std::os::raw::c_void) -> ZR_INT32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZRLogCallback {
    pub initialize_callback: ZRLogCallbackInitialize,
    pub log_output_callback: ZRLogCallbackOutput,
    pub finalize_callback: ZRLogCallbackFinalize,
    pub log_callback_param: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZRLogCallback"][::std::mem::size_of::<ZRLogCallback>() - 32usize];
    ["Alignment of ZRLogCallback"][::std::mem::align_of::<ZRLogCallback>() - 8usize];
    ["Offset of field: ZRLogCallback::initialize_callback"]
        [::std::mem::offset_of!(ZRLogCallback, initialize_callback) - 0usize];
    ["Offset of field: ZRLogCallback::log_output_callback"]
        [::std::mem::offset_of!(ZRLogCallback, log_output_callback) - 8usize];
    ["Offset of field: ZRLogCallback::finalize_callback"]
        [::std::mem::offset_of!(ZRLogCallback, finalize_callback) - 16usize];
    ["Offset of field: ZRLogCallback::log_callback_param"]
        [::std::mem::offset_of!(ZRLogCallback, log_callback_param) - 24usize];
};
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRLogInitial(param: *const ZRLogParam) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRLogDestroy() -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRLogSetDisplayStyle(style: ZRLogDisplayStyle);
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRLogSetListener(listener: *mut ZRLogCallback) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRLogRemoveListener(listener: *mut ZRLogCallback) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRLogDebugMask(debugNum: ZR_UINT32) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRLogDebugMaskEnableRange(beginNum: ZR_UINT32, endNum: ZR_UINT32) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRLogDebugMaskDisableRange(beginNum: ZR_UINT32, endNum: ZR_UINT32) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRLogDebugMaskEnableTopicName(topicName: *const ZR_INT8) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRLogDebugMaskDisableTopicName(topicName: *const ZR_INT8) -> ZR_INT8;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRLogDebugMaskEnableEntityId(handle: *const DDS_InstanceHandle_t) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRLogDebugMaskDisableEntityId(handle: *const DDS_InstanceHandle_t) -> ZR_INT32;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRLogBeginLog(
        type_: DDS_LogType,
        file: *const ZR_INT8,
        func: *const ZR_INT8,
        line: ZR_UINT32,
        combie: ZR_BOOLEAN,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRLogBeginLogWNo(
        type_: DDS_LogType,
        file: *const ZR_INT8,
        func: *const ZR_INT8,
        line: ZR_UINT32,
        combie: ZR_BOOLEAN,
        topicName: *const ZR_INT8,
        debugNo: ZR_UINT32,
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRLogEndLog();
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRLogToConsole(
        type_: DDS_LogType,
        guid: *const __BindgenOpaqueArray<u8, 0usize>,
        topicName: *const ZR_INT8,
        debugNo: ZR_UINT32,
        file: *const ZR_INT8,
        func: *const ZR_INT8,
        line: ZR_UINT32,
        content: *const ZR_INT8,
        ...
    );
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRLogVerifyDebugCondition(
        debugNo: ZR_UINT32,
        topicName: *const ZR_INT8,
        guid: *const __BindgenOpaqueArray<u8, 0usize>,
    ) -> ZR_BOOLEAN;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRLogAquireLock();
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn ZRLogReleaseLock();
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn InstanceHandleToString(self_: *const DDS_InstanceHandle_t) -> *const ZR_INT8;
}
#[link(name = "ZRDDSC_VS2019")]
unsafe extern "C" {
    pub fn InstanceHandleToString2(self_: *const DDS_InstanceHandle_t) -> *const ZR_INT8;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
